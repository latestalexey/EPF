Перем СписокФайлов;
Перем СписокСозданныхЗаявок;
Перем Соединение;
Перем ОбщийЗапрос;

//////////////////////////////////////////////////////////
//Вспомогательные
//////////////////////////////////////////////////////////

Процедура ВыбратьКаталогХраненияФайлов()
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если ДиалогВыбора.Выбрать() тогда
		КаталогФайлов = ДиалогВыбора.Каталог + "\";
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() экспорт
	
	ВнешняяСистема = Справочники.ВнешниеСистемы.НайтиПоКоду("000000032");
	ИдентификаторДистрибьютора = ПолучитьЗначенияКлюча("CUST_ID");
	КонПериода = НачалоДня(ТекущаяДата());
	НачПериода = ОбщиеФункции.ДобавитьДень(КонПериода, -14);
	
КонецПроцедуры	

Процедура УстановитьСоединение() экспорт
	Попытка
	
		Соединение = Новый FTPСоединение(ПолучитьЗначенияКлюча("АдресСервера"), 21, ПолучитьЗначенияКлюча("Логин"), ПолучитьЗначенияКлюча("Пароль"),, Истина);
	
	Исключение
		ВызватьИсключение ОписаниеОшибки();
		//ВызватьИсключение "Не удалось установить соединение с сервером";	
	КонецПопытки; 	
КонецПроцедуры	
// Если объект 1С найден, тогда все ОК, иначе Отказ = Истина
Функция ПроверитьРезультатПоиска(ОбъектПоиска, МассивОшибок, ТекстОшибки, Отказ)

	Если НЕ ЗначениеЗаполнено(ОбъектПоиска) тогда
		МассивОшибок.Добавить(ТекстОшибки);
		Отказ = Истина;		
	КонецЕсли;	
	
	Возврат ОбъектПоиска;

КонецФункции // ПроверитьРезультатПоиска()

Функция СоздатьТаблицуЗаголовков(ИмяРаздела)
	
	ТабЗнач = Новый ТаблицаЗначений;
	
	Если ИмяРаздела = "Продажи" тогда
		
		// За основу возьмем документ ОТУ. Там больше всего необходимых реквизитов
		МетаданныеДокумента = Документы.ОтгрузкаТоваровУслуг.ПустаяСсылка().Метаданные();
		Реквизиты 			= МетаданныеДокумента.Реквизиты;
		
		Для Каждого Реквизит из Реквизиты цикл
			ТабЗнач.Колонки.Добавить(Реквизит.Имя);
		КонецЦикла;
		
		ТабЗнач.Колонки.Добавить("ЭтоВозврат", Новый ОписаниеТипов("Булево"));
		ТабЗнач.Колонки.Добавить("ВнешнийНомер", Новый ОписаниеТипов("Строка"));
		
	КонецЕсли;	
	
	Возврат ТабЗнач;
	
КонецФункции	

Функция СоздатьТаблицуСтрокДокументов(ИмяРаздела)	
	
	ТабЗнач = Новый ТаблицаЗначений;
	
	Если ИмяРаздела = "Продажи" тогда
		
		// За основу возьмем документ ОТУ. Там больше всего необходимых реквизитов
		МетаданныеДокумента = Документы.ОтгрузкаТоваровУслуг.ПустаяСсылка().Метаданные();
		РеквизитыТабЧасти 	= МетаданныеДокумента.ТабличныеЧасти.Товары.Реквизиты;
		Для Каждого Реквизит из РеквизитыТабЧасти цикл
			ТабЗнач.Колонки.Добавить(Реквизит.Имя);
		КонецЦикла;	
		
		ТабЗнач.Колонки.Добавить("ВнешнийНомер", Новый ОписаниеТипов("Строка"));
		
	КонецЕсли;	
	
	Возврат ТабЗнач;
	
КонецФункции
 
Функция ИмпортРазрешен(ИмяКлюча)
	
	СтрокаСКлючом = ВнешняяСистема.Ключи.Найти(ИмяКлюча);
	Возврат ?(СтрокаСКлючом = Неопределено ИЛИ СтрокаСКлючом.Значение = Ложь, Ложь, Истина);
	
КонецФункции

Функция ПолучитьЗначенияКлюча(ИмяКлюча) экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Ключи.Значение
	|ИЗ
	|	Справочник.ВнешниеСистемы.Ключи КАК Ключи
	|ГДЕ
	|	Ключи.Ссылка = &СсылкаНаОбъект И Ключи.Наименование = &ИмяКлюча
	|
	|СГРУППИРОВАТЬ ПО
	|	Ключи.Значение");
	Запрос.УстановитьПараметр("СсылкаНаОбъект", ВнешняяСистема); 
	Запрос.УстановитьПараметр("ИмяКлюча", ИмяКлюча); 
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаРезультата.Количество() > 1 тогда
		Возврат ТаблицаРезультата.ВыгрузитьКолонку("Значение");
	ИначеЕсли ТаблицаРезультата.Количество() = 1 тогда
		Возврат ТаблицаРезультата.Получить(0).Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	

Функция ЭтоПолеУникально(Массив, ЭлементПоиска)
	
	Возврат Массив.Найти(ЭлементПоиска) = Неопределено;	
	
КонецФункции	

Функция НайтиСтруктурнуюЕдиницу(ВнешнийКод, МассивОшибок, Отказ)
	
	//Внешний код представлен в виде Уникального идентификатора
	ПроверитьРезультатПоиска(Справочники.СтруктурныеЕдиницыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(ВнешнийКод)), МассивОшибок, "Не удалось найти торговую точку по коду: "+ВнешнийКод, Отказ);
	
КонецФункции

Функция НайтиКонтрагента(ВнешнийКод, МассивОшибок, Отказ)
	
	//Внешний код представлен в виде Уникального идентификатора
	Возврат ПроверитьРезультатПоиска(Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ВнешнийКод)), МассивОшибок, "Не удалось найти контрагента по коду: "+ВнешнийКод, Отказ);
	
КонецФункции

Функция НайтиОтветственного(ВнешнийКод, МассивОшибок, Отказ)
	
	// Т.к внешний код в Sales Works хранится в виде числа, а у нас это строка
	// Приведем код к строке с помощью формата
	Пользователь = Справочники.Пользователи.ПустаяСсылка();
	ВнешнийКод = Формат(ВнешнийКод, "ЧГ=0");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НастройкиПользователей.Пользователь
	                      |ИЗ
	                      |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	                      |ГДЕ
	                      |	НастройкиПользователей.Настройка = &Настройка
	                      |	И НастройкиПользователей.Значение = &Значение");
	Запрос.УстановитьПараметр("Настройка", ПолучитьЗначенияКлюча("СВОЙСТВОАГЕНТА")); 
	Запрос.УстановитьПараметр("Значение", ВнешнийКод); 
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() тогда
		Пользователь = РезультатЗапроса.Пользователь;
	КонецЕсли;	
	
	Возврат ПроверитьРезультатПоиска(Пользователь, МассивОшибок, "Не удалось найти ответственного по коду: "+ВнешнийКод, Отказ);	
	
КонецФункции	

Функция НайтиТовар(ВнешнийКод, МассивОшибок, Отказ)
	
	Возврат ПроверитьРезультатПоиска(Справочники.Номенклатура.НайтиПоКоду(ВнешнийКод), МассивОшибок, "Не удалось найти товар по коду: "+ВнешнийКод, Отказ);
	
КонецФункции	

Функция НайтиОрганизацию(ВнешнийКод, МассивОшибок, Отказ)
	
	Возврат ПроверитьРезультатПоиска(Справочники.Организации.НайтиПоКоду(ВнешнийКод), МассивОшибок, "Не удалось найти организацию по коду: "+ВнешнийКод, Отказ);
	
КонецФункции

Функция ЕстьТакойЗаказ(НомерЗаказа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Свойство,
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И ЗначенияСвойствОбъектов.Значение = &Значение";
	
	Запрос.УстановитьПараметр("Свойство", ПолучитьЗначенияКлюча("СВОЙСТВОЗАКАЗА"));
	Запрос.УстановитьПараметр("Значение", НомерЗаказа); 
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ПроверитьУстановитьКоммерческиеУсловия(СтрокаЗаголовка)
	
	//В данных у нас стандартные условия для отгрузки клиентам
	//Попробуем подобрать ком. условия, если найдем, то пару свойств сравним и перезаполним
	//Получим таблицу значений с ком. условиями	
	СтруктураКомУсловий = РегламентныеПроцедуры.ПолучитьКоммерческиеУсловия(СтрокаЗаголовка.Контрагент, СтрокаЗаголовка.СтруктурнаяЕдиницаКонтрагента, СтрокаЗаголовка.Ответственный, СтрокаЗаголовка.ДоговорКонтрагента);
	
	Если НЕ СтруктураКомУсловий = Неопределено тогда
		
		Если ЗначениеЗаполнено(СтруктураКомУсловий.Отсрочка)
			И СтрокаЗаголовка.СрокКредитования <> СтруктураКомУсловий.Отсрочка тогда
			
			СтрокаЗаголовка.СрокКредитования 		= СтруктураКомУсловий.Отсрочка;
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтруктураКомУсловий.СпособРасчетов)
			И СтрокаЗаголовка.СпособРасчетов <> СтруктураКомУсловий.СпособРасчетов тогда
			
			СтрокаЗаголовка.СпособРасчетов 			= СтруктураКомУсловий.СпособРасчетов;
			
		КонецЕсли;
				
		Если ЗначениеЗаполнено(СтруктураКомУсловий.ТипЦены)
			И СтрокаЗаголовка.ТипЦен <> СтруктураКомУсловий.ТипЦены тогда
			
			СтрокаЗаголовка.ТипЦен 					= СтруктураКомУсловий.ТипЦены;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ДобавитьСтрокуВТаблицуЗаказа(ТабЗнач, СтрокаЗаказа, НомерЗаказа, МассивОшибок, Отказ)
	
	НовСтр = ТабЗнач.Добавить();
	НовСтр.ВнешнийНомер = НомерЗаказа;
	НовСтр.Номенклатура = НайтиТовар(СтрокаЗаказа.LOCALCODE, МассивОшибок, Отказ);	
	НовСтр.ЕдиницаИзмерения = НовСтр.Номенклатура.ЕдиницаХраненияОстатков;
	НовСтр.Количество = Число(СтрокаЗаказа.QTY);
	НовСтр.СтавкаНДС = НовСтр.Номенклатура.СтавкаНДС;
	НовСтр.Качество = Справочники.Качество.Стандарт;
	НовСтр.СпособСписанияОстатка = Перечисления.СпособыСписанияОстаткаТоваров.Собственный;
	
КонецПроцедуры	

Процедура ПривязатьВнешнийНомерКНакладной(СсылкаНаОбъект, Свойство, НомерЗаказа)
	
	НоваяЗапись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	НоваяЗапись.Объект = СсылкаНаОбъект;
	НоваяЗапись.Свойство = Свойство;
	НоваяЗапись.Значение = НомерЗаказа;
	
	Попытка
		НоваяЗапись.Записать();
	Исключение
		ВызватьИсключение "Для документа ["+СсылкаНаОбъект.Ссылка+"] не удалось заполнить свойство 'Номер входящего документа'";
	КонецПопытки;	
	
КонецПроцедуры	

//Конец области Вспомогательные


//////////////////////////////////////////////////////////
//ТЕКСТЫ ЗАПРОСОВ
//////////////////////////////////////////////////////////

Функция ПолучитьТекстЗапросаПоНоменклатуре()
	
	Возврат "ВЫБРАТЬ
	        |	ЗначенияСвойствОбъектов.Объект,
	        |	ЗначенияСвойствОбъектов.Значение КАК КодПроизводителя
	        |ПОМЕСТИТЬ втКодыПроизводителяМарс
	        |ИЗ
	        |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	        |ГДЕ
	        |	ЗначенияСвойствОбъектов.Свойство = &КодSW_Номенклатуры
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	Номенклатура.Ссылка
	        |ПОМЕСТИТЬ втНеиспользуемыеТовары
	        |ИЗ
	        |	Справочник.Номенклатура КАК Номенклатура
	        |ГДЕ
	        |	Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппыНеиспользуемыхТоваров)
	        |	И НЕ Номенклатура.ЭтоГруппа
	        |	И НЕ Номенклатура.ПометкаУдаления
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	МАКСИМУМ(КомплектацияНоменклатуры.Ссылка) КАК Ссылка,
	        |	КомплектацияНоменклатуры.Номенклатура,
	        |	КомплектацияНоменклатуры.Номенклатура.ЕдиницаХраненияОстатков.Вес КАК Вес,
	        |	СУММА(КомплектующиеНоменклатуры.Количество) КАК КоличествоКомплекта
	        |ПОМЕСТИТЬ втНоменклатураМикс
	        |ИЗ
	        |	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомплектацияНоменклатуры.Комплектующие КАК КомплектующиеНоменклатуры
	        |		ПО КомплектацияНоменклатуры.Ссылка = КомплектующиеНоменклатуры.Ссылка
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	КомплектацияНоменклатуры.Номенклатура,
	        |	КомплектацияНоменклатуры.Номенклатура.ЕдиницаХраненияОстатков.Вес
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	спрНоменклатура.Код КАК LOCALCODE,
	        |	ВЫБОР
	        |		КОГДА ЕСТЬNULL(МиксТовары.Объект, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	        |			ТОГДА ЕСТЬNULL(втКодыПроизводителяМарс.КодПроизводителя, спрНоменклатура.Артикул)
	        |		ИНАЧЕ """"
	        |	КОНЕЦ КАК CODE,
	        |	ВЫРАЗИТЬ(спрНоменклатура.НаименованиеПолное КАК СТРОКА(50)) КАК NAME,
	        |	ВЫРАЗИТЬ(спрНоменклатура.Наименование КАК СТРОКА(50)) КАК SHORTNAME,
	        |	ВЫРАЗИТЬ(спрНоменклатура.ЕдиницаХраненияОстатков.Вес КАК ЧИСЛО(11, 5)) КАК WEIGHT,
	        |	ВЫРАЗИТЬ(спрНоменклатура.ЕдиницаПродаж3.Коэффициент КАК ЧИСЛО(14, 3)) КАК PACK_QTY,
	        |	ВЫБОР
	        |		КОГДА ЕСТЬNULL(МиксТовары.Объект, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	        |			ТОГДА ЛОЖЬ
	        |		ИНАЧЕ ИСТИНА
	        |	КОНЕЦ КАК ISMIX,
	        |	ВЫБОР
	        |		КОГДА спрНоменклатура.ПометкаУдаления
	        |			ТОГДА 9
	        |		ИНАЧЕ 2
	        |	КОНЕЦ КАК STATUS,
	        |	&ДатаОбмена КАК DTLM,
	        |	&ИдентификаторДистрибьютора КАК CUST_ID
	        |ИЗ
	        |	Справочник.Номенклатура КАК спрНоменклатура
	        |		ЛЕВОЕ СОЕДИНЕНИЕ втКодыПроизводителяМарс КАК втКодыПроизводителяМарс
	        |		ПО спрНоменклатура.Ссылка = втКодыПроизводителяМарс.Объект
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК МиксТовары
	        |		ПО спрНоменклатура.Ссылка = МиксТовары.Объект
	        |			И (МиксТовары.Свойство = &Свойство_ЭтоМикс)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ втНеиспользуемыеТовары КАК втНеиспользуемыеТовары
	        |		ПО спрНоменклатура.Ссылка = втНеиспользуемыеТовары.Ссылка
	        |ГДЕ
	        |	спрНоменклатура.Ссылка В ИЕРАРХИИ(&МассивГруппНоменклатуры)
	        |	И НЕ спрНоменклатура.ЭтоГруппа
	        |	И НЕ спрНоменклатура.ПометкаУдаления
	        |	И НЕ спрНоменклатура.Артикул = """"
	        |	И ЕСТЬNULL(втНеиспользуемыеТовары.Ссылка, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	спрНоменклатура.Ссылка,
	        |	спрНоменклатура.Код,
	        |	ВЫБОР
	        |		КОГДА спрНоменклатура.ПометкаУдаления
	        |			ТОГДА 9
	        |		ИНАЧЕ 2
	        |	КОНЕЦ,
	        |	МиксТовары.Объект,
	        |	ВЫРАЗИТЬ(спрНоменклатура.НаименованиеПолное КАК СТРОКА(50)),
	        |	ВЫРАЗИТЬ(спрНоменклатура.Наименование КАК СТРОКА(50)),
	        |	ВЫРАЗИТЬ(спрНоменклатура.ЕдиницаХраненияОстатков.Вес КАК ЧИСЛО(11, 5)),
	        |	ВЫРАЗИТЬ(спрНоменклатура.ЕдиницаПродаж3.Коэффициент КАК ЧИСЛО(14, 3)),
	        |	ВЫБОР
	        |		КОГДА ЕСТЬNULL(МиксТовары.Объект, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	        |			ТОГДА ЕСТЬNULL(втКодыПроизводителяМарс.КодПроизводителя, спрНоменклатура.Артикул)
	        |		ИНАЧЕ """"
	        |	КОНЕЦ
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	спрНоменклатура.ДистрибьюторскийКонтракт
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	втНоменклатураМикс.Номенклатура.Код КАК LOCALCODE,
	        |	КомплектующиеНоменклатуры.Номенклатура.Код КАК COMPCODE,
	        |	ВЫРАЗИТЬ(втНоменклатураМикс.Вес / КомплектующиеНоменклатуры.ЕдиницаИзмерения.Вес КАК ЧИСЛО(14, 3)) КАК COMPQTY,
	        |	ВЫРАЗИТЬ(КомплектующиеНоменклатуры.Количество / втНоменклатураМикс.КоличествоКомплекта * 100 КАК ЧИСЛО(6, 2)) КАК PERCENTAGE,
	        |	ВЫБОР
	        |		КОГДА КомплектующиеНоменклатуры.Номенклатура.ПометкаУдаления
	        |			ТОГДА 9
	        |		ИНАЧЕ 2
	        |	КОНЕЦ КАК STATUS,
	        |	&ДатаОбмена КАК DTLM,
	        |	&ИдентификаторДистрибьютора КАК CUST_ID
	        |ИЗ
	        |	втНоменклатураМикс КАК втНоменклатураМикс
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КомплектацияНоменклатуры.Комплектующие КАК КомплектующиеНоменклатуры
	        |		ПО втНоменклатураМикс.Ссылка = КомплектующиеНоменклатуры.Ссылка";
	
КонецФункции	

Функция ПолучитьТекстЗапросаПоНоменклатуреСКвантами()
	Возврат "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Значение КАК КодПроизводителя
	|ПОМЕСТИТЬ втКодыПроизводителяМарс
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &КодSW_Номенклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ПОМЕСТИТЬ втНеиспользуемыеТовары
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппыНеиспользуемыхТоваров)
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|;	
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	спрНоменклатура.Код КАК LOCALCODE,
	|	спрНоменклатура.МинимальноеКоличествоПродажи КАК QTY,
	|	ВЫБОР
	|		КОГДА спрНоменклатура.ПометкаУдаления
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК STATUS,
	|	&ДатаОбмена КАК DTLM,
	|	&ИдентификаторДистрибьютора КАК CUST_ID
	|ИЗ
	|	Справочник.Номенклатура КАК спрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодыПроизводителяМарс КАК втКодыПроизводителяМарс
	|		ПО спрНоменклатура.Ссылка = втКодыПроизводителяМарс.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНеиспользуемыеТовары КАК втНеиспользуемыеТовары
	|		ПО спрНоменклатура.Ссылка = втНеиспользуемыеТовары.Ссылка
	
	|ГДЕ
	|	спрНоменклатура.Ссылка В ИЕРАРХИИ(&МассивГруппНоменклатуры)
	|   И ЕСТЬNULL(втНеиспользуемыеТовары.Ссылка, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|	И НЕ спрНоменклатура.ЭтоГруппа
	|	И НЕ спрНоменклатура.ПометкаУдаления
	|	И НЕ спрНоменклатура.Артикул = """"
	|	И спрНоменклатура.МинимальноеКоличествоПродажи > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	спрНоменклатура.Ссылка,
	|	спрНоменклатура.Код,
	|	ЕСТЬNULL(втКодыПроизводителяМарс.КодПроизводителя, спрНоменклатура.Артикул),
	|	ВЫРАЗИТЬ(спрНоменклатура.НаименованиеПолное КАК СТРОКА(150)),
	|	ВЫБОР
	|		КОГДА спрНоменклатура.ПометкаУдаления
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	спрНоменклатура.МинимальноеКоличествоПродажи
	|
	|УПОРЯДОЧИТЬ ПО
	|	спрНоменклатура.ДистрибьюторскийКонтракт";	
КонецФункции	

Функция ПолучитьТекстЗапросаПоАрхивнымОстаткам()
	Возврат "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Значение КАК КодПроизводителя
	|ПОМЕСТИТЬ втКодыПроизводителяМарс
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &КодSW_Номенклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ПОМЕСТИТЬ втНеиспользуемыеТовары
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппыНеиспользуемыхТоваров)
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления;
	|   
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	спрНоменклатура.ОсновнойСкладОтгрузки.Код КАК WAREH_CODE,
	|	спрНоменклатура.Код КАК LOCALCODE,
	|	""0"" КАК LOT_ID,
	|	&ДатаСрезаОстатков КАК DATE,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ЗапасыНаСкладах.КоличествоОстаток), 0) КАК ЧИСЛО(14, 3)) КАК STOCK,
	|	&ДатаОбмена КАК DTLM,
	|	&ИдентификаторДистрибьютора КАК CUST_ID
	|ИЗ
	|	Справочник.Номенклатура КАК спрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодыПроизводителяМарс КАК втКодыПроизводителяМарс
	|		ПО спрНоменклатура.Ссылка = втКодыПроизводителяМарс.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(&ДатаСрезаОстатков, Склад В (&СписокСкладов)) КАК ЗапасыНаСкладах
	|		ПО спрНоменклатура.Ссылка = ЗапасыНаСкладах.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНеиспользуемыеТовары КАК втНеиспользуемыеТовары
	|		ПО спрНоменклатура.Ссылка = втНеиспользуемыеТовары.Ссылка
	
	|ГДЕ
	|	спрНоменклатура.Ссылка В ИЕРАРХИИ(&МассивГруппНоменклатуры)
	|	И НЕ спрНоменклатура.ЭтоГруппа
	|	И НЕ спрНоменклатура.ПометкаУдаления
	|	И НЕ спрНоменклатура.Артикул = """"
	|   И ЕСТЬNULL(втНеиспользуемыеТовары.Ссылка, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	спрНоменклатура.Ссылка,
	|	спрНоменклатура.Код,
	|	ЕСТЬNULL(втКодыПроизводителяМарс.КодПроизводителя, спрНоменклатура.Артикул),
	|	ВЫРАЗИТЬ(спрНоменклатура.НаименованиеПолное КАК СТРОКА(150)),
	|	ВЫБОР
	|		КОГДА спрНоменклатура.ПометкаУдаления
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	спрНоменклатура.ОсновнойСкладОтгрузки.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	спрНоменклатура.ДистрибьюторскийКонтракт";
КонецФункции	

Функция ПолучитьТекстЗапросаПоТекущимОстаткам()
	Возврат "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Значение КАК КодПроизводителя
	|ПОМЕСТИТЬ втКодыПроизводителяМарс
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &КодSW_Номенклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ПОМЕСТИТЬ втНеиспользуемыеТовары
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппыНеиспользуемыхТоваров)
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	спрНоменклатура.ОсновнойСкладОтгрузки.Код КАК WAREH_CODE,
	|	ЕСТЬNULL(втКодыПроизводителяМарс.КодПроизводителя, спрНоменклатура.Артикул) КАК PRODCODE,
	|	спрНоменклатура.Код КАК LOCALCODE,
	|	""0"" КАК LOT_ID,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ЗапасыНаСкладах.КоличествоОстаток), 0) КАК ЧИСЛО(13, 3)) КАК STOCK,
	|	ВЫБОР
	|		КОГДА спрНоменклатура.ПометкаУдаления
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК STATUS,
	|	&ДатаОбмена КАК DTLM,
	|	&ИдентификаторДистрибьютора КАК CUST_ID
	|ИЗ
	|	Справочник.Номенклатура КАК спрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодыПроизводителяМарс КАК втКодыПроизводителяМарс
	|		ПО спрНоменклатура.Ссылка = втКодыПроизводителяМарс.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(&ДатаОбмена, Склад В (&СписокСкладов)) КАК ЗапасыНаСкладах
	|		ПО спрНоменклатура.Ссылка = ЗапасыНаСкладах.Номенклатура
	|   	ЛЕВОЕ СОЕДИНЕНИЕ втНеиспользуемыеТовары КАК втНеиспользуемыеТовары
	|   	ПО спрНоменклатура.Ссылка = втНеиспользуемыеТовары.Ссылка
	|ГДЕ
	|	спрНоменклатура.Ссылка В ИЕРАРХИИ(&МассивГруппНоменклатуры)
	|	И НЕ спрНоменклатура.ЭтоГруппа
	|	И НЕ спрНоменклатура.ПометкаУдаления
	|	И НЕ спрНоменклатура.Артикул = """"
	|   И ЕСТЬNULL(втНеиспользуемыеТовары.Ссылка, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	спрНоменклатура.Ссылка,
	|	спрНоменклатура.Код,
	|	ЕСТЬNULL(втКодыПроизводителяМарс.КодПроизводителя, спрНоменклатура.Артикул),
	|	ВЫРАЗИТЬ(спрНоменклатура.НаименованиеПолное КАК СТРОКА(150)),
	|	ВЫБОР
	|		КОГДА спрНоменклатура.ПометкаУдаления
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	спрНоменклатура.ОсновнойСкладОтгрузки.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	спрНоменклатура.ДистрибьюторскийКонтракт";
КонецФункции	

Функция ПолучитьТекстЗапросаПоПрайсам()
	Возврат "ВЫБРАТЬ
	        |	Продажи.Ссылка.ТипЦен КАК ТипЦен
	        |ПОМЕСТИТЬ втТипыЦенИзПродаж
	        |ИЗ
	        |	Документ.ОтгрузкаТоваровУслуг.Товары КАК Продажи
	        |ГДЕ
	        |	Продажи.Номенклатура.ДистрибьюторскийКонтракт В(&СписокКонтрактов)
	        |	И Продажи.Ссылка.ДатаОтгрузки МЕЖДУ &НачалоПериода И &КонецПериода
	        |	И Продажи.Ссылка.Проведен
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	Продажи.Ссылка.ТипЦен
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	Номенклатура.Ссылка
	        |ПОМЕСТИТЬ втНеиспользуемыеТовары
	        |ИЗ
	        |	Справочник.Номенклатура КАК Номенклатура
	        |ГДЕ
	        |	Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппыНеиспользуемыхТоваров)
	        |	И НЕ Номенклатура.ЭтоГруппа
	        |	И НЕ Номенклатура.ПометкаУдаления
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ЦеныНоменклатуры.Номенклатура,
	        |	ЦеныНоменклатуры.ТипЦен,
	        |	ЦеныНоменклатуры.Цена
	        |ПОМЕСТИТЬ втЦеныНоменклатуры
	        |ИЗ
	        |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	        |			,
	        |			ТипЦен В
	        |				(ВЫБРАТЬ
	        |					втТипыЦенИзПродаж.ТипЦен
	        |				ИЗ
	        |					втТипыЦенИзПродаж)) КАК ЦеныНоменклатуры
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	""0"" КАК CODE,
	        |	спрНоменклатура.Код КАК LOCALCODE,
	        |	""0"" КАК PAYFORM_ID,
	        |	втЦеныНоменклатуры.ТипЦен.Код КАК PAYF_CODE,
	        |	ВЫРАЗИТЬ(втЦеныНоменклатуры.Цена КАК ЧИСЛО(15, 8)) КАК PRICE,
	        |	ВЫБОР
	        |		КОГДА спрНоменклатура.ПометкаУдаления
	        |			ТОГДА 9
	        |		ИНАЧЕ 2
	        |	КОНЕЦ КАК STATUS,
	        |	&ДатаОбмена КАК DTLM,
	        |	&ИдентификаторДистрибьютора КАК CUST_ID
	        |ИЗ
	        |	Справочник.Номенклатура КАК спрНоменклатура
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЦеныНоменклатуры КАК втЦеныНоменклатуры
	        |		ПО спрНоменклатура.Ссылка = втЦеныНоменклатуры.Номенклатура
	        |		ЛЕВОЕ СОЕДИНЕНИЕ втНеиспользуемыеТовары КАК втНеиспользуемыеТовары
	        |		ПО спрНоменклатура.Ссылка = втНеиспользуемыеТовары.Ссылка
	        |ГДЕ
	        |	спрНоменклатура.Ссылка В ИЕРАРХИИ(&МассивГруппНоменклатуры)
	        |	И НЕ спрНоменклатура.ЭтоГруппа
	        |	И НЕ спрНоменклатура.ПометкаУдаления
	        |	И НЕ спрНоменклатура.Артикул = """"
	        |	И ЕСТЬNULL(втНеиспользуемыеТовары.Ссылка, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	PAYF_CODE";
КонецФункции	

Функция ПолучитьТекстЗапросаПоКонтрагентам()
	Возврат "ВЫБРАТЬ
	        |	т.Контрагент
	        |ПОМЕСТИТЬ втКонтрагенты
	        |ИЗ
	        |	втФинальнаяТаблицаДанных КАК т
	        |ГДЕ
			|  ТИПЗНАЧЕНИЯ(т.Контрагент) = ТИП(Справочник.Контрагенты)	  
	        |СГРУППИРОВАТЬ ПО
	        |	т.Контрагент
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	втКонтрагенты.Контрагент КАК PCOMP_CODE,
	        |	ВЫРАЗИТЬ(втКонтрагенты.Контрагент.Наименование КАК СТРОКА(50)) КАК PC_NAME,
	        |	ВЫРАЗИТЬ(ЕСТЬNULL(киЮрАдрес.Представление, ЕСТЬNULL(киФактАдрес.Представление, """")) КАК СТРОКА(80)) КАК PC_ADDR,
	        |	втКонтрагенты.Контрагент.КодПоОКПО КАК PC_ZKPO,
	        |	втКонтрагенты.Контрагент.ИНН КАК PC_TAX_NUM,
	        |	"""" КАК PC_VAT_NUM,
	        |	"""" КАК PC_B_NAME,
	        |	"""" КАК PC_B_MFO,
	        |	"""" КАК PC_B_ACC,
	        |	"""" КАК PC_DIRECT,
	        |	ВЫРАЗИТЬ(киТелефоны.Представление КАК СТРОКА(20)) КАК PC_PHONE,
	        |	"""" КАК PC_FAX,
	        |	"""" КАК PC_EMAIL,
	        |	"""" КАК PC_ACCOUNT,
	        |	"""" КАК PC_ACC_PH,
	        |	"""" КАК PC_MMANAG,
	        |	"""" КАК PC_MM_PH,
	        |	"""" КАК PC_PMANAG,
	        |	ВЫБОР
	        |		КОГДА втКонтрагенты.Контрагент.ПометкаУдаления
	        |			ТОГДА 9
	        |		ИНАЧЕ 2
	        |	КОНЕЦ КАК STATUS,
	        |	&ДатаОбмена КАК DTLM,
	        |	&ИдентификаторДистрибьютора КАК CUST_ID
	        |ИЗ
	        |	втКонтрагенты КАК втКонтрагенты
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК киЮрАдрес
	        |		ПО втКонтрагенты.Контрагент = киЮрАдрес.Объект
	        |			И (киЮрАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК киФактАдрес
	        |		ПО втКонтрагенты.Контрагент = киФактАдрес.Объект
	        |			И (киФактАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК киТелефоны
	        |		ПО втКонтрагенты.Контрагент = киТелефоны.Объект
	        |			И (киТелефоны.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
			|ГДЕ
			|   НЕ ЕСТЬNULL(втКонтрагенты.Контрагент.Наименование, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО 
			|   			
	        |УПОРЯДОЧИТЬ ПО
	        |	втКонтрагенты.Контрагент";
КонецФункции	

Функция ПолучитьТекстЗапросаПоТорговымТочкам()
	Возврат "ВЫБРАТЬ
	|	т.СтруктурнаяЕдиницаКонтрагента КАК ТорговаяТочка
	|ПОМЕСТИТЬ втТоргТочки
	|ИЗ
	|	втФинальнаяТаблицаДанных КАК т
	|ГДЕ
	|  	ТИПЗНАЧЕНИЯ(т.СтруктурнаяЕдиницаКонтрагента) = ТИП(Справочник.СтруктурныеЕдиницыКонтрагентов)	  
	|СГРУППИРОВАТЬ ПО
	|	т.СтруктурнаяЕдиницаКонтрагента
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Значение КАК КодПроизводителя
	|ПОМЕСТИТЬ втКодыПроизводителяМарс
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &КодSW_Номенклатуры
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОТУ.СтруктурнаяЕдиницаКонтрагента КАК ТорговаяТочка,
	|	ОТУ.ДокументСсылка.ТипЦен КАК ТипЦен
	|ПОМЕСТИТЬ втТоргТочкиПоТипамЦенИОрганизациям
	|ИЗ
	|	втФинальнаяТаблицаДанных КАК ОТУ
	|ГДЕ
	|	НЕ ЕСТЬNULL(ОТУ.ДокументСсылка.ТипЦен, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|   И ТИПЗНАЧЕНИЯ(ОТУ.СтруктурнаяЕдиницаКонтрагента) = ТИП(Справочник.СтруктурныеЕдиницыКонтрагентов)	 
	|СГРУППИРОВАТЬ ПО
	|	ОТУ.СтруктурнаяЕдиницаКонтрагента,
	|	ОТУ.ДокументСсылка.ТипЦен
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТорговыеТочкиВладельца.Ссылка, СкидкиНаценкиНоменклатуры.ПолучательСкидки) КАК ПолучательСкидки,
	|	СкидкиНаценкиНоменклатуры.Номенклатура,
	|	ВЫРАЗИТЬ(СкидкиНаценкиНоменклатуры.ПроцентСкидкиНаценки КАК ЧИСЛО(9, 2)) КАК ПроцентСкидкиНаценки
	|ПОМЕСТИТЬ втПолучателиСкидки
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура.ДистрибьюторскийКонтракт В (&СписокКонтрактов)
	|				И НЕ Наценка
	|				И (ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ ДатаОкончания > &ДатаОбмена)) КАК СкидкиНаценкиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницыКонтрагентов КАК ТорговыеТочкиВладельца
	|		ПО СкидкиНаценкиНоменклатуры.ПолучательСкидки = ТорговыеТочкиВладельца.Владелец
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СкидкиНаценкиНоменклатуры.ПолучательСкидки) = ТИП(Справочник.Контрагенты)
	
	|ОБЪЕДИНИТЬ
	
	|ВЫБРАТЬ
	|	СкидкиНаценкиНоменклатуры.ПолучательСкидки,
	|	СкидкиНаценкиНоменклатуры.Номенклатура,
	|	ВЫРАЗИТЬ(СкидкиНаценкиНоменклатуры.ПроцентСкидкиНаценки КАК ЧИСЛО(9, 2))
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура.ДистрибьюторскийКонтракт В (&СписокКонтрактов)
	|				И НЕ Наценка
	|				И (ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ ДатаОкончания > &ДатаОбмена)) КАК СкидкиНаценкиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницыКонтрагентов КАК ТорговыеТочкиВладельца
	|		ПО СкидкиНаценкиНоменклатуры.ПолучательСкидки = ТорговыеТочкиВладельца.Владелец
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СкидкиНаценкиНоменклатуры.ПолучательСкидки) = ТИП(Справочник.СтруктурныеЕдиницыКонтрагентов)
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоргТочки.ТорговаяТочка КАК LOC_CODE,
	|	ВЫРАЗИТЬ(втТоргТочки.ТорговаяТочка.Наименование КАК СТРОКА(255)) КАК NAME,
	|	ВЫРАЗИТЬ(втТоргТочки.ТорговаяТочка.Владелец.Наименование + "" ("" + втТоргТочки.ТорговаяТочка.Наименование + "")"" КАК СТРОКА(255)) КАК TRADE_NAME,
	|	"""" КАК DIRECTOR,
	|	ЕСТЬNULL(ЮрАдресаКонтрагентов.Представление, """") КАК ADDRESS,
	|	ЕСТЬNULL(ФактАдресаТТ.Представление, """") КАК DELIV_ADDR,
	|	"""" КАК TELEPHONE,
	|	втТоргТочки.ТорговаяТочка.Владелец.КодПоОКПО КАК ZKPO,
	|	втТоргТочки.ТорговаяТочка.Владелец.ИНН КАК IPN,
	|	"""" КАК VATN,
	|	"""" КАК APPARTM,
	|	""0"" КАК KL_CODE,
	|	""0"" КАК OL_ID,
	|	ВЫБОР
	|		КОГДА втТоргТочки.ТорговаяТочка.ПометкаУдаления
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК STATUS,
	|	&ДатаОбмена КАК DTLM,
	|	&ИдентификаторДистрибьютора КАК CUST_ID
	|ИЗ
	|	втТоргТочки КАК втТоргТочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ЮрАдресаКонтрагентов
	|		ПО втТоргТочки.ТорговаяТочка.Владелец = ЮрАдресаКонтрагентов.Объект
	|			И (ЮрАдресаКонтрагентов.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ФактАдресаТТ
	|		ПО втТоргТочки.ТорговаяТочка = ФактАдресаТТ.Объект
	|			И (ФактАдресаТТ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСтруктурнойЕдиницыКонтрагента))
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоргТочкиПоТипамЦенИОрганизациям.ТорговаяТочка КАК LOC_CODE,
	|	&ИдентификаторДистрибьютора КАК CUST_ID,
	|	втТоргТочкиПоТипамЦенИОрганизациям.ТорговаяТочка.Владелец КАК PCOMP_CODE,
	|	0 КАК PAYFORM_ID,
	|	втТоргТочкиПоТипамЦенИОрганизациям.ТипЦен.Код КАК PAYF_CODE,
	|	ВЫБОР
	|		КОГДА втТоргТочкиПоТипамЦенИОрганизациям.ТорговаяТочка.ПометкаУдаления
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК STATUS,
	|	&ДатаОбмена КАК DTLM
	|ИЗ
	|	втТоргТочкиПоТипамЦенИОрганизациям КАК втТоргТочкиПоТипамЦенИОрганизациям
	
	|УПОРЯДОЧИТЬ ПО
	|	втТоргТочкиПоТипамЦенИОрганизациям.ТипЦен,
	|	втТоргТочкиПоТипамЦенИОрганизациям.ТорговаяТочка.Владелец
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПолучателиСкидки.ПолучательСкидки КАК LOCALOL_CODE,
	|	втПолучателиСкидки.ПолучательСкидки.Владелец КАК PCOMP_CODE,
	|	"""" КАК CODE,
	|	втПолучателиСкидки.Номенклатура.Код КАК LOCALCODE,
	|	втПолучателиСкидки.ПроцентСкидкиНаценки КАК DISCOUNT,
	|	&ДатаОбмена КАК DTLM,
	|	ВЫБОР
	|		КОГДА втПолучателиСкидки.ПолучательСкидки.ПометкаУдаления
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК STATUS,
	|	&ИдентификаторДистрибьютора КАК CUST_ID
	|ИЗ
	|	втТоргТочки КАК втТоргТочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПолучателиСкидки КАК втПолучателиСкидки
	|		ПО втТоргТочки.ТорговаяТочка = втПолучателиСкидки.ПолучательСкидки
	|ГДЕ
	|	НЕ втПолучателиСкидки.ПолучательСкидки.Код ЕСТЬ NULL
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоргТочки.ТорговаяТочка КАК LOC_CODE,
	|	&ИдентификаторДистрибьютора КАК CUST_ID,
	|	втТоргТочки.ТорговаяТочка.Владелец КАК PCOMP_CODE,
	|	ВЫБОР
	|		КОГДА втТоргТочки.ТорговаяТочка.ПометкаУдаления
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК STATUS,
	|	&ДатаОбмена КАК DTLM
	|ИЗ
	|	втТоргТочки КАК втТоргТочки
	|ГДЕ
	|	НЕ втТоргТочки.ТорговаяТочка.Код ЕСТЬ NULL
	
	|СГРУППИРОВАТЬ ПО
	|	втТоргТочки.ТорговаяТочка,
	|	ВЫБОР
	|		КОГДА втТоргТочки.ТорговаяТочка.ПометкаУдаления
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	втТоргТочки.ТорговаяТочка.Владелец
	
	|УПОРЯДОЧИТЬ ПО
	|	втТоргТочки.ТорговаяТочка.Владелец";
КонецФункции	

Функция ПолучитьТекстЗапросаПоНедопоставкам()
	
	Возврат "ВЫБРАТЬ
	|	Доставка.Ссылка.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Доставка.Номенклатура,
	|	СУММА(Доставка.Количество) КАК КоличествоПлан,
	|	СУММА(Доставка.Передано) КАК Количество
	|ПОМЕСТИТЬ втНедопоставки
	|ИЗ
	|	Документ.ИнвентаризацияДоставки.Товары КАК Доставка
	|ГДЕ
	|	Доставка.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&НачПериод, ДЕНЬ, -15) И ДОБАВИТЬКДАТЕ(&КонПериод, ДЕНЬ, 15)
	|	И Доставка.Ссылка.Проведен
	|	И Доставка.Номенклатура В ИЕРАРХИИ(&МассивГруппНоменклатуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	Доставка.Ссылка.ДокументОтгрузки,
	|	Доставка.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНедопоставки.ДокументОтгрузки,
	|	0 КАК КодОтказа
	|ПОМЕСТИТЬ втНедопоставленныеЗаказы
	|ИЗ
	|	втНедопоставки КАК втНедопоставки
	|ГДЕ
	|	втНедопоставки.ДокументОтгрузки.Подразделение В(&СписокПодразделений)
	|	И втНедопоставки.ДокументОтгрузки.Дата МЕЖДУ &НачПериод И &КонПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	втНедопоставки.ДокументОтгрузки
	|
	|ИМЕЮЩИЕ
	|	СУММА(втНедопоставки.Количество) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНедопоставки.ДокументОтгрузки,
	|	1 КАК КодОтказа
	|ПОМЕСТИТЬ втНедопоставленныеТовары
	|ИЗ
	|	втНедопоставки КАК втНедопоставки
	|ГДЕ
	|	втНедопоставки.ДокументОтгрузки.Подразделение В(&СписокПодразделений)
	|	И втНедопоставки.ДокументОтгрузки.Дата МЕЖДУ &НачПериод И &КонПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	втНедопоставки.ДокументОтгрузки
	|
	|ИМЕЮЩИЕ
	|	СУММА(втНедопоставки.Количество) <> СУММА(втНедопоставки.КоличествоПлан)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СвойстваДокументов.Значение, ОбщийЗапрос.ДокументОтгрузки.Номер) КАК ORDER_NO,
	|	ОбщийЗапрос.КодОтказа КАК DENIAL_ID,
	|	2 КАК STATUS,
	|	&ИдентификаторДистрибьютора КАК CUST_ID
	|ИЗ
	|	(ВЫБРАТЬ
	|		втНедопоставленныеЗаказы.ДокументОтгрузки КАК ДокументОтгрузки,
	|		втНедопоставленныеЗаказы.КодОтказа КАК КодОтказа
	|	ИЗ
	|		втНедопоставленныеЗаказы КАК втНедопоставленныеЗаказы
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		втНедопоставленныеТовары.ДокументОтгрузки,
	|		втНедопоставленныеТовары.КодОтказа
	|	ИЗ
	|		втНедопоставленныеТовары КАК втНедопоставленныеТовары) КАК ОбщийЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваДокументов
	|		ПО ОбщийЗапрос.ДокументОтгрузки = СвойстваДокументов.Объект
	|			И (СвойстваДокументов.Свойство = &НомераВходящихДокументов)
	|ГДЕ
	|	ЕСТЬNULL(СвойстваДокументов.Значение, """") <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбщийЗапрос.КодОтказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СвойстваДокументов.Значение, втНедопоставки.ДокументОтгрузки.Номер) КАК ORDER_NO,
	|	втНедопоставки.Номенклатура.Код КАК CODE,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втНедопоставленныеЗаказы.ДокументОтгрузки, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК DENIAL_ID,
	|	2 КАК STATUS,
	|	&ИдентификаторДистрибьютора КАК CUST_ID
	|ИЗ
	|	втНедопоставки КАК втНедопоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваДокументов
	|		ПО втНедопоставки.ДокументОтгрузки = СвойстваДокументов.Объект
	|			И (СвойстваДокументов.Свойство = &НомераВходящихДокументов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНедопоставленныеЗаказы КАК втНедопоставленныеЗаказы
	|		ПО втНедопоставки.ДокументОтгрузки = втНедопоставленныеЗаказы.ДокументОтгрузки
	|ГДЕ
	|	втНедопоставки.ДокументОтгрузки.Подразделение В(&СписокПодразделений)
	|	И втНедопоставки.ДокументОтгрузки.Дата МЕЖДУ &НачПериод И &КонПериод
	|   И ЕСТЬNULL(СвойстваДокументов.Значение, """") <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(СвойстваДокументов.Значение, втНедопоставки.ДокументОтгрузки.Номер),
	|	втНедопоставки.Номенклатура,
	|	втНедопоставки.ДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втНедопоставленныеЗаказы.ДокументОтгрузки, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	втНедопоставки.Номенклатура.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	втНедопоставки.ДокументОтгрузки";
	
КонецФункции // ПолучитьТекстЗапросаПоНедопоставкам()

Функция ПолучитьТекстЗапросаПоДолгам()
	
	Возврат "ВЫБРАТЬ
	        |	ОТУ.Ссылка КАК ДокументПродажи,
	        |	ОТУ.Ссылка.СтруктурнаяЕдиницаКонтрагента КАК СтруктурнаяЕдиница,
	        |	ОТУ.Ссылка.Контрагент КАК Контрагент,
	        |	ОТУ.Ссылка.Ответственный КАК Ответственный,
	        |	ИСТИНА КАК ЭтоШоколад
	        |ПОМЕСТИТЬ втВсеЗаявки
	        |ИЗ
	        |	Документ.ОтгрузкаТоваровУслуг.Товары КАК ОТУ
	        |ГДЕ
	        |	ОТУ.Ссылка.Дата МЕЖДУ &НачПериод И &КонПериод
	        |	И ОТУ.Ссылка.Проведен
	        |	И ОТУ.Ссылка.Склад В(&СписокСкладов)
	        |	И ОТУ.Номенклатура.ДистрибьюторскийКонтракт = &КонтрактМарсШоколад
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ОТУ.Ссылка,
	        |	ОТУ.Ссылка.СтруктурнаяЕдиницаКонтрагента,
	        |	ОТУ.Ссылка.Контрагент,
	        |	ОТУ.Ссылка.Ответственный
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ОТУ.Ссылка,
	        |	ОТУ.Ссылка.СтруктурнаяЕдиницаКонтрагента,
	        |	ОТУ.Ссылка.Контрагент,
	        |	ОТУ.Ссылка.Ответственный,
	        |	ЛОЖЬ
	        |ИЗ
	        |	Документ.ОтгрузкаТоваровУслуг.Товары КАК ОТУ
	        |ГДЕ
	        |	ОТУ.Ссылка.Дата МЕЖДУ &НачПериод И &КонПериод
	        |	И ОТУ.Ссылка.Проведен
	        |	И ОТУ.Ссылка.Склад В(&СписокСкладов)
	        |	И ОТУ.Номенклатура.ДистрибьюторскийКонтракт = &КонтрактМарсКорма
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ОТУ.Ссылка,
	        |	ОТУ.Ссылка.СтруктурнаяЕдиницаКонтрагента,
	        |	ОТУ.Ссылка.Контрагент,
	        |	ОТУ.Ссылка.Ответственный
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	втВсеЗаявки.ДокументПродажи КАК РасчетныйДокумент,
	        |	втВсеЗаявки.СтруктурнаяЕдиница,
	        |	втВсеЗаявки.Контрагент,
	        |	втВсеЗаявки.Ответственный,
	        |	СУММА(ТабЧасть.Сумма) КАК Сумма,
	        |	Взаиморасчеты.СуммаВзаиморасчетовОстаток,
	        |	втВсеЗаявки.ЭтоШоколад
	        |ПОМЕСТИТЬ втВзаиморасчеты
	        |ИЗ
	        |	втВсеЗаявки КАК втВсеЗаявки
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтгрузкаТоваровУслугТовары.СрезПоследних(, ) КАК ТабЧасть
	        |		ПО втВсеЗаявки.ДокументПродажи = ТабЧасть.ДокументОтгрузки
	        |			И (ТабЧасть.Количество > 0)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, ) КАК Взаиморасчеты
	        |		ПО втВсеЗаявки.Контрагент = Взаиморасчеты.Контрагент
	        |			И втВсеЗаявки.ДокументПродажи = Взаиморасчеты.РасчетныйДокумент
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	втВсеЗаявки.ДокументПродажи,
	        |	втВсеЗаявки.СтруктурнаяЕдиница,
	        |	втВсеЗаявки.Контрагент,
	        |	втВсеЗаявки.Ответственный,
	        |	втВсеЗаявки.ЭтоШоколад,
	        |	Взаиморасчеты.СуммаВзаиморасчетовОстаток
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВЫРАЗИТЬ(СУММА(Взаиморасчеты.СуммаВзаиморасчетовОстаток) КАК ЧИСЛО(15, 2)) КАК DEBT,
	        |	Взаиморасчеты.СтруктурнаяЕдиница КАК OL_CODE,
	        |	МАКСИМУМ(ПоследниеПлатежи.Период) КАК PAYDATE,
	        |	ИСТИНА КАК CANSALE,
	        |	ВЫРАЗИТЬ(СУММА(Взаиморасчеты.Сумма) / КОЛИЧЕСТВО(Взаиморасчеты.РасчетныйДокумент) КАК ЧИСЛО(15, 2)) КАК AVG_AMOUNT,
	        |	"""" КАК DETAILS1,
	        |	"""" КАК DETAILS2,
	        |	"""" КАК DETAILS3,
	        |	"""" КАК DETAILS4,
	        |	"""" КАК DETAILS5,
	        |	"""" КАК DETAILS6,
	        |	"""" КАК DETAILS7,
	        |	"""" КАК DETAILS8,
	        |	"""" КАК DETAILS9,
	        |	"""" КАК DETAILS10,
	        |	"""" КАК DETAILS11,
	        |	"""" КАК DETAILS12,
	        |	"""" КАК DETAILS13,
	        |	"""" КАК DETAILS14,
	        |	"""" КАК DETAILS15,
	        |	"""" КАК DETAILS16,
	        |	"""" КАК DETAILS17,
	        |	"""" КАК DETAILS18,
	        |	"""" КАК DETAILS19,
	        |	"""" КАК DETAILS20,
	        |	0 КАК MAXDEBT,
	        |	0 КАК MAXDELAY,
	        |	ВЫРАЗИТЬ(СУММА(ВЫБОР
	        |				КОГДА Взаиморасчеты.РасчетныйДокумент.ДатаОплаты < &ДатаОбмена
	        |					ТОГДА Взаиморасчеты.СуммаВзаиморасчетовОстаток
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) КАК ЧИСЛО(15, 2)) КАК D_OVERDUE,
	        |	0 КАК D_OV_DELAY,
	        |	0 КАК CURR_DELAY,
	        |	ВЫБОР
	        |		КОГДА Взаиморасчеты.СтруктурнаяЕдиница.ПометкаУдаления
	        |			ТОГДА 9
	        |		ИНАЧЕ 2
	        |	КОНЕЦ КАК STATUS,
	        |	&ДатаОбмена КАК DTLM,
	        |	&ИдентификаторДистрибьютора КАК CUST_ID,
	        |	Взаиморасчеты.Контрагент КАК PCOMP_CODE
	        |ИЗ
	        |	втВзаиморасчеты КАК Взаиморасчеты
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, , Регистратор, ) КАК ПоследниеПлатежи
	        |		ПО Взаиморасчеты.Контрагент = ПоследниеПлатежи.Контрагент
	        |			И Взаиморасчеты.РасчетныйДокумент = ПоследниеПлатежи.РасчетныйДокумент
	        |			И (ПоследниеПлатежи.СуммаВзаиморасчетовПриход > 0)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	Взаиморасчеты.Контрагент,
	        |	Взаиморасчеты.СтруктурнаяЕдиница,
	        |	Взаиморасчеты.СтруктурнаяЕдиница.Код,
	        |	Взаиморасчеты.Контрагент.Код,
	        |	ВЫБОР
	        |		КОГДА Взаиморасчеты.СтруктурнаяЕдиница.ПометкаУдаления
	        |			ТОГДА 9
	        |		ИНАЧЕ 2
	        |	КОНЕЦ
	        |
	        |ИМЕЮЩИЕ
	        |	СУММА(ЕСТЬNULL(Взаиморасчеты.СуммаВзаиморасчетовОстаток, 0)) > 0
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	Взаиморасчеты.СтруктурнаяЕдиница КАК OL_CODE,
	        |	Взаиморасчеты.РасчетныйДокумент.Номер КАК INVOICE_NO,
	        |	ВЫБОР
	        |		КОГДА Взаиморасчеты.РасчетныйДокумент.ДатаОплаты < &ДатаОбмена
	        |			ТОГДА ВЫБОР
	        |					КОГДА НЕ Взаиморасчеты.ЭтоШоколад
	        |						ТОГДА ""5""
	        |					ИНАЧЕ ""6""
	        |				КОНЕЦ
	        |		ИНАЧЕ ВЫБОР
	        |				КОГДА НЕ Взаиморасчеты.ЭтоШоколад
	        |					ТОГДА ""7""
	        |				ИНАЧЕ ""8""
	        |			КОНЕЦ
	        |	КОНЕЦ КАК DEBTYPCODE,
	        |	ЕСТЬNULL(НастройкиПользователей.Значение, """") КАК MERCH_ID,
	        |	""-"" КАК MERCH_CODE,
	        |	ВЫРАЗИТЬ(СУММА(Взаиморасчеты.СуммаВзаиморасчетовОстаток) КАК ЧИСЛО(15, 2)) КАК DEBT,
	        |	Взаиморасчеты.РасчетныйДокумент.ДатаОтгрузки КАК DATE,
	        //|	ВЫРАЗИТЬ(Взаиморасчеты.РасчетныйДокумент.Комментарий КАК СТРОКА(50)) КАК COMMENT,
			|	"""" КАК COMMENT,
	        |	0 КАК QTY,
	        |	ВЫРАЗИТЬ(СУММА(ВЫБОР
	        |				КОГДА Взаиморасчеты.РасчетныйДокумент.ДатаОплаты < &ДатаОбмена
	        |					ТОГДА Взаиморасчеты.СуммаВзаиморасчетовОстаток
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) КАК ЧИСЛО(15, 2)) КАК D_OVERDUE,
	        |	0 КАК D_OV_DELAY,
	        |	""-"" КАК DOCUMENT,
	        |	ВЫБОР
	        |		КОГДА Взаиморасчеты.СтруктурнаяЕдиница.ПометкаУдаления
	        |			ТОГДА 9
	        |		ИНАЧЕ 2
	        |	КОНЕЦ КАК STATUS,
	        |	&ДатаОбмена КАК DTLM,
	        |	&ИдентификаторДистрибьютора КАК CUST_ID
	        |ИЗ
	        |	втВзаиморасчеты КАК Взаиморасчеты
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	        |		ПО Взаиморасчеты.РасчетныйДокумент.Ответственный = НастройкиПользователей.Пользователь
	        |			И (НастройкиПользователей.Настройка = &СвойствоАгентаКод)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	Взаиморасчеты.РасчетныйДокумент,
	        |	Взаиморасчеты.Контрагент,
	        |	Взаиморасчеты.СтруктурнаяЕдиница,
	        |	ЕСТЬNULL(НастройкиПользователей.Значение, """"),
	        |	ВЫБОР
	        |		КОГДА Взаиморасчеты.РасчетныйДокумент.ДатаОплаты < &ДатаОбмена
	        |			ТОГДА ВЫБОР
	        |					КОГДА НЕ Взаиморасчеты.ЭтоШоколад
	        |						ТОГДА ""5""
	        |					ИНАЧЕ ""6""
	        |				КОНЕЦ
	        |		ИНАЧЕ ВЫБОР
	        |				КОГДА НЕ Взаиморасчеты.ЭтоШоколад
	        |					ТОГДА ""7""
	        |				ИНАЧЕ ""8""
	        |			КОНЕЦ
	        |	КОНЕЦ,
			//|   ВЫРАЗИТЬ(Взаиморасчеты.РасчетныйДокумент.Комментарий КАК СТРОКА(50)),
	        |	Взаиморасчеты.СтруктурнаяЕдиница.Код,
	        |	Взаиморасчеты.РасчетныйДокумент.Номер,
	        |	Взаиморасчеты.РасчетныйДокумент.ДатаОтгрузки,
	        |	Взаиморасчеты.РасчетныйДокумент.Комментарий,
	        |	Взаиморасчеты.Контрагент.Код,
	        |	ВЫБОР
	        |		КОГДА Взаиморасчеты.СтруктурнаяЕдиница.ПометкаУдаления
	        |			ТОГДА 9
	        |		ИНАЧЕ 2
	        |	КОНЕЦ
	        |
	        |ИМЕЮЩИЕ
	        |	СУММА(ЕСТЬNULL(Взаиморасчеты.СуммаВзаиморасчетовОстаток, 0)) > 0";
	
КонецФункции	

Функция ПолучитьТекстЗапросаПоПродажам()
	
	Возврат "ВЫБРАТЬ
	|	ЦеныНоменклатуры.Период,
	|	ЦеныНоменклатуры.ТипЦен,
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.ЕдиницаИзмерения,
	|	ЦеныНоменклатуры.Цена
	|ПОМЕСТИТЬ втЦеныЗакупа
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Номенклатура.ДистрибьюторскийКонтракт В(&СписокКонтрактов)
	|	И ЦеныНоменклатуры.ТипЦен = &БазовыйТипЦен
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ.Период,
	|	ВТ.ДокументСсылка КАК ДокументПродажи,
	|   ВЫБОР
	|   	КОГДА ТИПЗНАЧЕНИЯ(ВТ.ДокументСсылка) = ТИП(Документ.ПоступлениеТоваровУслуг)
	|   		ТОГДА 1
	|   	КОГДА ТИПЗНАЧЕНИЯ(ВТ.ДокументСсылка) = ТИП(Документ.ОтгрузкаТоваровУслуг)
	|   			И ВТ.ДокументСсылка.АкцияПродаж = ЗНАЧЕНИЕ(Справочник.АкцииПродаж.ПустаяСсылка)
	|   		ТОГДА 2
	|   	КОГДА ТИПЗНАЧЕНИЯ(ВТ.ДокументСсылка) = ТИП(Документ.ВозвратТоваровОтПокупателя)
	|   		ИЛИ ТИПЗНАЧЕНИЯ(ВТ.ДокументСсылка) = ТИП(Документ.ВозвратТоваровПоставщику)
	|   		ТОГДА 4
	|   	КОГДА ТИПЗНАЧЕНИЯ(ВТ.ДокументСсылка) = ТИП(Документ.СписаниеТоваров)
	|   		ТОГДА 5
	|   	КОГДА ТИПЗНАЧЕНИЯ(ВТ.ДокументСсылка) = ТИП(Документ.ОприходованиеТоваров)
	|   		ТОГДА 6
	|   	КОГДА ТИПЗНАЧЕНИЯ(ВТ.ДокументСсылка) = ТИП(Документ.ОтгрузкаТоваровУслуг)
	|   			И НЕ ВТ.ДокументСсылка.АкцияПродаж = ЗНАЧЕНИЕ(Справочник.АкцииПродаж.ПустаяСсылка)
	|   		ТОГДА 9
	|   	КОГДА ТИПЗНАЧЕНИЯ(ВТ.ДокументСсылка) = ТИП(Документ.ПеремещениеТоваров)
	|   		ТОГДА 8	
	|   	ИНАЧЕ 0
	|   КОНЕЦ КАК ТипДокумента
	|ПОМЕСТИТЬ ВТ_ВсеДокументыПоПокупателям
	|ИЗ
	|	втФинальнаяТаблицаДанных КАК ВТ
	|ГДЕ
	|	НЕ ВТ.Закупки
	
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(втФинальнаяТаблицаДанных.Период),
	|	втФинальнаяТаблицаДанных.ДокументПродажи КАК ДокументОснование,
	|	втФинальнаяТаблицаДанных.ТипДокумента,
	|	втФинальнаяТаблицаДанных.ДокументПродажи.Склад КАК Склад
	|ПОМЕСТИТЬ втДокументыБезНоменклатуры
	|ИЗ
	|	ВТ_ВсеДокументыПоПокупателям КАК втФинальнаяТаблицаДанных
	
	|СГРУППИРОВАТЬ ПО
	|	втФинальнаяТаблицаДанных.ДокументПродажи,
	|	втФинальнаяТаблицаДанных.ТипДокумента,
	|	втФинальнаяТаблицаДанных.ДокументПродажи.Склад
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникДанных.ДокументОснование,
	|	&ТекГодСтрокой + ""_"" + ИсточникДанных.ДокументОснование.Номер КАК INVOICE_NO,
	|	ВЫБОР
	|		КОГДА ИсточникДанных.ТипДокумента В (5,6,8)
	|			ТОГДА ""0""
	|		ИНАЧЕ ИсточникДанных.ДокументОснование.СтруктурнаяЕдиницаКонтрагента
	|	КОНЕЦ КАК OL_CODE,
	|	ЕСТЬNULL(НастройкиПользователей.Значение, """") КАК MERCH_ID,
	|	""-"" КАК MERCH_CODE,
	|	ИсточникДанных.Период КАК DATE,
	|	ЕСТЬNULL(СвойстваЗаказов.Значение, """") КАК ORDER_NO,
	|	ЕСТЬNULL(ИсточникДанных.ДокументОснование.ДатаОтгрузки, ИсточникДанных.Период) КАК DATETO,
	|	1 КАК PARAM1,
	|	ЛОЖЬ КАК PRINTORDER,
	|	ИСТИНА КАК PRINTCHECK,
	|	ЛОЖЬ КАК PRNCHKONLY,
	|	ИсточникДанных.ТипДокумента КАК DOC_TYPE,
	|	ИсточникДанных.Склад.Код КАК WAREH_CODE,
	//|	ВЫБОР
	//|		КОГДА ИсточникДанных.ДокументОснование.ТипЦен.ЦенаВключаетНДС
	//|			ТОГДА 1
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК VATCALCMOD,
	|   1 КАК VATCALCMOD, 
	|	2 КАК STATUS,
	|	&ДатаОбмена КАК DTLM,
	|	ИсточникДанных.ДокументОснование.Номер КАК CINVOIC_NO,
	|	ВЫБОР
	|		КОГДА ИсточникДанных.ТипДокумента В (5,6,8)
	|			ТОГДА ""EMPTYOUTLET""
	|		ИНАЧЕ ИсточникДанных.ДокументОснование.СтруктурнаяЕдиницаКонтрагента
	|	КОНЕЦ КАК LOC_CODE,
	|	ВЫБОР
	|		КОГДА ИсточникДанных.ТипДокумента В (5,6,8)
	|			ТОГДА ""EMPTYOUTLET""
	|		ИНАЧЕ ИсточникДанных.ДокументОснование.Контрагент
	|	КОНЕЦ КАК PCOMP_CODE,
	|	&ИдентификаторДистрибьютора КАК CUST_ID
	|ИЗ
	|	втДокументыБезНоменклатуры КАК ИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|		ПО ИсточникДанных.ДокументОснование.Ответственный = НастройкиПользователей.Пользователь
	|			И (НастройкиПользователей.Настройка = &НастройкаАгентов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваЗаказов
	|		ПО ИсточникДанных.ДокументОснование = СвойстваЗаказов.Объект
	|			И (СвойстваЗаказов.Свойство = &СвойствоЗаказа)
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Период,
	|	ИсточникДанных.ДокументОснование,
	|	ИсточникДанных.ТипДокумента,
	|	&ТекГодСтрокой + ""_"" + ИсточникДанных.ДокументОснование.Номер,
	|	ИсточникДанных.Склад,
	|	ЕСТЬNULL(СвойстваЗаказов.Значение, """"),
	|	ВЫБОР
	|		КОГДА ИсточникДанных.ТипДокумента В (5,6,8)
	|			ТОГДА ""0""
	|		ИНАЧЕ ИсточникДанных.ДокументОснование.СтруктурнаяЕдиницаКонтрагента
	|	КОНЕЦ,
	|	ЕСТЬNULL(ИсточникДанных.ДокументОснование.ДатаОтгрузки, ИсточникДанных.Период),
	|	ВЫБОР
	|		КОГДА ИсточникДанных.ДокументОснование.ТипЦен.ЦенаВключаетНДС
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсточникДанных.ТипДокумента В (5,6,8)
	|			ТОГДА ""EMPTYOUTLET""
	|		ИНАЧЕ ИсточникДанных.ДокументОснование.СтруктурнаяЕдиницаКонтрагента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсточникДанных.ТипДокумента В (5,6,8)
	|			ТОГДА ""EMPTYOUTLET""
	|		ИНАЧЕ ИсточникДанных.ДокументОснование.Контрагент
	|	КОНЕЦ,
	|	ИсточникДанных.Склад.Код,
	|	ИсточникДанных.ДокументОснование.Номер,
	|	ЕСТЬNULL(НастройкиПользователей.Значение, """")
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФинальнаяТаблицаДанных.ДокументСсылка КАК ДокументОснование,
	|	втФинальнаяТаблицаДанных.Номенклатура.Код КАК LOCALCODE,
	|	""0"" КАК LOT_ID,
	|	втФинальнаяТаблицаДанных.Цена КАК PRICE,
	|	ЕСТЬNULL(СвойстваЗаказов.Значение, """") КАК ORDER_NO,
	|	втФинальнаяТаблицаДанных.Количество КАК QTY,
	|	ВЫРАЗИТЬ(ВТ_СтавкиНДС.ПредставлениеСтавкиНДС КАК ЧИСЛО(5, 2)) КАК VAT,
	|	ВЫРАЗИТЬ(МАКСИМУМ(100 * ЕСТЬNULL(ЦеныЗакупа.Цена, 0) / (100 + ВТ_СтавкиНДС.ПредставлениеСтавкиНДС)) КАК ЧИСЛО(15, 8)) КАК ACCPRICE,
	|	2 КАК STATUS,
	|	&ДатаОбмена КАК DTLM,
	|	&ИдентификаторДистрибьютора КАК CUST_ID
	|ПОМЕСТИТЬ втТабЧастьФинал
	|ИЗ
	|	втФинальнаяТаблицаДанных КАК втФинальнаяТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойстваЗаказов
	|		ПО втФинальнаяТаблицаДанных.ДокументСсылка = СвойстваЗаказов.Объект
	|			И (СвойстваЗаказов.Свойство = &СвойствоЗаказа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныЗакупа КАК ЦеныЗакупа
	|		ПО втФинальнаяТаблицаДанных.Номенклатура = ЦеныЗакупа.Номенклатура
	|			И втФинальнаяТаблицаДанных.Номенклатура.ЕдиницаХраненияОстатков = ЦеныЗакупа.ЕдиницаИзмерения
	|			И (ЦеныЗакупа.ТипЦен = &БазовыйТипЦен)
	|			И (ЦеныЗакупа.Период <= втФинальнаяТаблицаДанных.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
	|		ПО втФинальнаяТаблицаДанных.Номенклатура.СтавкаНДС = ВТ_СтавкиНДС.СтавкаНДС
	|ГДЕ
	|	НЕ втФинальнаяТаблицаДанных.Закупки
	
	|СГРУППИРОВАТЬ ПО
	|	втФинальнаяТаблицаДанных.ДокументСсылка,
	|	втФинальнаяТаблицаДанных.Номенклатура,
	|	ЕСТЬNULL(СвойстваЗаказов.Значение, """"),
	|	втФинальнаяТаблицаДанных.Количество,
	|	втФинальнаяТаблицаДанных.Цена,
	|	ВТ_СтавкиНДС.ПредставлениеСтавкиНДС,
	|	втФинальнаяТаблицаДанных.Номенклатура.Код
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТабЧастьФинал.ДокументОснование,
	|	втТабЧастьФинал.LOCALCODE,
	|	втТабЧастьФинал.LOT_ID,
	|	втТабЧастьФинал.PRICE,
	|	втТабЧастьФинал.ORDER_NO,
	|	СУММА(втТабЧастьФинал.QTY) КАК QTY,
	|	втТабЧастьФинал.VAT,
	|	втТабЧастьФинал.ACCPRICE,
	|	втТабЧастьФинал.STATUS,
	|	втТабЧастьФинал.DTLM,
	|	втТабЧастьФинал.CUST_ID
	|ИЗ
	|	втТабЧастьФинал КАК втТабЧастьФинал
	|	
	|СГРУППИРОВАТЬ ПО
	|	втТабЧастьФинал.ДокументОснование,
	|	втТабЧастьФинал.LOCALCODE,
	|	втТабЧастьФинал.LOT_ID,
	|	втТабЧастьФинал.PRICE,
	|	втТабЧастьФинал.ORDER_NO,
	|	втТабЧастьФинал.VAT,
	|	втТабЧастьФинал.ACCPRICE,
	|	втТабЧастьФинал.STATUS,
	|	втТабЧастьФинал.DTLM,
	|	втТабЧастьФинал.CUST_ID
	|ИМЕЮЩИЕ 
	|	НЕ СУММА(втТабЧастьФинал.QTY) = 0			
	|УПОРЯДОЧИТЬ ПО
	|	втТабЧастьФинал.ДокументОснование,
	|	втТабЧастьФинал.LOCALCODE";
	
КонецФункции // ПолучитьТекстЗапросаПоПродажам()

Функция ПолучитьТекстЗапросаПоЗакупкам()
	
	Возврат "ВЫБРАТЬ
	        |	ВЫБОР
	        |		КОГДА СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	        |				ИЛИ СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	        |			ТОГДА 10
	        |		КОГДА СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	        |				ИЛИ СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	        |			ТОГДА 18
	        |		ИНАЧЕ 0
	        |	КОНЕЦ КАК ПредставлениеСтавкиНДС,
	        |	СтавкиНДС.Ссылка КАК СтавкаНДС
	        |ПОМЕСТИТЬ ВТ_СтавкиНДС
	        |ИЗ
	        |	Перечисление.СтавкиНДС КАК СтавкиНДС
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ЦеныНоменклатуры.Период,
	        |	ЦеныНоменклатуры.ТипЦен,
	        |	ЦеныНоменклатуры.Номенклатура,
	        |	ЦеныНоменклатуры.ЕдиницаИзмерения,
	        |	ЦеныНоменклатуры.Цена
	        |ПОМЕСТИТЬ втЦеныЗакупа
	        |ИЗ
	        |	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	        |ГДЕ
	        |	ЦеныНоменклатуры.Номенклатура.ДистрибьюторскийКонтракт В(&СписокКонтрактов)
	        |	И ЦеныНоменклатуры.ТипЦен = &БазовыйТипЦен
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ЗапасыНаСкладахОбороты.Период,
	        |	ЗапасыНаСкладахОбороты.Регистратор,
	        |	4 КАК ТипДокумента,
	        |	ЗапасыНаСкладахОбороты.Склад,
	        |	ЗапасыНаСкладахОбороты.Номенклатура,
	        |	СУММА(ЗапасыНаСкладахОбороты.КоличествоОборот) КАК КоличествоОборот
	        |ПОМЕСТИТЬ втДвиженияПоЗапасам
	        |ИЗ
	        |	РегистрНакопления.ЗапасыНаСкладах.Обороты(
	        |			&НачПериод,
	        |			&КонПериод,
	        |			Запись,
	        |			Склад В (&СписокСкладов)
	        |				И Номенклатура.ДистрибьюторскийКонтракт В (&СписокКонтрактов)) КАК ЗапасыНаСкладахОбороты
	        |ГДЕ
	        |	ТИПЗНАЧЕНИЯ(ЗапасыНаСкладахОбороты.Регистратор) = ТИП(Документ.РасходныйСкладскойОрдер)
	        |	И ЗапасыНаСкладахОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходныйСкладскойОрдер.ВозвратПоставщику)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ЗапасыНаСкладахОбороты.Период,
	        |	ЗапасыНаСкладахОбороты.Регистратор,
	        |	ЗапасыНаСкладахОбороты.Склад,
	        |	ЗапасыНаСкладахОбороты.Номенклатура
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ЗапасыНаСкладахОбороты.Период,
	        |	ЗапасыНаСкладахОбороты.Регистратор,
	        |	1,
	        |	ЗапасыНаСкладахОбороты.Склад,
	        |	ЗапасыНаСкладахОбороты.Номенклатура,
	        |	СУММА(ЗапасыНаСкладахОбороты.КоличествоОборот)
	        |ИЗ
	        |	РегистрНакопления.ЗапасыНаСкладах.Обороты(
	        |			&НачПериод,
	        |			&КонПериод,
	        |			Запись,
	        |			Склад В (&СписокСкладов)
	        |				И Номенклатура.ДистрибьюторскийКонтракт В (&СписокКонтрактов)) КАК ЗапасыНаСкладахОбороты
	        |ГДЕ
	        |	ТИПЗНАЧЕНИЯ(ЗапасыНаСкладахОбороты.Регистратор) = ТИП(Документ.ПриходныйСкладскойОрдер)
	        |	И ЗапасыНаСкладахОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходныйСкладскойОрдер.ПриходОтПоставщика)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ЗапасыНаСкладахОбороты.Период,
	        |	ЗапасыНаСкладахОбороты.Регистратор,
	        |	ЗапасыНаСкладахОбороты.Склад,
	        |	ЗапасыНаСкладахОбороты.Номенклатура
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	НАЧАЛОПЕРИОДА(втДвиженияПоЗапасам.Период, ДЕНЬ) КАК Период,
	        |	ВЫБОР
	        |		КОГДА ТИПЗНАЧЕНИЯ(втДвиженияПоЗапасам.Регистратор) = ТИП(Документ.РасходныйСкладскойОрдер)
	        |			ТОГДА втДвиженияПоЗапасам.Регистратор.ДокументОснование
	        |		КОГДА ТИПЗНАЧЕНИЯ(втДвиженияПоЗапасам.Регистратор) = ТИП(Документ.ПриходныйСкладскойОрдер)
	        |			ТОГДА ПТУ.Ссылка
	        |		ИНАЧЕ втДвиженияПоЗапасам.Регистратор
	        |	КОНЕЦ КАК ДокументОснование,
	        |	втДвиженияПоЗапасам.ТипДокумента,
	        |	втДвиженияПоЗапасам.Склад,
	        |	втДвиженияПоЗапасам.Номенклатура КАК Номенклатура,
	        |	втДвиженияПоЗапасам.КоличествоОборот КАК Количество
	        |ПОМЕСТИТЬ втФинальнаяТаблицаДанных
	        |ИЗ
	        |	втДвиженияПоЗапасам КАК втДвиженияПоЗапасам
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПТУ
	        |		ПО втДвиженияПоЗапасам.Регистратор = ПТУ.ПриходныйОрдер
	        |			И втДвиженияПоЗапасам.Номенклатура = ПТУ.Номенклатура
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	втДвиженияПоЗапасам.Период,
	        |	ВЫБОР
	        |		КОГДА ТИПЗНАЧЕНИЯ(втДвиженияПоЗапасам.Регистратор) = ТИП(Документ.РасходныйСкладскойОрдер)
	        |			ТОГДА втДвиженияПоЗапасам.Регистратор.ДокументОснование
	        |		КОГДА ТИПЗНАЧЕНИЯ(втДвиженияПоЗапасам.Регистратор) = ТИП(Документ.ПриходныйСкладскойОрдер)
	        |			ТОГДА ПТУ.Ссылка
	        |		ИНАЧЕ втДвиженияПоЗапасам.Регистратор
	        |	КОНЕЦ,
	        |	втДвиженияПоЗапасам.ТипДокумента,
	        |	втДвиженияПоЗапасам.Склад,
	        |	втДвиженияПоЗапасам.Номенклатура,
	        |	втДвиженияПоЗапасам.КоличествоОборот
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	втФинальнаяТаблицаДанных.Период,
	        |	втФинальнаяТаблицаДанных.ДокументОснование,
	        |	втФинальнаяТаблицаДанных.ТипДокумента,
	        |	втФинальнаяТаблицаДанных.Склад
	        |ПОМЕСТИТЬ втДокументыБезНоменклатуры
	        |ИЗ
	        |	втФинальнаяТаблицаДанных КАК втФинальнаяТаблицаДанных
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	втФинальнаяТаблицаДанных.Период,
	        |	втФинальнаяТаблицаДанных.ДокументОснование,
	        |	втФинальнаяТаблицаДанных.ТипДокумента,
	        |	втФинальнаяТаблицаДанных.Склад
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	втДокументыБезНоменклатуры.ДокументОснование,
	        |	&ТекГодСтрокой + ""_"" + втДокументыБезНоменклатуры.ДокументОснование.Номер КАК INVOICE_NO,
	        |	втДокументыБезНоменклатуры.Период КАК DATE,
	        |	втДокументыБезНоменклатуры.Склад.Код КАК WAREH_CODE,
	        |	втДокументыБезНоменклатуры.ТипДокумента КАК DOC_TYPE,
	        |	втДокументыБезНоменклатуры.ДокументОснование.Номер КАК CUSTDOC_NO,
	        |	ВЫБОР
	        |		КОГДА втДокументыБезНоменклатуры.ДокументОснование.ТипЦен.ЦенаВключаетНДС
	        |			ТОГДА 1
	        |		ИНАЧЕ 0
	        |	КОНЕЦ КАК VATCALCMOD,
	        |	2 КАК STATUS,
	        |	&ДатаОбмена КАК DTLM,
	        |	&ИдентификаторДистрибьютора КАК CUST_ID
	        |ИЗ
	        |	втДокументыБезНоменклатуры КАК втДокументыБезНоменклатуры
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	втДокументыБезНоменклатуры.ДокументОснование,
	        |	&ТекГодСтрокой + ""_"" + втДокументыБезНоменклатуры.ДокументОснование.Номер,
	        |	втДокументыБезНоменклатуры.ТипДокумента,
	        |	втДокументыБезНоменклатуры.Период,
	        |	втДокументыБезНоменклатуры.Склад.Код,
	        |	втДокументыБезНоменклатуры.ДокументОснование.Номер,
	        |	ВЫБОР
	        |		КОГДА втДокументыБезНоменклатуры.ДокументОснование.ТипЦен.ЦенаВключаетНДС
	        |			ТОГДА 1
	        |		ИНАЧЕ 0
	        |	КОНЕЦ
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	втФинальнаяТаблицаДанных.ДокументОснование,
	        |	втФинальнаяТаблицаДанных.Номенклатура.Код КАК LOCALCODE,
	        |	""0"" КАК LOT_ID,
	        |	ВЫРАЗИТЬ(МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)) КАК ЧИСЛО(15, 8)) КАК PRICE,
	        |	ВЫРАЗИТЬ(втФинальнаяТаблицаДанных.Количество КАК ЧИСЛО(14, 3)) КАК QTY,
	        |	ВЫРАЗИТЬ(ВТ_СтавкиНДС.ПредставлениеСтавкиНДС КАК ЧИСЛО(5, 2)) КАК VAT,
	        |	2 КАК STATUS,
	        |	&ДатаОбмена КАК DTLM,
	        |	&ИдентификаторДистрибьютора КАК CUST_ID
	        |ИЗ
	        |	втФинальнаяТаблицаДанных КАК втФинальнаяТаблицаДанных
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
	        |		ПО втФинальнаяТаблицаДанных.Номенклатура.СтавкаНДС = ВТ_СтавкиНДС.СтавкаНДС
	        |		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныЗакупа КАК ЦеныНоменклатуры
	        |		ПО втФинальнаяТаблицаДанных.Номенклатура = ЦеныНоменклатуры.Номенклатура
	        |			И втФинальнаяТаблицаДанных.Номенклатура.ЕдиницаХраненияОстатков = ЦеныНоменклатуры.ЕдиницаИзмерения
	        |			И (ЦеныНоменклатуры.ТипЦен = &БазовыйТипЦен)
	        |			И (ЦеныНоменклатуры.Период <= втФинальнаяТаблицаДанных.Период)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	втФинальнаяТаблицаДанных.ДокументОснование,
	        |	втФинальнаяТаблицаДанных.Номенклатура,
	        |	ВЫРАЗИТЬ(втФинальнаяТаблицаДанных.Количество КАК ЧИСЛО(14, 3)),
	        |	ВТ_СтавкиНДС.ПредставлениеСтавкиНДС,
	        |	втФинальнаяТаблицаДанных.Номенклатура.Код";
	
КонецФункции // ПолучитьТекстЗапросаПоЗакупкам()

//{[+](фрагмент добавлен), Боровик Артем Олегович 17.03.2017 16:21:01

Функция ПолучитьТекстОбщегоЗапроса()
	Возврат "ВЫБРАТЬ
	        |	ВЫБОР
	        |		КОГДА СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	        |				ИЛИ СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	        |			ТОГДА 10
	        |		КОГДА СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	        |				ИЛИ СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	        |			ТОГДА 18
	        |		ИНАЧЕ 0
	        |	КОНЕЦ КАК ПредставлениеСтавкиНДС,
	        |	СтавкиНДС.Ссылка КАК СтавкаНДС
	        |ПОМЕСТИТЬ ВТ_СтавкиНДС
	        |ИЗ
	        |	Перечисление.СтавкиНДС КАК СтавкиНДС
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ЗапасыНаСкладах.Период КАК Период,
	        |	ЗапасыНаСкладах.Регистратор КАК Регистратор,
	        |	ЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	        |	СУММА(ЗапасыНаСкладах.КоличествоОборот) КАК Количество
	        |ПОМЕСТИТЬ ВТ_ДвиженияЗапасов
	        |ИЗ
	        |	РегистрНакопления.ЗапасыНаСкладах.Обороты(
	        |			&НачалоПериода,
	        |			&КонецПериода,
	        |			Запись,
	        |			Номенклатура.ДистрибьюторскийКонтракт В (&СписокКонтрактов)
	        |				И Склад В (&СписокСкладов)) КАК ЗапасыНаСкладах
	        |ГДЕ
	        |	НЕ ЗапасыНаСкладах.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
	        |	И НЕ ЗапасыНаСкладах.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистровНакопления
	        |	И НЕ ЗапасыНаСкладах.Регистратор ССЫЛКА Документ.КорректировкаКачестваЗапасов
			|   И НЕ ЗапасыНаСкладах.Регистратор ССЫЛКА Документ.КорректировкаСкладскихЗапасов 
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ЗапасыНаСкладах.Период,
	        |	ЗапасыНаСкладах.Регистратор,
	        |	ЗапасыНаСкладах.Номенклатура
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	Регистратор,
	        |	Номенклатура
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ.Регистратор КАК Регистратор,
	        |	ВЫБОР
	        |		КОГДА ВТ.Регистратор ССЫЛКА Документ.ОтгрузкаТоваровУслуг
	        |				ИЛИ ВТ.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	        |				ИЛИ ВТ.Регистратор ССЫЛКА Документ.ОприходованиеТоваров
	        |				ИЛИ ВТ.Регистратор ССЫЛКА Документ.СписаниеТоваров
	        |				ИЛИ ВТ.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	        |			ТОГДА ВТ.Регистратор
	        |		КОГДА ВТ.Регистратор ССЫЛКА Документ.ИнвентаризацияДоставки
	        |			ТОГДА ВТ.Регистратор.ДокументОтгрузки
	        |		КОГДА ВТ.Регистратор ССЫЛКА Документ.РасходныйСкладскойОрдер
	        |			ТОГДА ВТ.Регистратор.ДокументОснование
	        |		КОГДА ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	        |				И ЕСТЬNULL(ВТ.Регистратор.ДокументОснование.Номер, ""0"") <> ""0""
	        |			ТОГДА ВТ.Регистратор.ДокументОснование
	        |		КОГДА ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	        |				И ПТУПоПСО.ПТУ ЕСТЬ НЕ NULL 
	        |			ТОГДА ПТУПоПСО.ПТУ
	        |		КОГДА ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	        |				И ВозвратыПоПСО.Возврат ЕСТЬ НЕ NULL 
	        |			ТОГДА ВозвратыПоПСО.Возврат
	        |		ИНАЧЕ ВТ.Регистратор
	        |	КОНЕЦ КАК ЗаказПокупателя,
	        |	МИНИМУМ(ВТ.Период) КАК Период
	        |ПОМЕСТИТЬ ВТ_СоответствияРегистраторовЗаказам
	        |ИЗ
	        |	ВТ_ДвиженияЗапасов КАК ВТ
	        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	        |			Товары.ПриходныйОрдер КАК ПриходныйОрдер,
	        |			МАКСИМУМ(Товары.Ссылка) КАК ПТУ
	        |		ИЗ
	        |			Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	        |		
	        |		СГРУППИРОВАТЬ ПО
	        |			Товары.ПриходныйОрдер) КАК ПТУПоПСО
	        |		ПО (ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер)
	        |			И ВТ.Регистратор = ПТУПоПСО.ПриходныйОрдер
	        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	        |			Товары.ПриходныйОрдер КАК ПриходныйОрдер,
	        |			МАКСИМУМ(Товары.Ссылка) КАК Возврат
	        |		ИЗ
	        |			Документ.ВозвратТоваровОтПокупателя.Товары КАК Товары
	        |		
	        |		СГРУППИРОВАТЬ ПО
	        |			Товары.ПриходныйОрдер) КАК ВозвратыПоПСО
	        |		ПО (ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер)
	        |			И ВТ.Регистратор = ВозвратыПоПСО.ПриходныйОрдер
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТ.Регистратор,
	        |	ВЫБОР
	        |		КОГДА ВТ.Регистратор ССЫЛКА Документ.ОтгрузкаТоваровУслуг
	        |				ИЛИ ВТ.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	        |				ИЛИ ВТ.Регистратор ССЫЛКА Документ.ОприходованиеТоваров
	        |				ИЛИ ВТ.Регистратор ССЫЛКА Документ.СписаниеТоваров
	        |				ИЛИ ВТ.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	        |			ТОГДА ВТ.Регистратор
	        |		КОГДА ВТ.Регистратор ССЫЛКА Документ.ИнвентаризацияДоставки
	        |			ТОГДА ВТ.Регистратор.ДокументОтгрузки
	        |		КОГДА ВТ.Регистратор ССЫЛКА Документ.РасходныйСкладскойОрдер
	        |			ТОГДА ВТ.Регистратор.ДокументОснование
	        |		КОГДА ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	        |				И ЕСТЬNULL(ВТ.Регистратор.ДокументОснование.Номер, ""0"") <> ""0""
	        |			ТОГДА ВТ.Регистратор.ДокументОснование
	        |		КОГДА ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	        |				И ПТУПоПСО.ПТУ ЕСТЬ НЕ NULL 
	        |			ТОГДА ПТУПоПСО.ПТУ
	        |		КОГДА ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	        |				И ВозвратыПоПСО.Возврат ЕСТЬ НЕ NULL 
	        |			ТОГДА ВозвратыПоПСО.Возврат
	        |		ИНАЧЕ ВТ.Регистратор
	        |	КОНЕЦ
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	Регистратор,
	        |	ЗаказПокупателя
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	Документы.ЗаказПокупателя КАК ДокументСсылка,
	        |	Документы.ЗаказПокупателя.Контрагент КАК Контрагент,
	        |	Документы.ЗаказПокупателя.СтруктурнаяЕдиницаКонтрагента КАК СтруктурнаяЕдиницаКонтрагента,
	        |	Документы.ЗаказПокупателя.Ответственный КАК ТорговыйПредставитель,
	        |	Движ.Номенклатура КАК Номенклатура,
	        |	-Движ.Количество КАК Количество,
	        |	ВЫБОР
	        |		КОГДА ЕСТЬNULL(ТЧ.Цена, 0) = 0
	        |			ТОГДА 0
	        |		ИНАЧЕ ТЧ.Цена
	        |	КОНЕЦ КАК Цена,
	        |	ЕСТЬNULL(ТЧ.СтавкаНДС, &СтавкаБезНДС) КАК СтавкаНДС,
	        |	Движ.Период КАК Период,
	        |	ВЫБОР
	        |		КОГДА Документы.ЗаказПокупателя ССЫЛКА Документ.ПоступлениеТоваровУслуг
	        |				ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.ВозвратТоваровПоставщику
	        |			ТОГДА ИСТИНА
	        |		ИНАЧЕ ЛОЖЬ
	        |	КОНЕЦ КАК Закупки
	        |ПОМЕСТИТЬ втФинальнаяТаблицаДанных
	        |ИЗ
	        |	ВТ_ДвиженияЗапасов КАК Движ
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствияРегистраторовЗаказам КАК Документы
	        |		ПО (Документы.Регистратор = Движ.Регистратор)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	        |			ТабЧасть.Ссылка КАК Ссылка,
	        |			ТабЧасть.Номенклатура КАК Номенклатура,
	        |			СУММА(ТабЧасть.Количество * ТабЧасть.Коэффициент) КАК Количество,
	        |			ВЫРАЗИТЬ(ВЫБОР
	        |					КОГДА ТабЧасть.Ссылка.СуммаВключаетНДС
	        |						ТОГДА СУММА(ТабЧасть.Сумма)
	        |					ИНАЧЕ СУММА(ТабЧасть.Сумма + ТабЧасть.СуммаНДС)
	        |				КОНЕЦ / СУММА(ТабЧасть.Количество * ТабЧасть.Коэффициент) КАК ЧИСЛО(15, 2)) КАК Цена,
	        |			МАКСИМУМ(ТабЧасть.СтавкаНДС) КАК СтавкаНДС
	        |		ИЗ
	        |			Документ.ОтгрузкаТоваровУслуг.Товары КАК ТабЧасть
	        |		ГДЕ
	        |			ТабЧасть.Ссылка.Проведен
	        |		
	        |		СГРУППИРОВАТЬ ПО
	        |			ТабЧасть.Ссылка,
	        |			ТабЧасть.Номенклатура,
	        |			ТабЧасть.Ссылка.СуммаВключаетНДС
	        |		
	        |		ОБЪЕДИНИТЬ ВСЕ
	        |		
	        |		ВЫБРАТЬ
	        |			ТабЧасть.Ссылка,
	        |			ТабЧасть.Номенклатура,
	        |			СУММА(ТабЧасть.Количество * ТабЧасть.Коэффициент),
	        |			ВЫРАЗИТЬ(ВЫБОР
	        |					КОГДА ТабЧасть.Ссылка.СуммаВключаетНДС
	        |						ТОГДА СУММА(ТабЧасть.Сумма)
	        |					ИНАЧЕ СУММА(ТабЧасть.Сумма + ТабЧасть.СуммаНДС)
	        |				КОНЕЦ / СУММА(ТабЧасть.Количество * ТабЧасть.Коэффициент) КАК ЧИСЛО(15, 2)),
	        |			МАКСИМУМ(ТабЧасть.СтавкаНДС)
	        |		ИЗ
	        |			Документ.ВозвратТоваровОтПокупателя.Товары КАК ТабЧасть
	        |		ГДЕ
	        |			ТабЧасть.Ссылка.Проведен
	        |		
	        |		СГРУППИРОВАТЬ ПО
	        |			ТабЧасть.Ссылка,
	        |			ТабЧасть.Номенклатура,
	        |			ТабЧасть.Ссылка.СуммаВключаетНДС
	        |		
	        |		ОБЪЕДИНИТЬ ВСЕ
	        |		
	        |		ВЫБРАТЬ
	        |			ТабЧасть.Ссылка,
	        |			ТабЧасть.Номенклатура,
	        |			СУММА(ТабЧасть.Количество * ТабЧасть.Коэффициент),
	        |			МАКСИМУМ(ТабЧасть.Цена / ТабЧасть.Коэффициент),
	        |			МАКСИМУМ(ТабЧасть.СтавкаНДС)
	        |		ИЗ
	        |			Документ.ПоступлениеТоваровУслуг.Товары КАК ТабЧасть
	        |		
	        |		СГРУППИРОВАТЬ ПО
	        |			ТабЧасть.Ссылка,
	        |			ТабЧасть.Номенклатура
	        |		
	        |		ОБЪЕДИНИТЬ ВСЕ
	        |		
	        |		ВЫБРАТЬ
	        |			ТабЧасть.Ссылка,
	        |			ТабЧасть.Номенклатура,
	        |			СУММА(ТабЧасть.Количество * ТабЧасть.Коэффициент),
	        |			МАКСИМУМ(ТабЧасть.Цена / ТабЧасть.Коэффициент),
	        |			МАКСИМУМ(ТабЧасть.СтавкаНДС)
	        |		ИЗ
	        |			Документ.ВозвратТоваровПоставщику.Товары КАК ТабЧасть
	        |		
	        |		СГРУППИРОВАТЬ ПО
	        |			ТабЧасть.Ссылка,
	        |			ТабЧасть.Номенклатура
	        |		
	        |		ОБЪЕДИНИТЬ ВСЕ
	        |		
	        |		ВЫБРАТЬ
	        |			ТабЧасть.Ссылка,
	        |			ТабЧасть.Номенклатура,
	        |			СУММА(ТабЧасть.Количество * ТабЧасть.Коэффициент),
	        |			МАКСИМУМ(ТабЧасть.Цена / ТабЧасть.Коэффициент),
	        |			МАКСИМУМ(ТабЧасть.Номенклатура.СтавкаНДС)
	        |		ИЗ
	        |			Документ.ОприходованиеТоваров.Товары КАК ТабЧасть
	        |		
	        |		СГРУППИРОВАТЬ ПО
	        |			ТабЧасть.Ссылка,
	        |			ТабЧасть.Номенклатура
	        |		
	        |		ОБЪЕДИНИТЬ ВСЕ
	        |		
	        |		ВЫБРАТЬ
	        |			ТабЧасть.Регистратор,
	        |			ТабЧасть.Номенклатура,
	        |			СУММА(ТабЧасть.КоличествоОборот),
	        |			ВЫРАЗИТЬ(СУММА(ТабЧасть.СтоимостьОборот) / СУММА(ТабЧасть.КоличествоОборот) КАК ЧИСЛО(15, 2)),
	        |			МАКСИМУМ(ТабЧасть.Номенклатура.СтавкаНДС)
	        |		ИЗ
	        |			РегистрНакопления.ПартииЗапасов.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ) КАК ТабЧасть
	        |		ГДЕ
	        |			ТИПЗНАЧЕНИЯ(ТабЧасть.Регистратор) = ТИП(Документ.СписаниеТоваров)
	        |		
	        |		СГРУППИРОВАТЬ ПО
	        |			ТабЧасть.Регистратор,
	        |			ТабЧасть.Номенклатура) КАК ТЧ
	        |		ПО (ТЧ.Ссылка = Документы.ЗаказПокупателя)
	        |			И (ТЧ.Номенклатура = Движ.Номенклатура)
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	Закупки,
	        |	ДокументСсылка,
	        |	Контрагент,
	        |	СтруктурнаяЕдиницаКонтрагента,
	        |	ТорговыйПредставитель,
	        |	Номенклатура";
КонецФункции	
		
//}Боровик Артем Олегович 17.03.2017 16:21:01 

//Конец области ТЕКСТЫ ЗАПРОСОВ

//////////////////////////////////////////////////////////
//Основные
//////////////////////////////////////////////////////////

//{[+](фрагмент добавлен), Боровик Артем Олегович 17.03.2017 16:17:45
Процедура ИнициализацияОбщегоЗапроса()
	
	ОбщийЗапрос = Новый Запрос(ПолучитьТекстОбщегоЗапроса());
	ОбщийЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СписокКонтрактов = Новый СписокЗначений;
	СписокКонтрактов.Добавить(ПолучитьЗначенияКлюча("КонтрактМарсШоколад"));
	СписокКонтрактов.Добавить(ПолучитьЗначенияКлюча("КонтрактМарсКорма"));
	
	ОбщийЗапрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачПериода)); 
	ОбщийЗапрос.УстановитьПараметр("КонецПериода", КонецДня(КонПериода)); 
	ОбщийЗапрос.УстановитьПараметр("СписокКонтрактов", СписокКонтрактов);
	ОбщийЗапрос.УстановитьПараметр("СтавкаБезНДС", Перечисления.СтавкиНДС.БезНДС);
	ОбщийЗапрос.УстановитьПараметр("ДатаОбмена", ТекущаяДата()); 
	ОбщийЗапрос.УстановитьПараметр("СписокСкладов", ВнешняяСистема.Склады.ВыгрузитьКолонку("Склад")); 
	ОбщийЗапрос.УстановитьПараметр("ИдентификаторДистрибьютора", ИдентификаторДистрибьютора);
	ОбщийЗапрос.УстановитьПараметр("НастройкаАгентов", ПолучитьЗначенияКлюча("СВОЙСТВОАГЕНТА"));
	ОбщийЗапрос.УстановитьПараметр("СвойствоЗаказа", ПолучитьЗначенияКлюча("СВОЙСТВОЗАКАЗА")); 
	ОбщийЗапрос.УстановитьПараметр("БазовыйТипЦен", ПолучитьЗначенияКлюча("БазовыйТипЦен"));
	ОбщийЗапрос.УстановитьПараметр("ТекГодСтрокой", Формат(ГОД(ТекущаяДата()), "ЧГ=0")); 
	
	ОбщийЗапрос.Выполнить();
	
КонецПроцедуры	
//}Боровик Артем Олегович 17.03.2017 16:17:45 

Процедура ВывестиОтчетПоОшибкам(Данные) экспорт
	
	Макет = ПолучитьМакет("МакетВыводаОшибок");
	ТабДокумент = Новый ТабличныйДокумент;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИмяФайла");
	ОбластьМакета.Параметры.ИмяФайла = Данные.ИмяФайла;
	ТабДокумент.Вывести(ОбластьМакета);
	
	МассивСтрок = ОбщиеФункции.РазложитьСтрокуВМассив(Данные.ОписаниеОшибок, Символы.ПС);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстОшибки");
	Для Сч=0 по МассивСтрок.Количество()-1 цикл
		ОбластьМакета.Параметры.ТекстОшибки = МассивСтрок.Получить(Сч);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;	
	
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.Показать("Ошибки при формировании файла "+Данные.ИмяФайла);
	
КонецПроцедуры

Функция ХМЛСтрока(пЗначение, ИспользоватьПредставлениеДатыXML = Ложь)
	
	Если ТипЗнч(пЗначение) = Тип("Дата")
		И НЕ ИспользоватьПредставлениеДатыXML тогда
		Возврат XMLСтрока(Формат(пЗначение, "ДФ='yyyyMMdd HH:mm'"));
	ИначеЕсли ТипЗнч(пЗначение) = Тип("Булево") тогда	
		Возврат XMLСтрока(Формат(пЗначение, "БЛ=0; БИ=1"));
	ИначеЕсли ТипЗнч(пЗначение) = Тип("Число") тогда		
		Возврат Формат(пЗначение, "ЧРД=.; ЧН=0; ЧГ=0");
	ИначеЕсли ТипЗнч(пЗначение) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(пЗначение) = Тип("СправочникСсылка.СтруктурныеЕдиницыКонтрагентов") тогда
		Возврат Строка(пЗначение.УникальныйИдентификатор());
	Иначе	
		Возврат СокрЛП(XMLСтрока(пЗначение));
	КонецЕсли;	
	
КонецФункции	

Процедура УстановитьАтрибут(ХМЛ, ИмяАтрибута, ЗначАтрибута, стрФормат = "")
	
	ХМЛ.ЗаписатьАтрибут(ИмяАтрибута, ?(стрФормат = "", 	XMLСтрока(ЗначАтрибута),	Формат(ЗначАтрибута, стрФормат)));	
	
КонецПроцедуры	

Процедура СоздатьХМЛФайл(ПолноеИмяФайла, СущностьДОМ, ТекстОшибок = "", ИмяФайла = "")
		
	// Создаем хмл файл	
	ФайлХМЛ = Новый ЗаписьXML;
	ФайлХМЛ.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
	ФайлХМЛ.ЗаписатьОбъявлениеXML();
	// Конвертируем созданный ранее ХМЛ для записи
	ФайлДОМ = Новый ЗаписьDOM();
	ФайлДОМ.Записать(СущностьДОМ, ФайлХМЛ);
	
	ФайлХМЛ.Закрыть();
	
	ФайлХМЛ = Неопределено;
	
	СписокФайлов.Добавить(ПолноеИмяФайла, ИмяФайла);
	
КонецПроцедуры

Процедура ПрочитатьФайлЗаказов(ПолноеИмя, ТаблицыДляДвижений)
	
	ТаблицаДляХраненияЗаголовков = ТаблицыДляДвижений.табЗаголовкиДокументов;
	ТаблицаДляХраненияСтрок = ТаблицыДляДвижений.табСтрокиДокументов;
	
	Попытка
		
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(СокрЛП(ПолноеИмя));
		
		Фабрика = Новый ФабрикаXDTO;
		ОбХДТО = Фабрика.ПрочитатьXML(ЧтениеХМЛ);
		
		Для Каждого ЗаголовокЗаказа из ОбХДТО.OutletOrders.OutletOrder цикл
			
			// На всякий случай, проверим cust_id (Идентификатор ТД Шкуренко в системе Sales Works). 
			// А то вдруг нам выложат чужие заявки и у кого-нибудь пригорит одно место.
			Если НЕ СокрЛП(ЗаголовокЗаказа.CUST_ID) = СокрЛП(ИдентификаторДистрибьютора) тогда
				Продолжить;
			КонецЕсли;	
			
			// Проверим на дублирование заказа
			Если ЕстьТакойЗаказ(ЗаголовокЗаказа.ORDERNO) тогда
				Продолжить;
			КонецЕсли;	
			
			// Если не найден обязательный реквизит, тогда выдаем ошибку и пропускаем этот заказ
			Отказ = Ложь;
			МассивОшибок = Новый Массив;
			НовСтрЗаголовок = ТаблицаДляХраненияЗаголовков.Добавить();
			НовСтрЗаголовок.Организация						= НайтиОрганизацию(ЗаголовокЗаказа.OP_CODE, МассивОшибок, Отказ);
			НовСтрЗаголовок.Ответственный 				  	= НайтиОтветственного(ЗаголовокЗаказа.MERCH_ID, МассивОшибок, Отказ);	
			НовСтрЗаголовок.Подразделение					= НовСтрЗаголовок.Ответственный.Подразделение;
			НовСтрЗаголовок.Контрагент 					  	= НайтиКонтрагента(ЗаголовокЗаказа.PCOMP_CODE, МассивОшибок, Отказ);
			НовСтрЗаголовок.ДоговорКонтрагента 				= Автозаказ1С.НайтиПодходящийДоговорКонтрагента(НовСтрЗаголовок.Контрагент, НовСтрЗаголовок.Организация, Перечисления.ВидыОтношенийСКонтрагентами.СПокупателем);
			НовСтрЗаголовок.СтруктурнаяЕдиницаКонтрагента	= НайтиСтруктурнуюЕдиницу(ЗаголовокЗаказа.OL_CODE, МассивОшибок, Отказ);
			НовСтрЗаголовок.ДатаОтгрузки					= XMLЗначение(ИзXMLТипа(Новый ТипДанныхXML("dateTime", "http://www.w3.org/2001/XMLSchema")), ЗаголовокЗаказа.ORDEREXECUTIONDATE);
			НовСтрЗаголовок.Автор							= ПараметрыСеанса.ТекущийПользователь;
			НовСтрЗаголовок.Комментарий						= СокрЛП(ЗаголовокЗаказа.COMMENTS);
			НовСтрЗаголовок.Дата							= ТекущаяДата();
			НовСтрЗаголовок.ЗагруженИзКПК					= Истина;
			НовСтрЗаголовок.ВремяСозданияВКПК				= XMLЗначение(ИзXMLТипа(Новый ТипДанныхXML("dateTime", "http://www.w3.org/2001/XMLSchema")), ЗаголовокЗаказа.OLORDERDATE);
			НовСтрЗаголовок.ВремяПередачиЗаказаВОфис		= ТекущаяДата();
			НовСтрЗаголовок.ВнешнийНомер					= ЗаголовокЗаказа.ORDERNO;
			
			Если МассивОшибок.Количество() > 0 тогда
				Для Каждого СообщениеОбОшибке из МассивОшибок цикл
					Сообщить(СообщениеОбОшибке, СтатусСообщения.Важное);
				КонецЦикла;
			КонецЕсли;	
			
			Если Отказ тогда Продолжить; КонецЕсли;
			
			Если ТипЗнч(ЗаголовокЗаказа.OutletOrderDetails.OutletOrderDetail) = Тип("СписокXDTO") тогда
				Для Каждого СтрокаЗаказа Из ЗаголовокЗаказа.OutletOrderDetails.OutletOrderDetail цикл
					ДобавитьСтрокуВТаблицуЗаказа(ТаблицаДляХраненияСтрок, СтрокаЗаказа, ЗаголовокЗаказа.ORDERNO, МассивОшибок, Отказ);	
				КонецЦикла;
			Иначе
				СтрокаЗаказа = ЗаголовокЗаказа.OutletOrderDetails.OutletOrderDetail;
				ДобавитьСтрокуВТаблицуЗаказа(ТаблицаДляХраненияСтрок, СтрокаЗаказа, ЗаголовокЗаказа.ORDERNO, МассивОшибок, Отказ);	
			КонецЕсли;
			
		КонецЦикла;	
		
	Исключение
		ВызватьИсключение "Ошибка при чтении файла "+ПолноеИмя;
	КонецПопытки;
	
КонецПроцедуры	

Процедура ВыполнитьВыгрузкуФайлов()
	
	//-- Отладка	
	//КаталогВременныхФайлов = "E:\Мои обработки\MARS\Test files";
	//СписокФайлов = Новый СписокЗначений;
	//
	//МассивФайлов = НайтиФайлы(КаталогВременныхФайлов, "*.xml");
	//Для Каждого Файл Из МассивФайлов цикл
	//	СписокФайлов.Добавить(Файл.ПолноеИмя, Файл.Имя);
	//КонецЦикла;	
	//--
	ЕстьФайлыДляЭкспорта = Ложь;
	
	Попытка
				
		УстановитьСоединение();
		Соединение.УстановитьТекущийКаталог(ПолучитьЗначенияКлюча("КАТАЛОГВЫГРУЗКИ"));
		
		МассивСтарыхФайлов = Соединение.НайтиФайлы(Соединение.ТекущийКаталог(), "*.xml");
		Для Каждого СтарыйФайл из МассивСтарыхФайлов цикл
			Соединение.Удалить(СтарыйФайл.ПолноеИмя);
		КонецЦикла;	
		
		Для Каждого ЭлементСписка Из СписокФайлов цикл
			// Запишем на сервер
			Соединение.Записать(ЭлементСписка.Значение, Соединение.ТекущийКаталог()+"/"+ЭлементСписка.Представление);
			// Удалим с локального диска
			УдалитьФайлы(ЭлементСписка.Значение);
			Сообщить("Файл "+ЭлементСписка.Представление+" успешно выгружен");
		КонецЦикла;
		
		//ЕстьФайлыДляЭкспорта = (Соединение.НайтиФайлы(ПолучитьЗначенияКлюча("КАТАЛОГЗАГРУЗКИ"), "*.xml").Количество() > 0);
		СписокФайлов = Неопределено;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	Если НЕ ЕстьФайлыДляЭкспорта тогда
		Соединение = Неопределено;
	КонецЕсли;	
		
КонецПроцедуры	

Процедура ВыполнитьОбмен(ДоступныеОперации) экспорт
	
	#Если Клиент Тогда
		ВыбратьКаталогХраненияФайлов();
	#КонецЕсли 
	
	Если КаталогФайлов = Неопределено тогда
		КаталогФайлов = КаталогВременныхФайлов();
	КонецЕсли;
	
	Если ДоступныеОперации = Неопределено тогда
		Сообщить("Не выбраны операции", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	СписокФайлов = Новый СписокЗначений;
	
	ИнициализацияОбщегоЗапроса();
	
	Для Каждого Операция Из ДоступныеОперации цикл
				
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();	
		#КонецЕсли 
		
		Если Операция.Пометка тогда
			Выполнить(Операция.Команда);
		КонецЕсли;	
		
	КонецЦикла;	
	
	//ВыполнитьВыгрузкуФайлов();
	
КонецПроцедуры	

// Процедура создания файла LOCALPRODUCTS.XML
Процедура СоздатьФайлСТоварами() 
	
	Если НЕ ИмпортРазрешен("ВыгружатьНоменклатуру") тогда
		Возврат;
	КонецЕсли;	
	
	Сообщить(">> Начало импорта данных по номенклатуре");
	
	ЗначенияКлюча = ПолучитьЗначенияКлюча("Группа номенклатуры");
	
	Если ЗначенияКлюча = Неопределено тогда
		Сообщить("Код ошибки (1.1) |   Не удалось получить значение ключа 'Группа номенклатуры'. Операция по созданию файла LOCALPRODUCTS.XML прервана!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоНоменклатуре());
	Запрос.УстановитьПараметр("МассивГруппНоменклатуры", ЗначенияКлюча); 
	Запрос.УстановитьПараметр("ГруппыНеиспользуемыхТоваров", ПолучитьЗначенияКлюча("Неиспользуемая группа номенклатуры")); 
	Запрос.УстановитьПараметр("КодSW_Номенклатуры", ПолучитьЗначенияКлюча("СВОЙСТВОНОМЕНКЛАТУРА"));
	Запрос.УстановитьПараметр("Свойство_ЭтоМикс", ПолучитьЗначенияКлюча("СвойствоЭтоМикс")); 
	Запрос.УстановитьПараметр("ДатаОбмена", ТекущаяДата()); 
	Запрос.УстановитьПараметр("ИдентификаторДистрибьютора", ИдентификаторДистрибьютора); 
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаСДанными = РезультатЗапроса[3].Выгрузить();
	ТаблицаПоКомплектующим = РезультатЗапроса[4].Выгрузить();
	
	Если ТаблицаСДанными.Количество()=0 тогда
		Сообщить(">> Результат запроса пустой. Файл LOCALPRODUCTS.XML пустой", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;	
	
	МассивЭлементов = Новый Массив;
	ХМЛ = Новый ДокументDOM();
	Корень = ХМЛ.СоздатьЭлемент("ROOT");
	Элементы = ХМЛ.СоздатьЭлемент("LocalProducts");
	
	Корень.ДобавитьДочерний(Элементы);
	
	КолонкиТаблицыПоЭлементам = ТаблицаСДанными.Колонки;
	КолонкиТаблицыКомплектов = ТаблицаПоКомплектующим.Колонки;
	ТекстОшибок = "";
	Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
		
		//Если ЭтоПолеУникально(МассивЭлементов, СтрокаТабЧасти.CODE) тогда
		//	МассивЭлементов.Добавить(СтрокаТабЧасти.CODE);
		//Иначе
		//	ТекстОшибок = ТекстОшибок + "Код ошибки (1.1.2) |  Значение поля 'Артикул' у номенклатуры ["+СтрокаТабЧасти.SHORTNAME+"], должно быть уникальным!"+Символы.ПС;
		//	Продолжить;
		//КонецЕсли;	
		
		Элемент = ХМЛ.СоздатьЭлемент("LocalProduct");
		Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл
			Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя]));			
		КонецЦикла;	
		
		МассивСтрокМИКС = ТаблицаПоКомплектующим.НайтиСтроки(Новый Структура("LOCALCODE", СтрокаТабЧасти.LOCALCODE));
		
		Если МассивСтрокМИКС.Количество()>0 тогда
			
			КомплектацияЭлементов = ХМЛ.СоздатьЭлемент("LocalProductDetails");
			Для Каждого СтрокаТабЧастиКомлектующих из МассивСтрокМИКС цикл
				КомлектующийЭлемент = ХМЛ.СоздатьЭлемент("LocalProductDetail");
				Для Каждого КолонкаДетализации из КолонкиТаблицыКомплектов цикл
					
					Если КолонкаДетализации.Имя = "LOCALCODE" тогда
						Продолжить;
					КонецЕсли;	
					
					КомлектующийЭлемент.УстановитьАтрибут(КолонкаДетализации.Имя, ХМЛСтрока(СтрокаТабЧастиКомлектующих[КолонкаДетализации.Имя]));
					
				КонецЦикла;	
				КомплектацияЭлементов.ДобавитьДочерний(КомлектующийЭлемент);
				Элемент.ДобавитьДочерний(КомплектацияЭлементов);
			КонецЦикла;	
			
		КонецЕсли;	
		
		Элементы.ДобавитьДочерний(Элемент);
		
	КонецЦикла;		
	
	СоздатьХМЛФайл(КаталогФайлов + "LocalProducts.xml", Корень, ТекстОшибок, "LocalProducts.xml");
	
	ХМЛ = Неопределено;
	
	Сообщить(">> Окончание импорта данных по номенклатуре"+Символы.ПС);
	
КонецПроцедуры // СоздатьФайлСЭлементами()

// Процедура создания файла PRODUCTQUANT.XML
// Выгружает товары, у которых проставлена минимальная кратность заказа.
Процедура СоздатьФайлСКвантами() 
	
	Если НЕ ИмпортРазрешен("ВыгружатьНоменклатуру") тогда
		Возврат;
	КонецЕсли;	
	
	Сообщить(">> Начало импорта данных по номенклатуре с квантами (мин. кратность)");
	
	ЗначенияКлюча = ПолучитьЗначенияКлюча("Группа номенклатуры");
	
	Если ЗначенияКлюча = Неопределено тогда
		Сообщить("Код ошибки (1.2) |   Не удалось получить значение ключа 'Группа номенклатуры'. Операция по созданию файла PRODUCTQUANT.XML прервана!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоНоменклатуреСКвантами());
	Запрос.УстановитьПараметр("МассивГруппНоменклатуры", ЗначенияКлюча); 
	Запрос.УстановитьПараметр("ГруппыНеиспользуемыхТоваров", ПолучитьЗначенияКлюча("Неиспользуемая группа номенклатуры")); 
	Запрос.УстановитьПараметр("КодSW_Номенклатуры", ПолучитьЗначенияКлюча("СВОЙСТВОНОМЕНКЛАТУРА")); 
	Запрос.УстановитьПараметр("ДатаОбмена", ТекущаяДата()); 
	Запрос.УстановитьПараметр("ИдентификаторДистрибьютора", ИдентификаторДистрибьютора); 
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаСДанными = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаСДанными.Количество()=0 тогда
		Сообщить(">> Результат запроса пустой. Файл PRODUCTQUANT.XML пустой", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;	
	
	
	ХМЛ = Новый ДокументDOM();
	Корень = ХМЛ.СоздатьЭлемент("ROOT");
	Элементы = ХМЛ.СоздатьЭлемент("QuantLocalProducts");
	
	КолонкиТаблицыПоЭлементам = ТаблицаСДанными.Колонки;
	Корень.ДобавитьДочерний(Элементы);
	ТекстОшибок = "";
	Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
		
		// Минимальное количество предусматривает только целое число.
		// Не выгружать товары с дробным количеством
		Если СтрокаТабЧасти.QTY <> Цел(СтрокаТабЧасти.QTY) тогда
			ТекстОшибок = ТекстОшибок + "Код ошибки (1.2.1) |   Минимальное количество должно быть целое число! (Код товара: "+СтрокаТабЧасти.LOCALCODE+", мин. кратность = "+СтрокаТабЧасти.QTY+")"+ Символы.ПС;
			Продолжить;
		КонецЕсли;	
		
		Элемент = ХМЛ.СоздатьЭлемент("QuantLocalProduct");
		Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл
			Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя]));			
		КонецЦикла;	
		
		Элементы.ДобавитьДочерний(Элемент);
		
	КонецЦикла;	
	
	СоздатьХМЛФайл(КаталогФайлов + "ProductQuant.xml", Корень, ТекстОшибок, "ProductQuant.xml");
	Сообщить(">> Окончание импорта данных по номенклатуре с квантами (мин. кратность)"+Символы.ПС);
	
КонецПроцедуры //

// Процедура создания файла ARCHIVEDSTOCKS.XML
// Выгружает остатки по товарам за последние 2 недели
Процедура СоздатьФайлСАрхивнымиОстатками() 
	
	Если НЕ ИмпортРазрешен("ВыгружатьОстатки") тогда
		Возврат;
	КонецЕсли;	
	
	Сообщить(">> Начало импорта данных по остаткам за последние 2 недели");
	
	ЗначенияКлюча = ПолучитьЗначенияКлюча("Группа номенклатуры");
	
	Если ЗначенияКлюча = Неопределено тогда
		Сообщить("Код ошибки (1.3) |   Не удалось получить значение ключа 'Группа номенклатуры'. Операция по созданию файла ARCHIVEDSTOCKS.XML прервана!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоАрхивнымОстаткам());
	Запрос.УстановитьПараметр("МассивГруппНоменклатуры", ЗначенияКлюча); 
	Запрос.УстановитьПараметр("КодSW_Номенклатуры", ПолучитьЗначенияКлюча("СВОЙСТВОНОМЕНКЛАТУРА")); 
	Запрос.УстановитьПараметр("ГруппыНеиспользуемыхТоваров", ПолучитьЗначенияКлюча("Неиспользуемая группа номенклатуры")); 
	Запрос.УстановитьПараметр("ДатаОбмена", ТекущаяДата()); 
	Запрос.УстановитьПараметр("ИдентификаторДистрибьютора", ИдентификаторДистрибьютора); 
	Запрос.УстановитьПараметр("СписокСкладов", ВнешняяСистема.Склады.ВыгрузитьКолонку("Склад")); 
	
	ДатаОкончанияСреза = НачалоДня(КонПериода);
	ДатаНачалаСреза = НачПериода;
		
	ХМЛ = Новый ДокументDOM();
	Корень = ХМЛ.СоздатьЭлемент("ROOT");
	Элементы = ХМЛ.СоздатьЭлемент("ArchivedLocalStocks");
	Корень.ДобавитьДочерний(Элементы);	
	
	//Т.к выгрузка идет за 2 недели, то ошибки по складу будут дублировать.
	//По этому добавим контроль на дублирование ошибок
	
	МассивОбъектовСОшибками = Новый Массив;
	ТекстОшибок = "";
	Пока НачалоДня(ДатаНачалаСреза) <= ДатаОкончанияСреза цикл
		
		Запрос.УстановитьПараметр("ДатаСрезаОстатков", ДатаНачалаСреза); 
		ТаблицаСДанными = Запрос.Выполнить().Выгрузить();
		
		КолонкиТаблицыПоЭлементам = ТаблицаСДанными.Колонки;
		Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
			
			//Проверим, заполнен ли основной склад отгрузки.
			//Если нет, тогда сообщим об этом пользователю и пропустим
			Если НЕ ЗначениеЗаполнено(СтрокаТабЧасти.WAREH_CODE) тогда
				МассивОбъектовСОшибками.Добавить(СтрокаТабЧасти.LOCALCODE);
				ТекстОшибок = ТекстОшибок + "Код ошибки 1.3.1 |   У номенклатуры с кодом '"+СокрЛП(СтрокаТабЧасти.LOCALCODE)+"' не заполнен основной склад отгрузки. Позиция пропущена"+Символы.ПС;
				Продолжить;
			КонецЕсли;	
			
			Элемент = ХМЛ.СоздатьЭлемент("ArchivedLocalStock");
			Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл
				Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя], ?(Колонка.Имя = "DATE", Истина, Ложь))); // для колонки DATE, формат должен быть "http://www.w3.org/TR/xmlschema-2/#dateTime"			
			КонецЦикла;	
			
			Элементы.ДобавитьДочерний(Элемент);
			
		КонецЦикла;	
		
		ДатаНачалаСреза = ОбщиеФункции.ДобавитьДень(ДатаНачалаСреза, 1);
		
	КонецЦикла;
	
	СоздатьХМЛФайл(КаталогФайлов + "ArchivedStocks.xml", Корень, ТекстОшибок, "ArchivedStocks.xml");
	Сообщить(">> Окончание импорта данных по остаткам за последние 2 недели"+Символы.ПС);
	
КонецПроцедуры // 

// Процедура создания файла INITSTOCKS.XML
// Выгружает остатки по товарам за последние 2 недели
Процедура СоздатьФайлСТекущимиОстатками() 
	
	Если НЕ ИмпортРазрешен("ВыгружатьОстатки") тогда
		Возврат;
	КонецЕсли;	
	
	Сообщить(">> Начало импорта данных по текущим остаткам");
	
	ЗначенияКлюча = ПолучитьЗначенияКлюча("Группа номенклатуры");
	
	Если ЗначенияКлюча = Неопределено тогда
		Сообщить("Код ошибки (1.4) |   Не удалось получить значение ключа 'Группа номенклатуры'. Операция по созданию файла INITSTOCKS.XML прервана!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоТекущимОстаткам());
	Запрос.УстановитьПараметр("МассивГруппНоменклатуры", ЗначенияКлюча); 
	Запрос.УстановитьПараметр("КодSW_Номенклатуры", ПолучитьЗначенияКлюча("СВОЙСТВОНОМЕНКЛАТУРА")); 
	Запрос.УстановитьПараметр("ГруппыНеиспользуемыхТоваров", ПолучитьЗначенияКлюча("Неиспользуемая группа номенклатуры")); 
	Запрос.УстановитьПараметр("ДатаОбмена", ТекущаяДата()); 
	Запрос.УстановитьПараметр("ИдентификаторДистрибьютора", ИдентификаторДистрибьютора); 
	Запрос.УстановитьПараметр("СписокСкладов", ВнешняяСистема.Склады.ВыгрузитьКолонку("Склад")); 
			
	ХМЛ = Новый ДокументDOM();
	Корень = ХМЛ.СоздатьЭлемент("ROOT");
	Элементы = ХМЛ.СоздатьЭлемент("InitStocks");
	Корень.ДобавитьДочерний(Элементы);	
		
	ТаблицаСДанными = Запрос.Выполнить().Выгрузить();
	
	КолонкиТаблицыПоЭлементам = ТаблицаСДанными.Колонки;
	ТекстОшибок = "";
	Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
		
		//Проверим, заполнен ли основной склад отгрузки.
		//Если нет, тогда сообщим об этом пользователю и пропустим
		Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаТабЧасти.WAREH_CODE)) тогда
			ТекстОшибок = ТекстОшибок + "Код ошибки 1.4.1 |   У номенклатуры с кодом '"+СокрЛП(СтрокаТабЧасти.LOCALCODE)+"' не заполнен основной склад отгрузки. Позиция пропущена"+Символы.ПС;
			Продолжить;
		КонецЕсли;	
		
		Элемент = ХМЛ.СоздатьЭлемент("InitStock");
		Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл
			Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя]));
		КонецЦикла;	
		
		Элементы.ДобавитьДочерний(Элемент);
		
	КонецЦикла;	
		
	СоздатьХМЛФайл(КаталогФайлов + "InitStocks.xml", Корень, ТекстОшибок, "InitStocks.xml");	
	Сообщить(">> Окончание импорта данных по текущим остаткам"+Символы.ПС);
	
КонецПроцедуры //

// Процедура создания файла PRICELIST.XML
// Выгружает все прайсы, по которым были продажи
Процедура СоздатьФайлСПрайсами() 
	
	Если НЕ ИмпортРазрешен("ВыгружатьЦены") тогда
		Возврат;
	КонецЕсли;	
	
	Сообщить(">> Начало импорта данных по текущим прайсам");
	
	ЗначенияКлюча = ПолучитьЗначенияКлюча("Группа номенклатуры");
	
	Если ЗначенияКлюча = Неопределено тогда
		Сообщить("Код ошибки (1.5) |   Не удалось получить значение ключа 'Группа номенклатуры'. Операция по созданию файла PRICELIST.XML прервана!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	ОбщийЗапрос.Текст = ПолучитьТекстЗапросаПоПрайсам();
	ОбщийЗапрос.УстановитьПараметр("МассивГруппНоменклатуры", ЗначенияКлюча); 
	ОбщийЗапрос.УстановитьПараметр("ГруппыНеиспользуемыхТоваров", ПолучитьЗначенияКлюча("Неиспользуемая группа номенклатуры")); 
			
	ХМЛ = Новый ДокументDOM();
	Корень = ХМЛ.СоздатьЭлемент("ROOT");
	Элементы = ХМЛ.СоздатьЭлемент("PricesList");
	Корень.ДобавитьДочерний(Элементы);	
		
	ТаблицаСДанными = ОбщийЗапрос.Выполнить().Выгрузить();
	
	КолонкиТаблицыПоЭлементам = ТаблицаСДанными.Колонки;
	Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
				
		Элемент = ХМЛ.СоздатьЭлемент("PriceList");
		Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл
			Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя]));
		КонецЦикла;	
		
		Элементы.ДобавитьДочерний(Элемент);
		
	КонецЦикла;	
		
	СоздатьХМЛФайл(КаталогФайлов + "PriceList.xml", Корень,, "PriceList.xml");	
	Сообщить(">> Окончание импорта данных по текущим прайсам"+Символы.ПС);
	
КонецПроцедуры //

// Процедура создания файла PARENTCOMPANIES.XML
Процедура СоздатьФайлСКонтрагентам() 
	
	Сообщить(">> Начало импорта данных по контрагентам");
	
	//Если ВнешняяСистема.Организации.Количество() = 0 тогда
	//	Сообщить("Код ошибки (1.6) |   В настройках внешней системы не заполнен список организаций. Операция по созданию файла PARENTCOMPANIES.XML прервана!", СтатусСообщения.Важное);
	//	Возврат;
	//КонецЕсли;	
	
	Запрос = ОбщийЗапрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоКонтрагентам();
			
	ХМЛ = Новый ДокументDOM();
	Корень = ХМЛ.СоздатьЭлемент("ROOT");
	Элементы = ХМЛ.СоздатьЭлемент("ParentCompanies");
	Корень.ДобавитьДочерний(Элементы);	
		
	ТаблицаСДанными = Запрос.Выполнить().Выгрузить();
	
	КолонкиТаблицыПоЭлементам = ТаблицаСДанными.Колонки;
	Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
				
		Элемент = ХМЛ.СоздатьЭлемент("ParentCompany");
		Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл			
			Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя]));
		КонецЦикла;	
		
		Элементы.ДобавитьДочерний(Элемент);
		
	КонецЦикла;	
		
	СоздатьХМЛФайл(КаталогФайлов + "ParentCompanies.xml", Корень,, "ParentCompanies.xml");	
	Сообщить(">> Окончание импорта данных по контрагентам"+Символы.ПС);
	
КонецПроцедуры //

// Процедура создания файла LocalOutlets.XML
// Выгружает торговые точки, по которым проходили продажи MARS за последний год (365 дней).
Процедура СоздатьФайлСТорговымиТочками() 
	
	Сообщить(">> Начало импорта данных по торговым точкам");
	
	Если НЕ ИмпортРазрешен("ВыгружатьТорговыеТочки") тогда
		Возврат;
	КонецЕсли;	
		
	ОбщийЗапрос.Текст = ПолучитьТекстЗапросаПоТорговымТочкам();
	ОбщийЗапрос.УстановитьПараметр("КодSW_Номенклатуры", ПолучитьЗначенияКлюча("СВОЙСТВОНОМЕНКЛАТУРА")); 
			
	ХМЛ = Новый ДокументDOM();
	Корень = ХМЛ.СоздатьЭлемент("ROOT");
	Элементы = ХМЛ.СоздатьЭлемент("LocalOutlets");
	Корень.ДобавитьДочерний(Элементы);	
		
	РезультатЗапроса = ОбщийЗапрос.ВыполнитьПакет();
	
	ТаблицаСДанными = РезультатЗапроса[4].Выгрузить();
	
	КолонкиТаблицыПоЭлементам = ТаблицаСДанными.Колонки;
	Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
				
		Элемент = ХМЛ.СоздатьЭлемент("LocalOutlet");
		Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл
			Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя]));
		КонецЦикла;	
		
		Элементы.ДобавитьДочерний(Элемент);
		
	КонецЦикла;	
	
	ТаблицаСДанными = РезультатЗапроса[7].Выгрузить();
	Элементы = ХМЛ.СоздатьЭлемент("LocalOutletParentCompanies");
	Корень.ДобавитьДочерний(Элементы);
	КолонкиТаблицыПоЭлементам = ТаблицаСДанными.Колонки;
	Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
		
		Элемент = ХМЛ.СоздатьЭлемент("LocalOutletParentCompany");
		Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл
			Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя]));
		КонецЦикла;	
		
		Элементы.ДобавитьДочерний(Элемент);
		
	КонецЦикла;	
	
	ТаблицаСДанными = РезультатЗапроса[5].Выгрузить();
	
	Элементы = ХМЛ.СоздатьЭлемент("LocalOutletByPayForms");
	Корень.ДобавитьДочерний(Элементы);	
	
	КолонкиТаблицыПоЭлементам = ТаблицаСДанными.Колонки;
	Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
				
		Элемент = ХМЛ.СоздатьЭлемент("LocalOutletByPayForm");
		Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл
			Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя]));
		КонецЦикла;	
		
		Элементы.ДобавитьДочерний(Элемент);
		
	КонецЦикла;	
	
	ТаблицаСДанными = РезультатЗапроса[6].Выгрузить();
	
	Элементы = ХМЛ.СоздатьЭлемент("LocalOutletDiscountsByProducts");
	Корень.ДобавитьДочерний(Элементы);	
	
	КолонкиТаблицыПоЭлементам = ТаблицаСДанными.Колонки;
	Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
		
		Элемент = ХМЛ.СоздатьЭлемент("LocalOutletDiscountByProducts");
		Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл
			Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя]));
		КонецЦикла;	
		
		Элементы.ДобавитьДочерний(Элемент);
		
	КонецЦикла;	

		
	СоздатьХМЛФайл(КаталогФайлов + "LocalOutlets.xml", Корень,, "LocalOutlets.xml");	
	Сообщить(">> Окончание импорта данных по торговым точкам"+Символы.ПС);
	
КонецПроцедуры //

// Процедура создания файла Denials.XML
// Данные о причинах отказов в обработке заказ (причины недоставки) в разрезе заказов и деталей(строк)заказов, поступивших с КПК SalesWorks.
Процедура СоздатьФайлСНедопоставками() 
	
	Сообщить(">> Начало импорта данных по недопоставкам");	
	
	спПодразделений = ВнешняяСистема.Подразделения.ВыгрузитьКолонку("Подразделение");
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоНедопоставкам());
	Запрос.УстановитьПараметр("НачПериод", НачПериода); 
	Запрос.УстановитьПараметр("КонПериод", КонецДня(КонПериода)); 
	Запрос.УстановитьПараметр("СписокПодразделений", спПодразделений);
	Запрос.УстановитьПараметр("МассивГруппНоменклатуры", ПолучитьЗначенияКлюча("Группа номенклатуры")); 
	Запрос.УстановитьПараметр("НомераВходящихДокументов", ПолучитьЗначенияКлюча("СВОЙСТВОЗАКАЗА")); 
	Запрос.УстановитьПараметр("ДатаОбмена", ТекущаяДата()); 
	Запрос.УстановитьПараметр("ИдентификаторДистрибьютора", ИдентификаторДистрибьютора);  
			
	ХМЛ = Новый ДокументDOM();
	Корень = ХМЛ.СоздатьЭлемент("ROOT");
	ЭлементыПервогоУровня = ХМЛ.СоздатьЭлемент("OutletOrderDenials");
	Корень.ДобавитьДочерний(ЭлементыПервогоУровня);	
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
		
	ТаблицаСДанными = РезультатЗапроса[3].Выгрузить();
	ТаблицаСДетализацией = РезультатЗапроса[4].Выгрузить();
	
	ЭлементыВторогоУровня = ХМЛ.СоздатьЭлемент("OutletOrderHDenials");
	ЭлементыПервогоУровня.ДобавитьДочерний(ЭлементыВторогоУровня);
	
	КолонкиТаблицыПоЭлементам = ТаблицаСДанными.Колонки;
	Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
				
		Элемент = ХМЛ.СоздатьЭлемент("OutletOrderHDenial");
		Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл
			Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя]));
		КонецЦикла;				
		ЭлементыВторогоУровня.ДобавитьДочерний(Элемент);
		
	КонецЦикла;	
	
	ЭлементыВторогоУровня = ХМЛ.СоздатьЭлемент("OutletOrderDDenials");
	ЭлементыПервогоУровня.ДобавитьДочерний(ЭлементыВторогоУровня);
	
	КолонкиТаблицыПоЭлементам = ТаблицаСДетализацией.Колонки;
	Для Каждого СтрокаТабЧасти из ТаблицаСДетализацией цикл
		
		Элемент = ХМЛ.СоздатьЭлемент("OutletOrderDDenial");
		Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл
			Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя]));
		КонецЦикла;				
		ЭлементыВторогоУровня.ДобавитьДочерний(Элемент);
		
	КонецЦикла;
		
	СоздатьХМЛФайл(КаталогФайлов + "Denials.xml", Корень,, "Denials.xml");	
	Сообщить(">> Окончание импорта данных по недопоставкам"+Символы.ПС);
	
КонецПроцедуры //

// Процедура создания файла OUTLETDEBTS.XML
// Данные о задолженностях торговых точек (или Юр лиц в данной ТТ).
Процедура СоздатьФайлСДолгами() 
	
	Сообщить(">> Начало импорта данных по долгам");	
	
	Если НЕ ИмпортРазрешен("ВыгружатьДолги") тогда
		Возврат;
	КонецЕсли;	
	
	спПодразделений = ВнешняяСистема.Подразделения.ВыгрузитьКолонку("Подразделение");
	спПодразделенияКатегорииКорма = Новый СписокЗначений;
	СтрокаСКодамиПодразделений = ПолучитьЗначенияКлюча("КодыПодразделенийКатегорииКорма");
	
	Для Каждого ТекПодразделение из спПодразделений цикл
		
		Если Найти(СтрокаСКодамиПодразделений, ТекПодразделение.Код) > 0 тогда
			спПодразделенияКатегорииКорма.Добавить(ТекПодразделение);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоДолгам());
	Запрос.УстановитьПараметр("НачПериод", НачалоГода(НачПериода)); 
	Запрос.УстановитьПараметр("КонПериод", КонецГода(КонПериода)); 
	Запрос.УстановитьПараметр("КонтрактМарсШоколад", ПолучитьЗначенияКлюча("КонтрактМарсШоколад")); 
	Запрос.УстановитьПараметр("КонтрактМарсКорма", ПолучитьЗначенияКлюча("КонтрактМарсКорма")); 
	Запрос.УстановитьПараметр("ДатаОбмена", ТекущаяДата()); 
	Запрос.УстановитьПараметр("СписокСкладов", ВнешняяСистема.Склады.ВыгрузитьКолонку("Склад")); 
	Запрос.УстановитьПараметр("ИдентификаторДистрибьютора", ИдентификаторДистрибьютора);
	Запрос.УстановитьПараметр("СвойствоАгентаКод", ПолучитьЗначенияКлюча("СВОЙСТВОАГЕНТА"));  
			
	ХМЛ = Новый ДокументDOM();
	Корень = ХМЛ.СоздатьЭлемент("ROOT");
	Элементы = ХМЛ.СоздатьЭлемент("OutletDebts");
	Корень.ДобавитьДочерний(Элементы);	
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
		
	ТаблицаСДанными = РезультатЗапроса[2].Выгрузить();
	ТаблицаСДетализацией = РезультатЗапроса[3].Выгрузить();
		
	КолонкиТаблицыПоЭлементам = ТаблицаСДанными.Колонки;
	КолонкиТаблицыДетализации = ТаблицаСДетализацией.Колонки;
	Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
				
		Элемент = ХМЛ.СоздатьЭлемент("OutletDebt");
		Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл
			Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя], ?(Найти("DTLM", Колонка.Имя) = 0, Истина, Ложь)));
		КонецЦикла;			
		
		МассивСтрокСДетализацией = ТаблицаСДетализацией.НайтиСтроки(Новый Структура("OL_CODE", СтрокаТабЧасти.OL_CODE));
		Если МассивСтрокСДетализацией.Количество() > 0 тогда
			
			Элемент2 = ХМЛ.СоздатьЭлемент("OutletDebtsDetails");
			Для Каждого Детализация из МассивСтрокСДетализацией цикл
				Элемент3 = ХМЛ.СоздатьЭлемент("OutletDebtsDetail");
				Для Каждого Колонка Из КолонкиТаблицыДетализации цикл
					
					Если Колонка.Имя = "OL_CODE" тогда // Это поле служит для связи с основной записью о долге
						Продолжить;
					КонецЕсли;	
										
					ТекЗначение = Детализация[Колонка.Имя];
					
					Если Колонка.Имя = "MERCH_ID" тогда
						//Детализация[Колонка.Имя] = 0;
						//Временно закомментируем код, который ниже.
						Если ЗначениеЗаполнено(Детализация[Колонка.Имя]) тогда
							ТекЗначение = ЧИСЛО(Детализация[Колонка.Имя]);	
						Иначе
							ТекЗначение = 0;	
						КонецЕсли;
					КонецЕсли;
					
					Элемент3.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(ТекЗначение, ?(Найти("DTLM", Колонка.Имя) = 0, Истина, Ложь)));
					
				КонецЦикла;			
				Элемент2.ДобавитьДочерний(Элемент3);
			КонецЦикла;	
			Элемент.ДобавитьДочерний(Элемент2);
			
		КонецЕсли;	
				
		Элементы.ДобавитьДочерний(Элемент);
		
	КонецЦикла;	
			
	СоздатьХМЛФайл(КаталогФайлов + "OutletDebts.xml", Корень,, "OutletDebts.xml");	
	Сообщить(">> Окончание импорта данных по долгам"+Символы.ПС);
	
КонецПроцедуры //

// Процедура создания файла SALOUTS.XML
// Данные о документах фактических продаж
Процедура СоздатьФайлСПродажами() 
	
	Сообщить(">> Начало импорта данных по продажам");	
	
	Если НЕ ИмпортРазрешен("ВыгружатьДокументы") тогда
		Возврат;
	КонецЕсли;	
		
	ОбщийЗапрос.Текст = ПолучитьТекстЗапросаПоПродажам();					
	РезультатЗапроса = ОбщийЗапрос.ВыполнитьПакет();
		
	ТаблицаСДанными = РезультатЗапроса[3].Выгрузить();
	ТаблицаСДетализацией = РезультатЗапроса[5].Выгрузить();
	
	Если ТаблицаСДанными.Количество() = 0 тогда
		Возврат;
	КонецЕсли;	
	
	// Создаем хмл файл	
	ФайлХМЛ = Новый ЗаписьXML;
	ФайлХМЛ.ОткрытьФайл(КаталогФайлов + "SalOuts.xml", "UTF-8");
	ФайлХМЛ.ЗаписатьОбъявлениеXML();
	
	ФайлХМЛ.ЗаписатьНачалоЭлемента("ROOT");
	 	ФайлХМЛ.ЗаписатьНачалоЭлемента("SalOuts");
	Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
		
		ФайлХМЛ.ЗаписатьНачалоЭлемента("SalOut");
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабЧасти.MERCH_ID) тогда
			СтрокаТабЧасти.MERCH_ID = 0;
		КонецЕсли;	
	
			УстановитьАтрибут(ФайлХМЛ, "INVOICE_NO", СтрокаТабЧасти.INVOICE_NO +"_"+ СтрокаТабЧасти.DOC_TYPE);
			УстановитьАтрибут(ФайлХМЛ, "OL_CODE", СтрокаТабЧасти.OL_CODE);
			УстановитьАтрибут(ФайлХМЛ, "MERCH_ID", СтрокаТабЧасти.MERCH_ID, "ЧРД=.; ЧН=0; ЧГ=0");
			УстановитьАтрибут(ФайлХМЛ, "MERCH_CODE", СтрокаТабЧасти.MERCH_CODE);
			УстановитьАтрибут(ФайлХМЛ, "DATE", СтрокаТабЧасти.DATE);
			УстановитьАтрибут(ФайлХМЛ, "ORDER_NO", СтрокаТабЧасти.ORDER_NO);
			УстановитьАтрибут(ФайлХМЛ, "DATETO", СтрокаТабЧасти.DATETO);
			УстановитьАтрибут(ФайлХМЛ, "PARAM1", СтрокаТабЧасти.PARAM1, "ЧРД=.; ЧН=0; ЧГ=0");
			УстановитьАтрибут(ФайлХМЛ, "PRINTORDER", СтрокаТабЧасти.PRINTORDER, "БЛ=0; БИ=1");
			УстановитьАтрибут(ФайлХМЛ, "PRINTCHECK", СтрокаТабЧасти.PRINTCHECK, "БЛ=0; БИ=1");
			УстановитьАтрибут(ФайлХМЛ, "PRNCHKONLY", СтрокаТабЧасти.PRNCHKONLY, "БЛ=0; БИ=1");
			УстановитьАтрибут(ФайлХМЛ, "DOC_TYPE", СтрокаТабЧасти.DOC_TYPE);
			УстановитьАтрибут(ФайлХМЛ, "WAREH_CODE", СтрокаТабЧасти.WAREH_CODE);
			УстановитьАтрибут(ФайлХМЛ, "VATCALCMOD", СтрокаТабЧасти.VATCALCMOD, "ЧРД=.; ЧН=0; ЧГ=0");
			УстановитьАтрибут(ФайлХМЛ, "STATUS", СтрокаТабЧасти.STATUS);
			УстановитьАтрибут(ФайлХМЛ, "DTLM", СтрокаТабЧасти.DTLM, "ДФ='yyyyMMdd HH:mm'");
			УстановитьАтрибут(ФайлХМЛ, "CINVOIC_NO", СтрокаТабЧасти.CINVOIC_NO);
			УстановитьАтрибут(ФайлХМЛ, "LOC_CODE", СтрокаТабЧасти.LOC_CODE);
			УстановитьАтрибут(ФайлХМЛ, "PCOMP_CODE", СтрокаТабЧасти.PCOMP_CODE);
			УстановитьАтрибут(ФайлХМЛ, "CUST_ID", СтрокаТабЧасти.CUST_ID);
		
		МассивСтрокСДетализацией = ТаблицаСДетализацией.НайтиСтроки(Новый Структура("ДокументОснование", СтрокаТабЧасти.ДокументОснование));
		Если МассивСтрокСДетализацией.Количество() > 0 тогда
			
			ФайлХМЛ.ЗаписатьНачалоЭлемента("SalOutLocalDetails");
			Для Каждого Детализация из МассивСтрокСДетализацией цикл
				
				Если Детализация.QTY = 0 тогда
					Продолжить;
				КонецЕсли;	
				
				ФайлХМЛ.ЗаписатьНачалоЭлемента("SalOutLocalDetail");
								
					УстановитьАтрибут(ФайлХМЛ, "LOCALCODE", Детализация.LOCALCODE);
					УстановитьАтрибут(ФайлХМЛ, "LOT_ID", Детализация.LOT_ID);
					УстановитьАтрибут(ФайлХМЛ, "PRICE", Детализация.PRICE, "ЧРД=.; ЧН=0; ЧГ=0");
					УстановитьАтрибут(ФайлХМЛ, "ORDER_NO", Детализация.ORDER_NO);
					УстановитьАтрибут(ФайлХМЛ, "QTY", Детализация.QTY, "ЧРД=.; ЧН=0; ЧГ=0");
					УстановитьАтрибут(ФайлХМЛ, "VAT", Детализация.VAT, "ЧРД=.; ЧН=0; ЧГ=0");
					УстановитьАтрибут(ФайлХМЛ, "ACCPRICE", Детализация.ACCPRICE, "ЧРД=.; ЧН=0; ЧГ=0");
					УстановитьАтрибут(ФайлХМЛ, "STATUS", Детализация.STATUS);
					УстановитьАтрибут(ФайлХМЛ, "DTLM", Детализация.DTLM, "ДФ='yyyyMMdd HH:mm'");
					УстановитьАтрибут(ФайлХМЛ, "CUST_ID", Детализация.CUST_ID);
				
				ФайлХМЛ.ЗаписатьКонецЭлемента();
				
			КонецЦикла;	
			ФайлХМЛ.ЗаписатьКонецЭлемента();
			
		КонецЕсли;	
		
		ФайлХМЛ.ЗаписатьКонецЭлемента();
		
	КонецЦикла;	
		ФайлХМЛ.ЗаписатьКонецЭлемента();
	ФайлХМЛ.ЗаписатьКонецЭлемента();
			
	ФайлХМЛ.Закрыть();
	СписокФайлов.Добавить(КаталогФайлов + "SalOuts.xml", "SalOuts.xml");
	Сообщить(">> Окончание импорта данных по продажам"+Символы.ПС);
	
КонецПроцедуры //

// Процедура создания файла SALINS.XML
// Данные о документах фактических продаж
Процедура СоздатьФайлСЗакупками() 
	
	Сообщить(">> Начало импорта данных по закупкам");	
	
	Если НЕ ИмпортРазрешен("ВыгружатьДокументы") тогда
		Возврат;
	КонецЕсли;	
	
	СписокКонтрактов = Новый СписокЗначений;
	СписокКонтрактов.Добавить(ПолучитьЗначенияКлюча("КонтрактМарсШоколад"));
	СписокКонтрактов.Добавить(ПолучитьЗначенияКлюча("КонтрактМарсКорма"));
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоЗакупкам());
	Запрос.УстановитьПараметр("НачПериод", НачалоДня(НачПериода)); 
	Запрос.УстановитьПараметр("КонПериод", НачалоДня(КонПериода)); 
	Запрос.УстановитьПараметр("СписокКонтрактов", СписокКонтрактов);  
	Запрос.УстановитьПараметр("ДатаОбмена", ТекущаяДата()); 
	Запрос.УстановитьПараметр("СписокСкладов", ВнешняяСистема.Склады.ВыгрузитьКолонку("Склад")); 
	Запрос.УстановитьПараметр("ИдентификаторДистрибьютора", ИдентификаторДистрибьютора);
	Запрос.УстановитьПараметр("БазовыйТипЦен", ПолучитьЗначенияКлюча("БазовыйТипЦен"));
	Запрос.УстановитьПараметр("ТекГодСтрокой", Формат(ГОД(ТекущаяДата()), "ЧГ=0")); 
			
	ХМЛ = Новый ДокументDOM();
	Корень = ХМЛ.СоздатьЭлемент("ROOT");
	Элементы = ХМЛ.СоздатьЭлемент("SalIns");
	Корень.ДобавитьДочерний(Элементы);	
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
		
	ТаблицаСДанными = РезультатЗапроса[5].Выгрузить();
	ТаблицаСДетализацией = РезультатЗапроса[6].Выгрузить();
		
	КолонкиТаблицыПоЭлементам = ТаблицаСДанными.Колонки;
	КолонкиТаблицыДетализации = ТаблицаСДетализацией.Колонки;
	Для Каждого СтрокаТабЧасти из ТаблицаСДанными цикл
		
		Элемент = ХМЛ.СоздатьЭлемент("SalIn");
		Для Каждого Колонка Из КолонкиТаблицыПоЭлементам цикл
			
			Если Колонка.Имя = "ДокументОснование" тогда // Это поле служит для связи с основной записью о продаже
				Продолжить;
			КонецЕсли;
						
			Элемент.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(СтрокаТабЧасти[Колонка.Имя], ?(Найти("DTLM", Колонка.Имя) = 0, Истина, Ложь)));
			
		КонецЦикла;			
		
		МассивСтрокСДетализацией = ТаблицаСДетализацией.НайтиСтроки(Новый Структура("ДокументОснование", СтрокаТабЧасти.ДокументОснование));
		Если МассивСтрокСДетализацией.Количество() > 0 тогда
			
			Элемент2 = ХМЛ.СоздатьЭлемент("SalInLocalDetails");
			Для Каждого Детализация из МассивСтрокСДетализацией цикл
				
				Если Детализация.QTY = 0 тогда
					Продолжить;
				КонецЕсли;	
				
				Элемент3 = ХМЛ.СоздатьЭлемент("SalInLocalDetail");
				Для Каждого Колонка Из КолонкиТаблицыДетализации цикл
					
					Если Колонка.Имя = "ДокументОснование" тогда // Это поле служит для связи с основной записью о продаже
						Продолжить;
					КонецЕсли;	
					
					ТекЗначение = Детализация[Колонка.Имя];
									
					Элемент3.УстановитьАтрибут(Колонка.Имя, ХМЛСтрока(ТекЗначение, ?(Найти("DTLM", Колонка.Имя) = 0, Истина, Ложь)));
					
				КонецЦикла;			
				Элемент2.ДобавитьДочерний(Элемент3);
			КонецЦикла;	
			Элемент.ДобавитьДочерний(Элемент2);
			
		КонецЕсли;	
				
		Элементы.ДобавитьДочерний(Элемент);
		
	КонецЦикла;	
			
	СоздатьХМЛФайл(КаталогФайлов + "SalIns.xml", Корень,, "SalIns.xml");	
	Сообщить(">> Окончание импорта данных по закупкам"+Символы.ПС);
	
КонецПроцедуры //

// Процедура создания файла OPERATIONS.xml
// В роли операций у нас будут выступать организации, которые проставлены в настройках внешней системы
Процедура СоздатьФайлПоОперациям()
	
	Сообщить(">> Начало импорта данных по организациям");
	
	ФайлХМЛ = Новый ЗаписьXML;
	ФайлХМЛ.ОткрытьФайл(КаталогФайлов + "Operations.xml", "UTF-8");
	ФайлХМЛ.ЗаписатьОбъявлениеXML();
	
	ФайлХМЛ.ЗаписатьНачалоЭлемента("ROOT");
	
		ФайлХМЛ.ЗаписатьНачалоЭлемента("Operations");
		
		Для Каждого ТекОрганизация из ВнешняяСистема.Организации цикл
			
			ФайлХМЛ.ЗаписатьНачалоЭлемента("Operation");
			
				УстановитьАтрибут(ФайлХМЛ, "OP_CODE", СокрЛП(ТекОрганизация.Организация.Код));
				УстановитьАтрибут(ФайлХМЛ, "OP_NAME", СокрЛП(ТекОрганизация.Организация.Наименование));
				УстановитьАтрибут(ФайлХМЛ, "STATUS", ?(ТекОрганизация.Организация.ПометкаУдаления, 9, 2));
				УстановитьАтрибут(ФайлХМЛ, "DTLM", ТекущаяДата(), "ДФ='yyyyMMdd HH:mm'");
				УстановитьАтрибут(ФайлХМЛ, "CUST_ID", ИдентификаторДистрибьютора);
			
			ФайлХМЛ.ЗаписатьКонецЭлемента();
			
		КонецЦикла;	
		
		ФайлХМЛ.ЗаписатьКонецЭлемента();
	
	ФайлХМЛ.ЗаписатьКонецЭлемента();
	
    ФайлХМЛ.Закрыть();
	СписокФайлов.Добавить(КаталогФайлов + "Operations.xml", "Operations.xml");
	Сообщить(">> Окончание импорта данных по организациям"+Символы.ПС);
	
КонецПроцедуры	

// Создает документы отгрузки после обработки файла заказов
Процедура СоздатьДокументыОтгрузки(ДляЗаполнения)
	
	ТаблицаЗаголовков = ДляЗаполнения.табЗаголовкиДокументов;
	ТаблицаТоваров = ДляЗаполнения.табСтрокиДокументов;	
	
	СписокСозданныхЗаявок = Новый СписокЗначений;
	СвойствоЗаказа = ПолучитьЗначенияКлюча("СВОЙСТВОЗАКАЗА");
	
	Для Каждого СтрокаЗаголовка Из ТаблицаЗаголовков цикл
		
		НовДокумент = Документы.ОтгрузкаТоваровУслуг.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовДокумент, СтрокаЗаголовка);
		
		РаботаСДокументами.ЗаполнитьШапкуДокумента(НовДокумент, НовДокумент.Ответственный, "Продажа");
		
		НайденныеТоварыЗаказа = ТаблицаТоваров.НайтиСтроки(Новый Структура("ВнешнийНомер", СтрокаЗаголовка.ВнешнийНомер));
		
		Для Каждого ТоварЗаказа Из НайденныеТоварыЗаказа цикл
			
			НовСтр = НовДокумент.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ТоварЗаказа);
			
			НовСтр.Цена = УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(
								НовСтр.Номенклатура,
								Справочники.ВариантыНоменклатуры.ПустаяСсылка(),
								НовДокумент.ТипЦен,
								НовДокумент.Дата,
								НовСтр.ЕдиницаИзмерения
								);
								
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НовСтр, НовДокумент);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтр, НовДокумент);
			
		КонецЦикла;	
		
		НачатьТранзакцию();
		//--
		Попытка		
			НовДокумент.Записать();	
			ПривязатьВнешнийНомерКНакладной(НовДокумент.Ссылка, СвойствоЗаказа, СтрокаЗаголовка.ВнешнийНомер);
			СписокСозданныхЗаявок.Добавить(НовДокумент.Ссылка);
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Не удалось создать документ отгрузки для заказа №"+СтрокаЗаголовка.ВнешнийНомер+" по причине: "+ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		//--
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗагрузитьЗаказы()
		
	//Если Соединение = Неопределено тогда
	//	Попытка
	//		УстановитьСоединение();
	//	Исключение
	//		Сообщить(ОписаниеОшибки());	
	//		Возврат;
	//	КонецПопытки;
	//КонецЕсли;	
	//
	//КаталогЭкспорта = ПолучитьЗначенияКлюча("КАТАЛОГЗАГРУЗКИ");
	//ФайлЗаказов = Неопределено;
	//ФайлПлатежей = Неопределено;
	//
	//Попытка
	//	
	//	МассивФайловДляЭкспорта = Соединение.НайтиФайлы(КаталогЭкспорта, "*.xml");
	//	Для каждого ЭлементМассива Из МассивФайловДляЭкспорта Цикл
	//		
	//		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xml");
	//		
	//		Если ВРЕГ(ЭлементМассива.ИмяБезРасширения) = ВРЕГ("OutletOrders") тогда
	//			Соединение.Получить(ЭлементМассива.ПолноеИмя, ИмяВременногоФайла);
	//			ФайлЗаказов = ИмяВременногоФайла;
	//		КонецЕсли;	
	//		
	//	КонецЦикла; 
	//	
	//Исключение
	//	Сообщить("Не удалось загрузить файлы заказов и платежей по причине:"+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Важное);	
	//КонецПопытки; 
	
	//debug
	ФайлЗаказов = "D:\upload\MARS\OutletOrders.xml";
	
	//Закроем соединение
	Соединение = Неопределено;
	
	ТаблицыДляДвижений = Новый Структура("табЗаголовкиДокументов, табСтрокиДокументов", СоздатьТаблицуЗаголовков("Продажи"), СоздатьТаблицуСтрокДокументов("Продажи"));
	
	Попытка
		Сообщить(">> "+ТекущаяДата()+" / Начало обработки файла заказов");
		ПрочитатьФайлЗаказов(ФайлЗаказов, ТаблицыДляДвижений);
		Сообщить(">> "+ТекущаяДата()+" / Окончание обработки файла заказов" + Символы.ПС);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Сообщить(">> "+ТекущаяДата()+" / Начало создания заказов");
	СоздатьДокументыОтгрузки(ТаблицыДляДвижений);
	Сообщить(">> "+ТекущаяДата()+" / Окончание создания заказов" + Символы.ПС);
	
	//УдалитьФайлы(ФайлЗаказов);
	
КонецПроцедуры	

Процедура ЗагрузитьПлатежи()
	//
КонецПроцедуры	

//Конец области Основные

