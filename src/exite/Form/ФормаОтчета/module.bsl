
Перем УстановитьПометкиДляВсехЗаказПокупателя;
Перем УдалитьПометкиДляВсехЗаказПокупателя;

Перем УстановитьПометкиДляВсехРеализацияТоваровУслуг;
Перем УдалитьПометкиДляВсехРеализацияТоваровУслуг;

 Перем УстановитьПометкиДляВсехРеализацияТоваровУслугДляОтправкиСчета;
Перем УдалитьПометкиДляВсехРеализацияТоваровУслугДляОтправкиСчета;

Перем УстановитьПометкиДляВсехПоступленийТоваровУслуг;
Перем УдалитьПометкиДляВсехПоступленийТоваровУслуг;

Перем УстановитьПометкиДляВсехЗаказовПоставщику;
Перем УдалитьПометкиДляВсехЗаказовПоставщику;

Перем ВыбранныеРеализацииТоваровУслуг;
Перем ВыбранныеРеализацииТоваровУслугДляОтправкиСчета;
Перем ВыбранныеПоступленияТоваровУслуг;
Перем ВыбранныеЗаказыПокупателя;
Перем ВыбранныеЗаказыПоставщику;


//ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА "СПИСОК ЗАКАЗОВ"

Процедура КоманднаяПанельЗаказПокупателяУстановитьВсе(Кнопка)
	
	УстановитьПометкиДляВсехЗаказПокупателя = Истина;
	ЭлементыФормы.СписокЗаказовПокупателя.ОбновитьСтроки();
	УстановитьПометкиДляВсехЗаказПокупателя = Ложь;
	
КонецПроцедуры

Процедура КоманднаяПанельЗаказПокупателяУслугСнятьВсе(Кнопка)
	
	УдалитьПометкиДляВсехЗаказПокупателя = Истина;
	ЭлементыФормы.СписокЗаказовПокупателя.ОбновитьСтроки();
	УдалитьПометкиДляВсехЗаказПокупателя = Ложь;
	
КонецПроцедуры

Процедура СписокЗаказовПокупателяПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.ЗаказПокупателяСОтметкой.ОтображатьФлажок = Истина;
	
	Если УстановитьПометкиДляВсехЗаказПокупателя Тогда
		ОформлениеСтроки.Ячейки.ЗаказПокупателяСОтметкой.Флажок = Истина;
	КонецЕсли;
	
	Если УдалитьПометкиДляВсехЗаказПокупателя Тогда
		ОформлениеСтроки.Ячейки.ЗаказПокупателяСОтметкой.Флажок = Ложь;
	КонецЕсли;
	
	Если НЕ УстановитьПометкиДляВсехЗаказПокупателя И НЕ УдалитьПометкиДляВсехЗаказПокупателя Тогда
		ОформлениеСтроки.Ячейки.ЗаказПокупателяСОтметкой.Флажок = НЕ (ВыбранныеЗаказыПокупателя[ДанныеСтроки.Ссылка] = Неопределено);	
	Иначе
		Если ВыбранныеЗаказыПокупателя[ДанныеСтроки.Ссылка] = Неопределено Тогда
			ВыбранныеЗаказыПокупателя[ДанныеСтроки.Ссылка] = Истина;
		Иначе
			ВыбранныеЗаказыПокупателя.Удалить(ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокЗаказовПокупателяПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "ЗаказПокупателяСОтметкой" Тогда
		Если ВыбранныеЗаказыПокупателя[Элемент.ТекущаяСтрока.Ссылка] = Неопределено Тогда
			ВыбранныеЗаказыПокупателя[Элемент.ТекущаяСтрока.Ссылка] = Истина;
		Иначе
			ВыбранныеЗаказыПокупателя.Удалить(Элемент.ТекущаяСтрока.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры



//ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА "РЕАЛИЗАЦИЯ ТОВАРОВ УСЛУГ"

Процедура КоманднаяПанельРеализацияТоваровУслугУстановитьВсе(Кнопка)
	
	УстановитьПометкиДляВсехРеализацияТоваровУслуг = Истина;
	ЭлементыФормы.СписокРеализацийУслуг.ОбновитьСтроки();
	УстановитьПометкиДляВсехРеализацияТоваровУслуг = Ложь;
	
КонецПроцедуры

Процедура КоманднаяПанельРеализацияТоваровУслугСнятьВсе(Кнопка)
	
	УдалитьПометкиДляВсехРеализацияТоваровУслуг = Истина;
	ЭлементыФормы.СписокРеализацийУслуг.ОбновитьСтроки();
	УдалитьПометкиДляВсехРеализацияТоваровУслуг = Ложь;
	
КонецПроцедуры

Процедура СписокРеализацийУслугПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.РеализацияТоваровУслугСОтметкой.ОтображатьФлажок = Истина;
	
	Если УстановитьПометкиДляВсехРеализацияТоваровУслуг Тогда
		ОформлениеСтроки.Ячейки.РеализацияТоваровУслугСОтметкой.Флажок = Истина;
	КонецЕсли;
	
	Если УдалитьПометкиДляВсехРеализацияТоваровУслуг Тогда
		ОформлениеСтроки.Ячейки.РеализацияТоваровУслугСОтметкой.Флажок = Ложь;
	КонецЕсли;
	
	Если НЕ УстановитьПометкиДляВсехРеализацияТоваровУслуг И НЕ УдалитьПометкиДляВсехРеализацияТоваровУслуг Тогда
		ОформлениеСтроки.Ячейки.РеализацияТоваровУслугСОтметкой.Флажок = НЕ (ВыбранныеРеализацииТоваровУслуг[ДанныеСтроки.Ссылка] = Неопределено);	
	Иначе
		Если ВыбранныеРеализацииТоваровУслуг[ДанныеСтроки.Ссылка] = Неопределено Тогда
			ВыбранныеРеализацииТоваровУслуг[ДанныеСтроки.Ссылка] = Истина;
		Иначе
			ВыбранныеРеализацииТоваровУслуг.Удалить(ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокРеализацийУслугПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "РеализацияТоваровУслугСОтметкой" Тогда
		Если ВыбранныеРеализацииТоваровУслуг[Элемент.ТекущаяСтрока.Ссылка] = Неопределено Тогда
			ВыбранныеРеализацииТоваровУслуг[Элемент.ТекущаяСтрока.Ссылка] = Истина;
		Иначе
			ВыбранныеРеализацииТоваровУслуг.Удалить(Элемент.ТекущаяСтрока.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
 
Процедура СписокПоступленийТоваровУслугПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.ПоступлениеТоваровУслугСОтметкой.ОтображатьФлажок = Истина;
	
	Если УстановитьПометкиДляВсехПоступленийТоваровУслуг Тогда
		ОформлениеСтроки.Ячейки.ПоступлениеТоваровУслугСОтметкой.Флажок = Истина;
	КонецЕсли;
	
	Если УдалитьПометкиДляВсехПоступленийТоваровУслуг Тогда
		ОформлениеСтроки.Ячейки.ПоступлениеТоваровУслугСОтметкой.Флажок = Ложь;
	КонецЕсли;
	
	Если НЕ УстановитьПометкиДляВсехПоступленийТоваровУслуг И НЕ УдалитьПометкиДляВсехПоступленийТоваровУслуг Тогда
		ОформлениеСтроки.Ячейки.ПоступлениеТоваровУслугСОтметкой.Флажок = НЕ (ВыбранныеПоступленияТоваровУслуг[ДанныеСтроки.Ссылка] = Неопределено);	
	Иначе
		Если ВыбранныеПоступленияТоваровУслуг[ДанныеСтроки.Ссылка] = Неопределено Тогда
			ВыбранныеПоступленияТоваровУслуг[ДанныеСтроки.Ссылка] = Истина;
		Иначе
			ВыбранныеПоступленияТоваровУслуг.Удалить(ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокПоступленийТоваровУслугПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "ПоступлениеТоваровУслугСОтметкой" Тогда
		Если ВыбранныеПоступленияТоваровУслуг[Элемент.ТекущаяСтрока.Ссылка] = Неопределено Тогда
			ВыбранныеПоступленияТоваровУслуг[Элемент.ТекущаяСтрока.Ссылка] = Истина;
		Иначе
			ВыбранныеПоступленияТоваровУслуг.Удалить(Элемент.ТекущаяСтрока.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельРеализацияТоваровУслугДляОтправкиСчетаУстановитьВсе(Кнопка)
	
	УстановитьПометкиДляВсехРеализацияТоваровУслугДляОтправкиСчета = Истина;
	ЭлементыФормы.СписокРеализацийУслугДляОтправкиСчета.ОбновитьСтроки();
	УстановитьПометкиДляВсехРеализацияТоваровУслугДляОтправкиСчета = Ложь;
	
КонецПроцедуры

Процедура КоманднаяПанельРеализацияТоваровУслугДляОтправкиСчетаСнятьВсе(Кнопка)
	
	УдалитьПометкиДляВсехРеализацияТоваровУслугДляОтправкиСчета = Истина;
	ЭлементыФормы.СписокРеализацийУслугДляОтправкиСчета.ОбновитьСтроки();
	УдалитьПометкиДляВсехРеализацияТоваровУслугДляОтправкиСчета = Ложь;
	
КонецПроцедуры

Процедура СписокРеализацийУслугДляОтправкиСчетаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.РеализацияТоваровУслугСОтметкой.ОтображатьФлажок = Истина;
	
	Если УстановитьПометкиДляВсехРеализацияТоваровУслугДляОтправкиСчета Тогда
		ОформлениеСтроки.Ячейки.РеализацияТоваровУслугСОтметкой.Флажок = Истина;
	КонецЕсли;
	
	Если УдалитьПометкиДляВсехРеализацияТоваровУслугДляОтправкиСчета Тогда
		ОформлениеСтроки.Ячейки.РеализацияТоваровУслугСОтметкой.Флажок = Ложь;
	КонецЕсли;
	
	Если НЕ УстановитьПометкиДляВсехРеализацияТоваровУслугДляОтправкиСчета И НЕ УдалитьПометкиДляВсехРеализацияТоваровУслугДляОтправкиСчета Тогда
		ОформлениеСтроки.Ячейки.РеализацияТоваровУслугСОтметкой.Флажок = НЕ (ВыбранныеРеализацииТоваровУслугДляОтправкиСчета[ДанныеСтроки.Ссылка] = Неопределено);	
	Иначе
		Если ВыбранныеРеализацииТоваровУслугДляОтправкиСчета[ДанныеСтроки.Ссылка] = Неопределено Тогда
			ВыбранныеРеализацииТоваровУслугДляОтправкиСчета[ДанныеСтроки.Ссылка] = Истина;
		Иначе
			ВыбранныеРеализацииТоваровУслугДляОтправкиСчета.Удалить(ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокРеализацийУслугДляОтправкиСчетаПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "РеализацияТоваровУслугСОтметкой" Тогда
		Если ВыбранныеРеализацииТоваровУслугДляОтправкиСчета[Элемент.ТекущаяСтрока.Ссылка] = Неопределено Тогда
			ВыбранныеРеализацииТоваровУслугДляОтправкиСчета[Элемент.ТекущаяСтрока.Ссылка] = Истина;
		Иначе
			ВыбранныеРеализацииТоваровУслугДляОтправкиСчета.Удалить(Элемент.ТекущаяСтрока.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//
Процедура КоманднаяПанельЗаказПоставщикуУстановитьВсе(Кнопка)
	УстановитьПометкиДляВсехЗаказовПоставщику = Истина;
	ЭлементыФормы.СписокЗаказовПоставщику.ОбновитьСтроки();
	УстановитьПометкиДляВсехЗаказовПоставщику = Ложь;
КонецПроцедуры

Процедура КоманднаяПанельЗаказПоставщикуСнятьВсе(Кнопка)
	УдалитьПометкиДляВсехЗаказовПоставщику = Истина;
	ЭлементыФормы.СписокЗаказовПоставщику.ОбновитьСтроки();
	УдалитьПометкиДляВсехЗаказовПоставщику = Ложь;
КонецПроцедуры

Процедура КоманднаяПанельПоступленийТоваровУслугУстановитьВсе(Кнопка)
	УстановитьПометкиДляВсехПоступленийТоваровУслуг = Истина;
	ЭлементыФормы.СписокПоступленийТоваровУслуг.ОбновитьСтроки();
	УстановитьПометкиДляВсехПоступленийТоваровУслуг = Ложь;
КонецПроцедуры

Процедура КоманднаяПанельПоступленийТоваровУслугСнятьВсе(Кнопка)
	УдалитьПометкиДляВсехПоступленийТоваровУслуг = Истина;
	ЭлементыФормы.СписокПоступленийТоваровУслуг.ОбновитьСтроки();
	УдалитьПометкиДляВсехПоступленийТоваровУслуг = Ложь;
КонецПроцедуры


Процедура СписокЗаказовПоставщикуПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ЗаказПоставщикуСОтметкой.ОтображатьФлажок = Истина;
	
	Если УстановитьПометкиДляВсехЗаказовПоставщику Тогда
		ОформлениеСтроки.Ячейки.ЗаказПоставщикуСОтметкой.Флажок = Истина;
	КонецЕсли;
	
	Если УдалитьПометкиДляВсехЗаказовПоставщику Тогда
		ОформлениеСтроки.Ячейки.ЗаказПоставщикуСОтметкой.Флажок = Ложь;
	КонецЕсли;
	
	Если НЕ УстановитьПометкиДляВсехЗаказовПоставщику И НЕ УдалитьПометкиДляВсехЗаказовПоставщику Тогда
		ОформлениеСтроки.Ячейки.ЗаказПоставщикуСОтметкой.Флажок = НЕ (ВыбранныеЗаказыПоставщику[ДанныеСтроки.Ссылка] = Неопределено);	
	Иначе
		Если ВыбранныеЗаказыПоставщику[ДанныеСтроки.Ссылка] = Неопределено Тогда
			ВыбранныеЗаказыПоставщику[ДанныеСтроки.Ссылка] = Истина;
		Иначе
			ВыбранныеЗаказыПоставщику.Удалить(ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокЗаказовПоставщикуПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "ЗаказПоставщикуСОтметкой" Тогда
		Если ВыбранныеЗаказыПоставщику[Элемент.ТекущаяСтрока.Ссылка] = Неопределено Тогда
			ВыбранныеЗаказыПоставщику[Элемент.ТекущаяСтрока.Ссылка] = Истина;
		Иначе
			ВыбранныеЗаказыПоставщику.Удалить(Элемент.ТекущаяСтрока.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	Если Не ЗначениеЗаполнено(ДатаВступленияВСилуПрайсЛиста) Тогда
		ДатаВступленияВСилуПрайсЛиста = ТекущаяДата();
	КонецЕсли;
	
	СерверОбмена = "ftpex.edi.su";
	Порт = 21;
	//ИмяПользователяFTP = "Ваш логин";
	//ПарольПользователяFTP = "пароль пользователя";
	ПутьНаСервере = "/inbox/";
	ПасссивныйРежим = Истина;
	НачПериода = ТекущаяДата();
	КонПериода = ТекущаяДата();
	ЭлементыФормы.СписокРеализацийУслуг.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	//==orders
	//СписокЗаказовПоставщику.Отбор.eXiteСостояние.Использование = Истина;
	//СписокЗаказовПоставщику.Отбор.eXiteСостояние.ВидСравнения = ВидСравнения.Равно;
	//СписокЗаказовПоставщику.Отбор.eXiteСостояние.Значение = Перечисления.eXiteСостояние.Новый;	
	
	СписокЗаказовПоставщику.Отбор.Дата.Использование = Истина;
	СписокЗаказовПоставщику.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
	СписокЗаказовПоставщику.Отбор.Дата.ЗначениеС = НачалоДня(НачПериода);
	СписокЗаказовПоставщику.Отбор.Дата.ЗначениеПО = КонецДня(КонПериода);
	
	//==desadv
	//СписокРеализацийУслуг.Отбор.eXiteСостояние.Использование = Истина;
	//СписокРеализацийУслуг.Отбор.eXiteСостояние.ВидСравнения = ВидСравнения.Равно;
	//СписокРеализацийУслуг.Отбор.eXiteСостояние.Значение = Перечисления.eXiteСостояние.ГотовКОтправке;
	
	//СписокРеализацийУслуг.Отбор.Проведен.Использование = Ложь;
	//СписокРеализацийУслуг.Отбор.Проведен.ВидСравнения = ВидСравнения.Равно;
	//СписокРеализацийУслуг.Отбор.Проведен.Значение = Истина;
	//
	//Запрос = Новый Запрос;
	//ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	Контрагенты.Ссылка КАК Контрагент
	//|ИЗ
	//|	Справочник.Контрагенты КАК Контрагенты
	//|ГДЕ
	//|	Контрагенты.eXiteОбмен
	//|	И (Контрагенты.eXiteОтчетОбОтгрузке
	//|			ИЛИ Контрагенты.eXiteСчет)";
	//Запрос.Текст = ТекстЗапроса;
	//МассивКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	//СписокКонтрагентов = Новый СписокЗначений;
	//СписокКонтрагентов.ЗагрузитьЗначения(МассивКонтрагентов);
	//
	//СписокРеализацийУслуг.Отбор.Контрагент.Использование = Истина;
	//СписокРеализацийУслуг.Отбор.Контрагент.ВидСравнения = ВидСравнения.ВСписке;
	//СписокРеализацийУслуг.Отбор.Контрагент.Значение = СписокКонтрагентов;
	//
	СписокРеализацийУслуг.Отбор.Дата.Использование = Истина;
	СписокРеализацийУслуг.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
	СписокРеализацийУслуг.Отбор.Дата.ЗначениеС = НачалоДня(НачПериода);
	СписокРеализацийУслуг.Отбор.Дата.ЗначениеПО = КонецДня(КонПериода);	
	//
	////==ordrsp
	////СписокЗаказовПокупателя.Отбор.eXiteСостояние.Использование = Истина;
	////СписокЗаказовПокупателя.Отбор.eXiteСостояние.ВидСравнения = ВидСравнения.Равно;
	////СписокЗаказовПокупателя.Отбор.eXiteСостояние.Значение = Перечисления.eXiteСостояние.ГотовКОтправке;
	//
	//Запрос = Новый Запрос;
	//ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	Контрагенты.Ссылка КАК Контрагент
	//|ИЗ
	//|	Справочник.Контрагенты КАК Контрагенты
	//|ГДЕ
	//|	Контрагенты.eXiteОбмен
	//|	И (Контрагенты.eXiteПодтверждениеЗаказа)";
	//Запрос.Текст = ТекстЗапроса;
	//МассивКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	//СписокКонтрагентов = Новый СписокЗначений;
	//СписокКонтрагентов.ЗагрузитьЗначения(МассивКонтрагентов);
	//
	//СписокЗаказовПокупателя.Отбор.Контрагент.Использование = Истина;
	//СписокЗаказовПокупателя.Отбор.Контрагент.ВидСравнения = ВидСравнения.ВСписке;
	//СписокЗаказовПокупателя.Отбор.Контрагент.Значение = СписокКонтрагентов;
	//
	//СписокЗаказовПокупателя.Отбор.Дата.Использование = Истина;
	//СписокЗаказовПокупателя.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
	//СписокЗаказовПокупателя.Отбор.Дата.ЗначениеС = НачалоДня(НачПериода);
	//СписокЗаказовПокупателя.Отбор.Дата.ЗначениеПО = КонецДня(КонПериода);

	//////==recadv
	//СписокПоступленийТоваровУслуг.Отбор.Комментарий.Использование = Истина;
	//СписокПоступленийТоваровУслуг.Отбор.Комментарий.ВидСравнения = ВидСравнения.Содержит;
	//СписокПоступленийТоваровУслуг.Отбор.Комментарий.Значение = "Подтверждено уведомлением об отгрузке из программы eXite";
	//
	//СписокПоступленийТоваровУслуг.Отбор.ПометкаУдаления.Использование = Истина;
	//СписокПоступленийТоваровУслуг.Отбор.ПометкаУдаления.ВидСравнения = ВидСравнения.Равно;
	//СписокПоступленийТоваровУслуг.Отбор.ПометкаУдаления.Значение = Ложь;
	//
	//Запрос = Новый Запрос;
	//ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	Контрагенты.Ссылка КАК Контрагент
	//|ИЗ
	//|	Справочник.Контрагенты КАК Контрагенты
	//|ГДЕ
	//|	Контрагенты.eXiteОбмен";	
	//Запрос.Текст = ТекстЗапроса;
	//МассивКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	//СписокКонтрагентов = Новый СписокЗначений;
	//СписокКонтрагентов.ЗагрузитьЗначения(МассивКонтрагентов);
	//
	//СписокПоступленийТоваровУслуг.Отбор.Контрагент.Использование = Истина;
	//СписокПоступленийТоваровУслуг.Отбор.Контрагент.ВидСравнения = ВидСравнения.ВСписке;
	//СписокПоступленийТоваровУслуг.Отбор.Контрагент.Значение = СписокКонтрагентов;
	//
	//СписокПоступленийТоваровУслуг.Отбор.Дата.Использование = Истина;
	//СписокПоступленийТоваровУслуг.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
	//СписокПоступленийТоваровУслуг.Отбор.Дата.ЗначениеС = НачалоДня(НачПериода);
	//СписокПоступленийТоваровУслуг.Отбор.Дата.ЗначениеПО = КонецДня(КонПериода);	

	//
	////==invoice
	//Запрос = Новый Запрос;
	//ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	Контрагенты.Ссылка КАК Контрагент
	//|ИЗ
	//|	Справочник.Контрагенты КАК Контрагенты
	//|ГДЕ
	//|	Контрагенты.eXiteОбмен
	//|	И (Контрагенты.eXiteСчет)";
	//Запрос.Текст = ТекстЗапроса;
	//МассивКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	//СписокКонтрагентов = Новый СписокЗначений;
	//СписокКонтрагентов.ЗагрузитьЗначения(МассивКонтрагентов);
	//
	//СписокРеализацийУслугДляОтправкиСчета.Отбор.Контрагент.Использование = Истина;
	//СписокРеализацийУслугДляОтправкиСчета.Отбор.Контрагент.ВидСравнения = ВидСравнения.ВСписке;
	//СписокРеализацийУслугДляОтправкиСчета.Отбор.Контрагент.Значение = СписокКонтрагентов;
	//
	//СписокРеализацийУслугДляОтправкиСчета.Отбор.Дата.Использование = Истина;
	//СписокРеализацийУслугДляОтправкиСчета.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
	//СписокРеализацийУслугДляОтправкиСчета.Отбор.Дата.ЗначениеС = НачалоДня(НачПериода);
	//СписокРеализацийУслугДляОтправкиСчета.Отбор.Дата.ЗначениеПО = КонецДня(КонПериода);
	
	
	
	
	//ЭлементыФормы.СтатусПодключения.Заголовок = ?(Сервер = Неопределено, "отключено", "подключено");
	ЭлементыФормы.СтатусFTPСоединение.Заголовок = ?(Сервер = Неопределено, "FTP отключен", "FTP  подключен");
	ЭлементыФормы.СтатусFTPСоединение.ЦветТекста = ?(Сервер = Неопределено, Новый Цвет(255, 0, 0), Новый Цвет(51, 153, 102));
	
	//Для Каждого ТекСтраница Из ЭлементыФормы.ПанельОбработки.Страницы Цикл
	//	Если ТекСтраница.Имя = "FTPConnection" Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	ТекСтраница.Доступность = НЕ (Сервер = Неопределено);
	//КонецЦикла;
	
КонецПроцедуры



//ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТЧИКИ СОБЫТИЙ ИМПОРТА И ЭКСПОРТА

Процедура ОсновныеДействияФормыПолучитьRECADV(Кнопка)
	ПроверитьНаличиеФайлов("RECADV");
КонецПроцедуры

Процедура ЭкcпортPRICAT(Кнопка)
	ОтправитьPRICAT();	
КонецПроцедуры

// Процедура предназначена для проверки наличия файлов PRICAT в каталоге программы eXite
//
// Параметры:
//  отсутствуют
//
Процедура ИмпортPRICAT(Кнопка)
	ПроверитьНаличиеФайлов("PRICAT");	
КонецПроцедуры

// Процедура предназначена для проверки наличия файлов ORDER в каталоге программы eXite
//
// Параметры:
//  отсутствуют
//
Процедура ИмпортORDERS(Кнопка)
	ПроверитьНаличиеФайлов("ORDER");
КонецПроцедуры

Процедура ЭкспортORDRSP(Кнопка)
	
	ПодключитьсяЕслиНеПодключено();
	
	Если ВыбранныеЗаказыПокупателя.Количество() = 0 Тогда
		Предупреждение("Нет выбранных заказов покупателя к отправке!", 15);
		Возврат;
	КонецЕсли;
	
	МассивЗаказовПокупателя = Новый Массив;
	
	Для Каждого ЭлемСоответствия Из ВыбранныеЗаказыПокупателя Цикл
		МассивЗаказовПокупателя.Добавить(ЭлемСоответствия.Ключ.Ссылка);
		ВыбранныеЗаказыПокупателя.Удалить(ЭлемСоответствия.Ключ);
	КонецЦикла;
	
	ЭлементыФормы.СписокЗаказовПокупателя.ОбновитьСтроки();
	
	ОтправитьORDRSP(МассивЗаказовПокупателя);
	
КонецПроцедуры

Процедура ЭкспортDESADV(Кнопка)
	
	ПодключитьсяЕслиНеПодключено();
	
	Если ВыбранныеРеализацииТоваровУслуг.Количество() = 0 Тогда
		Предупреждение("Нет выбранных реализаций товаров услуг к отправке!", 15);
		Возврат;
	КонецЕсли;
	
	МассивРеализацииТоваровУслуг = Новый Массив;
	
	Для Каждого ЭлемСоответствия Из ВыбранныеРеализацииТоваровУслуг Цикл
		МассивРеализацииТоваровУслуг.Добавить(ЭлемСоответствия.Ключ.Ссылка);
		ВыбранныеРеализацииТоваровУслуг.Удалить(ЭлемСоответствия.Ключ);
	КонецЦикла;
	
	ЭлементыФормы.СписокРеализацийУслуг.ОбновитьСтроки();
	
	ОтправитьDESPADV(МассивРеализацииТоваровУслуг);
	
КонецПроцедуры

// Процедура предназначена для проверки наличия файлов RECADV в каталоге программы eXite
//
// Параметры:
//  отсутствуют
//
Процедура ИмпортRECADV(Кнопка)
	ПроверитьНаличиеФайлов("RECADV");
КонецПроцедуры

Процедура ЭкспортINVOICE(Кнопка)
	
	ПодключитьсяЕслиНеПодключено();
	
	Если ВыбранныеРеализацииТоваровУслугДляОтправкиСчета.Количество() = 0 Тогда
		Предупреждение("Нет выбранных реализаций товаров услуг к отправке!", 15);
		Возврат;
	КонецЕсли;
	
	МассивРеализацииТоваровУслугДляОтправкиСчета = Новый Массив;
	
	Для Каждого ЭлемСоответствия Из ВыбранныеРеализацииТоваровУслугДляОтправкиСчета Цикл
		МассивРеализацииТоваровУслугДляОтправкиСчета.Добавить(ЭлемСоответствия.Ключ.Ссылка);
		ВыбранныеРеализацииТоваровУслугДляОтправкиСчета.Удалить(ЭлемСоответствия.Ключ);
	КонецЦикла;
	
	ЭлементыФормы.СписокРеализацийУслугДляОтправкиСчета.ОбновитьСтроки();
	
	ОтправитьINVOICE(МассивРеализацииТоваровУслугДляОтправкиСчета);
	
КонецПроцедуры

Процедура FTPConnection(Кнопка)
	
	Сервер = ПолучитьFTPСоединение();
	
	Обновить();
	
КонецПроцедуры

Процедура ЭкспортRECADV(Кнопка)
	
	ПодключитьсяЕслиНеПодключено();
	
	Если ВыбранныеПоступленияТоваровУслуг.Количество() = 0 Тогда
		Предупреждение("Нет выбранных заказов поставщику к отправке!", 15);
		Возврат;
	КонецЕсли;
	
	МассивПоступленийТоваровУслуг = Новый Массив;
	
	Для Каждого ЭлемСоответствия Из ВыбранныеПоступленияТоваровУслуг Цикл
		МассивПоступленийТоваровУслуг.Добавить(ЭлемСоответствия.Ключ.Ссылка);
		ВыбранныеПоступленияТоваровУслуг.Удалить(ЭлемСоответствия.Ключ);
	КонецЦикла;
	
	ЭлементыФормы.СписокПоступленийТоваровУслуг.ОбновитьСтроки();
	
	ОтправитьRECADV(МассивПоступленийТоваровУслуг);
	
КонецПроцедуры

Процедура ИмпортDESADV(Кнопка)
	ПроверитьНаличиеФайлов("DESADV");
КонецПроцедуры

Процедура ИмпортORDRSP(Кнопка)
	ПроверитьНаличиеФайлов("ORDRSP");
КонецПроцедуры

Процедура ИмпортINVOICE(Кнопка)
	ПроверитьНаличиеФайлов("INVOICE");
КонецПроцедуры

Процедура ЭкспортORDERS(Кнопка)
	
	ПодключитьсяЕслиНеПодключено();
	
	Если ВыбранныеЗаказыПоставщику.Количество() = 0 Тогда
		Предупреждение("Нет выбранных поступлений товаров услуг к отправке!", 15);
		Возврат;
	КонецЕсли;
	
	МассивЗаказовПоставщику = Новый Массив;
	
	Для Каждого ЭлемСоответствия Из ВыбранныеЗаказыПоставщику Цикл
		МассивЗаказовПоставщику.Добавить(ЭлемСоответствия.Ключ.Ссылка);
		ВыбранныеЗаказыПоставщику.Удалить(ЭлемСоответствия.Ключ);
	КонецЦикла;
	
	ЭлементыФормы.СписокЗаказовПоставщику.ОбновитьСтроки();
	
	ОтправитьORDERS(МассивЗаказовПоставщику);
	
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	НачПериода = НастройкаПериода.ПолучитьДатуНачала();
	КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
КонецПроцедуры

Процедура КоманднаяПанельORDERSЗагрузитьЗаказыИзКаталога(Кнопка)
	пЗагрузитьИзКаталога = Истина;
	ПроверитьНаличиеФайлов("ORDER");
КонецПроцедуры



ВыбранныеРеализацииТоваровУслуг = Новый Соответствие;
ВыбранныеРеализацииТоваровУслугДляОтправкиСчета = Новый Соответствие;

ВыбранныеПоступленияТоваровУслуг = Новый Соответствие;
ВыбранныеЗаказыПокупателя = Новый Соответствие;
ВыбранныеЗаказыПоставщику = Новый Соответствие;

УстановитьПометкиДляВсехРеализацияТоваровУслуг = Ложь;
УдалитьПометкиДляВсехРеализацияТоваровУслуг = Ложь;

УстановитьПометкиДляВсехРеализацияТоваровУслугДляОтправкиСчета = Ложь;
УдалитьПометкиДляВсехРеализацияТоваровУслугДляОтправкиСчета = Ложь;

УстановитьПометкиДляВсехПоступленийТоваровУслуг = Ложь;
УдалитьПометкиДляВсехПоступленийТоваровУслуг = Ложь;

УстановитьПометкиДляВсехЗаказПокупателя = Ложь;
УдалитьПометкиДляВсехЗаказПокупателя = Ложь;

УстановитьПометкиДляВсехЗаказовПоставщику = Ложь;
УдалитьПометкиДляВсехЗаказовПоставщику = Ложь;
