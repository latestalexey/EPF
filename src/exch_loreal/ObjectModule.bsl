// Версия v1.1.18 от 2015/06/08

Перем Запрос Экспорт;
Перем ДатаВыгрузкиОтчета Экспорт;
Перем КодПартнера Экспорт;
Перем СкладПартнера Экспорт;
Перем КонтрагентЛореаль Экспорт;
Перем КодировкаТекстаФайлов Экспорт;
Перем КореннойКаталогFTP Экспорт;
Перем МесячнаяВыгрузка Экспорт;
Перем ЭтоКоррекция Экспорт;
Перем РазделительСтрок Экспорт;
Перем РазделительКолонок Экспорт;
Перем СтарыйГУИД Экспорт;
Перем ПределПопытокСозданияЗаданияПроверки Экспорт;


///////////////////////////////////////////
// ПРОЦЕДУРЫ ИНИЦИАЛИЗАЦИИ

Процедура ИнициализироватьПеременные() Экспорт
	
	КодПартнера = "931023332";						// В системе L'oreal (ТД Шкуренко)
	СкладПартнера = "Y23332_001";					// В системе L'oreal (Бытовая химия)
	КонтрагентЛореаль = Справочники.Контрагенты.НайтиПоКоду("Ц00010932");	// Контрагент "Лореаль РФ ЗАО"
	КореннойКаталогFTP = "/";
	
	КодировкаТекстаФайлов = КодировкаТекста.UTF8;	//
	РазделительСтрок = Символы.ПС;					// CR+LF
	//РазделительСтрок = Символы.ВК + Символы.ПС;
	РазделительКолонок = Символы.Таб;				// Символ табуляции
	
	МесячнаяВыгрузка = ?(МесячнаяВыгрузка=Неопределено,Ложь,МесячнаяВыгрузка);
	ЭтоКоррекция = ?(ЭтоКоррекция=Неопределено,Ложь,ЭтоКоррекция);
	СтарыйГУИД = ?(СтарыйГУИД=Неопределено,"",СтарыйГУИД);
	
	ПределПопытокСозданияЗаданияПроверки = 5;		// Максимальное количество попыток проверки ответа на выгрузку,
													// 	после которого считается, что ответ не поступил.
	
КонецПроцедуры

Функция ИнициализироватьПодключениеFTP(Хост=Неопределено,Логин=Неопределено,Пароль=Неопределено) Экспорт
	
	Хост = ?(ЗначениеЗаполнено(Хост),Хост,"");
	Логин = ?(ЗначениеЗаполнено(Логин),Логин,"");
	Пароль = ?(ЗначениеЗаполнено(Пароль),Пароль,"");
	
	//Создадим подключение к FTP L'Oreal
	Попытка
		//Прокси = Новый ИнтернетПрокси();
		//Прокси.Пользователь = "#########";
		//Прокси.Пароль = "######";
		//Прокси.Установить("ftp", "192.168.223.254", "3128");
		СоединениеFTP = Новый FTPСоединение(
			Хост,
			,
			Логин,
			Пароль,
			,
			Истина
		);
		Возврат Истина;
	Исключение
		#Если Клиент Тогда
			Сообщить("Не удалось подключится к серверу", СтатусСообщения.ОченьВажное);
			//Сообщить(ОписаниеОшибки());
		#КонецЕсли
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ИнициализироватьВременныеТаблицы() Экспорт
	
	ДатаВыгрузкиОтчета = ТекущаяДата();				// 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|//////////////////////////  ВСЕ ДВИЖЕНИЯ ЗА ПЕРИОД  ////////////////////////////
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыНаСкладах.Период КАК Период,
	|	ЗапасыНаСкладах.Регистратор КАК Регистратор,
	|	ЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	СУММА(ЗапасыНаСкладах.КоличествоОборот) КАК Количество
	|ПОМЕСТИТЬ ВТ_ДвиженияЗапасов
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Обороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		Запись,
	|		(
	|			Номенклатура.ДистрибьюторскийКонтракт В (&СписокКонтрактов)
	|			ИЛИ (Номенклатура.ДистрибьюторскийКонтракт = &ДКРаспродажа И Номенклатура.Родитель = &НГЛореаль)
	|		)
	//|			И Склад В (&СписокСкладов)
	|	) КАК ЗапасыНаСкладах
	|ГДЕ
	|	НЕ ЗапасыНаСкладах.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
	|		И НЕ ЗапасыНаСкладах.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистровНакопления
	|		И НЕ ЗапасыНаСкладах.Регистратор ССЫЛКА Документ.КорректировкаКачестваЗапасов
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыНаСкладах.Период,
	|	ЗапасыНаСкладах.Регистратор,
	|	ЗапасыНаСкладах.Номенклатура
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|////////////////////////  ИНФОРМАЦИЯ ПО НОМЕНКЛАТУРЕ  //////////////////////////
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номенклатура КАК Номенклатура,
	|	ВТ.Номенклатура.Код КАК КодТД,
	|	ВЫРАЗИТЬ(ВТ.Номенклатура.НаименованиеПолное КАК Строка(1024)) КАК НаименованиеТД,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(Соотв.КодНоменклатурыКонтрагента) ЕСТЬ НЕ NULL ТОГДА МАКСИМУМ(Соотв.КодНоменклатурыКонтрагента)
	|		ИНАЧЕ ВТ.Номенклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	//|	ВТ.Номенклатура.Артикул КАК Артикул,
	//|	ВЫБОР
	//|		КОГДА МАКСИМУМ(ШК.ШтрихКод) ЕСТЬ NULL ТОГДА ВТ.Номенклатура.Артикул
	//|		ИНАЧЕ """"
	//|	КОНЕЦ КАК Артикул,
	|	//ВТ.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(Соотв.КодНоменклатурыКонтрагента) ЕСТЬ НЕ NULL ТОГДА МАКСИМУМ(Соотв.ШтрихКодНоменклатурыКонтрагента)
	|		КОГДА МАКСИМУМ(ШК.ШтрихКод) ЕСТЬ НЕ NULL ТОГДА МАКСИМУМ(ШК.ШтрихКод)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ШтрихКод
	|	//ЕСТЬNULL(МАКСИМУМ(ШК.ШтрихКод), """") КАК ШтрихКод
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	ВТ_ДвиженияЗапасов КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				Рег.Номенклатура КАК Номенклатура,
	|				МАКСИМУМ(Рег.Штрихкод) КАК ШтрихКод
	|			ИЗ
	|				РегистрСведений.ШтрихКоды КАК Рег
	|			ГДЕ
	|				Рег.ЕдиницаИзмерения = Рег.Номенклатура.ЕдиницаХраненияОстатков
	|					И ВЫРАЗИТЬ(Рег.ТипШтрихкода.Наименование КАК Строка(6)) = ""EAN-13""
	//|					И Рег.ТипШтрихкода В (&ТипШКEAN13)
	|			СГРУППИРОВАТЬ ПО
	|				Рег.Номенклатура
	|		) КАК ШК
	|			ПО ШК.Номенклатура = ВТ.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КДО_СоответствияНоменклатуры КАК Соотв
	|			ПО ВТ.Номенклатура = Соотв.Номенклатура
	|				И Соотв.СвойствоСоответствия = &АртикулЛореаль
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Номенклатура
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|//////  СООТВЕТСТВИЯ - ""ОСНОВНЫЕ"" ДОКУМЕНТЫ ДЛЯ КАЖДОГО РЕГИСТРАТОРА /////////
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ВТ.Регистратор ССЫЛКА Документ.ОтгрузкаТоваровУслуг
	|			ИЛИ ВТ.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ИЛИ ВТ.Регистратор ССЫЛКА Документ.ОприходованиеТоваров
	|			ИЛИ ВТ.Регистратор ССЫЛКА Документ.СписаниеТоваров
	|			ИЛИ ВТ.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|			ИЛИ ВТ.Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры		// 2015-05-25 by ЭКГ
	|			ТОГДА ВТ.Регистратор
	|		КОГДА ВТ.Регистратор ССЫЛКА Документ.ИнвентаризацияДоставки
	|			ТОГДА ВТ.Регистратор.ДокументОтгрузки
	|		КОГДА ВТ.Регистратор ССЫЛКА Документ.РасходныйСкладскойОрдер
	|			ТОГДА ВТ.Регистратор.ДокументОснование
	|		КОГДА ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	|			И ЕСТЬNULL(ВТ.Регистратор.ДокументОснование.Номер, ""0"") <> ""0""
	|			ТОГДА ВТ.Регистратор.ДокументОснование
	|		КОГДА ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	|			И ПТУПоПСО.ПТУ ЕСТЬ НЕ NULL
	|			ТОГДА ПТУПоПСО.ПТУ
	|		КОГДА ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	|			И ВозвратыПоПСО.Возврат ЕСТЬ НЕ NULL
	|			ТОГДА ВозвратыПоПСО.Возврат
	|		ИНАЧЕ ВТ.Регистратор
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	МИНИМУМ(ВТ.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_СоответствияРегистраторовЗаказам
	|ИЗ
	|	ВТ_ДвиженияЗапасов КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				Товары.ПриходныйОрдер,
	|				МАКСИМУМ(Товары.Ссылка) КАК ПТУ
	|			ИЗ
	|				Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|			СГРУППИРОВАТЬ ПО
	|				Товары.ПриходныйОрдер
	|		) КАК ПТУПоПСО
	|			ПО ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	|				И ВТ.Регистратор = ПТУПоПСО.ПриходныйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				Товары.ПриходныйОрдер,
	|				МАКСИМУМ(Товары.Ссылка) КАК Возврат
	|			ИЗ
	|				Документ.ВозвратТоваровОтПокупателя.Товары КАК Товары
	|			СГРУППИРОВАТЬ ПО
	|				Товары.ПриходныйОрдер
	|		) КАК ВозвратыПоПСО
	|			ПО ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	|				И ВТ.Регистратор = ВозвратыПоПСО.ПриходныйОрдер
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Регистратор,
	|	ВЫБОР
	|		КОГДА ВТ.Регистратор ССЫЛКА Документ.ОтгрузкаТоваровУслуг
	|			ИЛИ ВТ.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ИЛИ ВТ.Регистратор ССЫЛКА Документ.ОприходованиеТоваров
	|			ИЛИ ВТ.Регистратор ССЫЛКА Документ.СписаниеТоваров
	|			ИЛИ ВТ.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|			ИЛИ ВТ.Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры		// 2015-05-25 by ЭКГ
	|			ТОГДА ВТ.Регистратор
	|		КОГДА ВТ.Регистратор ССЫЛКА Документ.ИнвентаризацияДоставки
	|			ТОГДА ВТ.Регистратор.ДокументОтгрузки
	|		КОГДА ВТ.Регистратор ССЫЛКА Документ.РасходныйСкладскойОрдер
	|			ТОГДА ВТ.Регистратор.ДокументОснование
	|		КОГДА ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	|			И ЕСТЬNULL(ВТ.Регистратор.ДокументОснование.Номер, ""0"") <> ""0""
	|			ТОГДА ВТ.Регистратор.ДокументОснование
	|		КОГДА ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	|			И ПТУПоПСО.ПТУ ЕСТЬ НЕ NULL
	|			ТОГДА ПТУПоПСО.ПТУ
	|		КОГДА ВТ.Регистратор ССЫЛКА Документ.ПриходныйСкладскойОрдер
	|			И ВозвратыПоПСО.Возврат ЕСТЬ НЕ NULL
	|			ТОГДА ВозвратыПоПСО.Возврат
	|		ИНАЧЕ ВТ.Регистратор
	|	КОНЕЦ	
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|////////////////  ПОЛНАЯ ТАБЛИЦА С ИНФОРМАЦИЕЙ ПО ДВИЖЕНИЯМ  ///////////////////
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.ЗаказПокупателя								КАК ДокументСсылка,
	|	Документы.ЗаказПокупателя.Контрагент					КАК Контрагент,
	|	Документы.ЗаказПокупателя.СтруктурнаяЕдиницаКонтрагента	КАК СтруктурнаяЕдиницаКонтрагента,
	|	Документы.ЗаказПокупателя.Ответственный.ФизЛицо			КАК ТорговыйПредставитель,
	|	Движ.Номенклатура										КАК Номенклатура,
	|	СУММА(ЕСТЬNULL(Движ.Количество, 0))						КАК Количество,			// Важно! В документе может быть неадекват по кол-ву, так что напрямую из регистра
	|	СУММА(ЕСТЬNULL(ТЧ.ЦенаБезНДС, 0))						КАК ЦенаБезНДС,
	|	СУММА(ЕСТЬNULL(ТЧ.ЦенаСНДС, 0))							КАК ЦенаСНДС,
	|	ЕСТЬNULL(ТЧ.СтавкаНДС, &СтавкаБезНДС)					КАК СтавкаНДС,
	|	ТЧ.ЕдиницаИзмерения										КАК ЕдиницаИзмерения,	// Весело и страшно будет, если окажутся две строки товара с разными Ед.Изм
	|	НАЧАЛОПЕРИОДА(Движ.Период,День)							КАК Период,
	|	ВЫБОР
	|		КОГДА Документы.ЗаказПокупателя ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.ОприходованиеТоваров
	|			ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.ОприходованиеТоваров
	|			ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.КомплектацияНоменклатуры
	|			ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.ПриходныйСкладскойОрдер
	//|			ИЛИ (Документы.ЗаказПокупателя ССЫЛКА Документ.ПеремещениеТоваров И Движ.Количество<0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ													КАК Поступление,
	|	ВЫБОР
	|		КОГДА Документы.ЗаказПокупателя ССЫЛКА Документ.ОтгрузкаТоваровУслуг
	|			ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.СписаниеТоваров
	|			ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.ПеремещениеТоваров
	//|			ИЛИ (Документы.ЗаказПокупателя ССЫЛКА Документ.ПеремещениеТоваров И Движ.Количество>0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ													КАК Реализация,
	|	ВЫБОР
	|		КОГДА Документы.ЗаказПокупателя ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.ОтгрузкаТоваровУслуг
	|			ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.ПеремещениеТоваров
	|			ИЛИ Документы.ЗаказПокупателя ССЫЛКА Документ.КомплектацияНоменклатуры
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ													КАК ДобавитьПостфикс
	|ПОМЕСТИТЬ
	|	ВТ_ВсеОтгрузки
	|ИЗ
	|	ВТ_ДвиженияЗапасов КАК Движ
	|		СОЕДИНЕНИЕ ВТ_СоответствияРегистраторовЗаказам КАК Документы
	|			ПО Документы.Регистратор = Движ.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			
	|			ВЫБРАТЬ
	|				ТабЧасть.Ссылка КАК Ссылка,
	|				ТабЧасть.Номенклатура КАК Номенклатура,
	|				СУММА(ТабЧасть.Количество*ТабЧасть.Коэффициент) КАК Количество,
	|				ВЫРАЗИТЬ(
	|					ВЫБОР
	|						КОГДА ТабЧасть.Ссылка.СуммаВключаетНДС ТОГДА СУММА(ТабЧасть.Сумма-ТабЧасть.СуммаНДС)
	|						ИНАЧЕ СУММА(ТабЧасть.Сумма)
	|					КОНЕЦ
	|						/ СУММА(ТабЧасть.Количество*ТабЧасть.Коэффициент)
	|				КАК ЧИСЛО(15,2)) КАК ЦенаБезНДС,
	|				ВЫРАЗИТЬ(
	|					ВЫБОР
	|						КОГДА ТабЧасть.Ссылка.СуммаВключаетНДС ТОГДА СУММА(ТабЧасть.Сумма)
	|						ИНАЧЕ СУММА(ТабЧасть.Сумма+ТабЧасть.СуммаНДС)
	|					КОНЕЦ
	|						/ СУММА(ТабЧасть.Количество*ТабЧасть.Коэффициент)
	|				КАК ЧИСЛО(15,2)) КАК ЦенаСНДС,
	|				МАКСИМУМ(ТабЧасть.СтавкаНДС) КАК СтавкаНДС,
	|				МАКСИМУМ(ТабЧасть.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|				Истина КАК ЭтоПродажа
	|			ИЗ
	|				Документ.ОтгрузкаТоваровУслуг.Товары КАК ТабЧасть
	|			СГРУППИРОВАТЬ ПО
	|				ТабЧасть.Ссылка,
	|				ТабЧасть.Номенклатура
	|				
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ТабЧасть.Ссылка КАК Ссылка,
	|				ТабЧасть.Номенклатура КАК Номенклатура,
	|				СУММА(ТабЧасть.Количество*ТабЧасть.Коэффициент) КАК Количество,
	|				ВЫРАЗИТЬ(
	|					ВЫБОР
	|						КОГДА ТабЧасть.Ссылка.СуммаВключаетНДС ТОГДА СУММА(ТабЧасть.Сумма-ТабЧасть.СуммаНДС)
	|						ИНАЧЕ СУММА(ТабЧасть.Сумма)
	|					КОНЕЦ
	|						/ СУММА(ТабЧасть.Количество*ТабЧасть.Коэффициент)
	|				КАК ЧИСЛО(15,2)) КАК ЦенаБезНДС,
	|				ВЫРАЗИТЬ(
	|					ВЫБОР
	|						КОГДА ТабЧасть.Ссылка.СуммаВключаетНДС ТОГДА СУММА(ТабЧасть.Сумма)
	|						ИНАЧЕ СУММА(ТабЧасть.Сумма+ТабЧасть.СуммаНДС)
	|					КОНЕЦ
	|						/ СУММА(ТабЧасть.Количество*ТабЧасть.Коэффициент)
	|				КАК ЧИСЛО(15,2)) КАК ЦенаСНДС,
	|				МАКСИМУМ(ТабЧасть.СтавкаНДС) КАК СтавкаНДС,
	|				МАКСИМУМ(ТабЧасть.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|				Ложь КАК ЭтоПродажа
	|			ИЗ
	|				Документ.ПоступлениеТоваровУслуг.Товары КАК ТабЧасть
	|			СГРУППИРОВАТЬ ПО
	|				ТабЧасть.Ссылка,
	|				ТабЧасть.Номенклатура
	|				
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ТабЧасть.Ссылка КАК Ссылка,
	|				ТабЧасть.Номенклатура КАК Номенклатура,
	|				СУММА(ТабЧасть.Количество*ТабЧасть.Коэффициент) КАК Количество,
	|				ВЫРАЗИТЬ(
	|					ВЫБОР
	|						КОГДА ТабЧасть.Ссылка.СуммаВключаетНДС ТОГДА СУММА(ТабЧасть.Сумма-ТабЧасть.СуммаНДС)
	|						ИНАЧЕ СУММА(ТабЧасть.Сумма)
	|					КОНЕЦ
	|						/ СУММА(ТабЧасть.Количество*ТабЧасть.Коэффициент)
	|				КАК ЧИСЛО(15,2)) КАК ЦенаБезНДС,
	|				ВЫРАЗИТЬ(
	|					ВЫБОР
	|						КОГДА ТабЧасть.Ссылка.СуммаВключаетНДС ТОГДА СУММА(ТабЧасть.Сумма)
	|						ИНАЧЕ СУММА(ТабЧасть.Сумма+ТабЧасть.СуммаНДС)
	|					КОНЕЦ
	|						/ СУММА(ТабЧасть.Количество*ТабЧасть.Коэффициент)
	|				КАК ЧИСЛО(15,2)) КАК ЦенаСНДС,
	|				МАКСИМУМ(ТабЧасть.СтавкаНДС) КАК СтавкаНДС,
	|				МАКСИМУМ(ТабЧасть.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|				Истина КАК ЭтоПродажа
	|			ИЗ
	|				Документ.ВозвратТоваровОтПокупателя.Товары КАК ТабЧасть
	|			СГРУППИРОВАТЬ ПО
	|				ТабЧасть.Ссылка,
	|				ТабЧасть.Номенклатура
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
    |
	|			ВЫБРАТЬ
	|				ТабЧасть.Ссылка КАК Ссылка,
	|				ТабЧасть.Номенклатура КАК Номенклатура,
	|				СУММА(ТабЧасть.Количество*ТабЧасть.Коэффициент) КАК Количество,
	|				ВЫРАЗИТЬ(
	|					ВЫБОР
	|						КОГДА ТабЧасть.Ссылка.СуммаВключаетНДС ТОГДА СУММА(ТабЧасть.Сумма-ТабЧасть.СуммаНДС)
	|						ИНАЧЕ СУММА(ТабЧасть.Сумма)
	|					КОНЕЦ
	|						/ СУММА(ТабЧасть.Количество*ТабЧасть.Коэффициент)
	|				КАК ЧИСЛО(15,2)) КАК ЦенаБезНДС,
	|				ВЫРАЗИТЬ(
	|					ВЫБОР
	|						КОГДА ТабЧасть.Ссылка.СуммаВключаетНДС ТОГДА СУММА(ТабЧасть.Сумма)
	|						ИНАЧЕ СУММА(ТабЧасть.Сумма+ТабЧасть.СуммаНДС)
	|					КОНЕЦ
	|						/ СУММА(ТабЧасть.Количество*ТабЧасть.Коэффициент)
	|				КАК ЧИСЛО(15,2)) КАК ЦенаСНДС,
	|				МАКСИМУМ(ТабЧасть.СтавкаНДС) КАК СтавкаНДС,
	|				МАКСИМУМ(ТабЧасть.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|				Ложь КАК ЭтоПродажа
	|			ИЗ
	|				Документ.ВозвратТоваровПоставщику.Товары КАК ТабЧасть
	|			СГРУППИРОВАТЬ ПО
	|				ТабЧасть.Ссылка,
	|				ТабЧасть.Номенклатура
	|			
	|		) КАК ТЧ
	|			ПО ТЧ.Ссылка = Документы.ЗаказПокупателя
	|				И ТЧ.Номенклатура = Движ.Номенклатура
	//|ГДЕ
	//|	НЕ Документы.ЗаказПокупателя ССЫЛКА Документ.ПеремещениеТоваров
	|СГРУППИРОВАТЬ ПО
	|	Документы.ЗаказПокупателя,
	|	Движ.Номенклатура,
	|	ЕСТЬNULL(ТЧ.СтавкаНДС, &СтавкаБезНДС),
	|	ТЧ.ЕдиницаИзмерения,
	|	НАЧАЛОПЕРИОДА(Движ.Период,День)
	//|ИМЕЮЩИЕ
	//|	СУММА(Движ.Количество)<>0
	//|		ИЛИ СУММА(ЕСТЬNULL(ТЧ.ЦенаБезНДС,0))<>0
	//|		ИЛИ СУММА(ЕСТЬNULL(ТЧ.ЦенаСНДС,0))<>0
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументСсылка,
	|	Контрагент,
	|	СтруктурнаяЕдиницаКонтрагента,
	|	ТорговыйПредставитель,
	|	Номенклатура
	|;
	|
	|УНИЧТОЖИТЬ ВТ_ДвиженияЗапасов;
	|
	|";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонПериода));
	МассивКонтрактов = Новый Массив;
	МассивКонтрактов.Добавить(Справочники.ДистрибьюторскиеКонтракты.НайтиПоКоду("Ц00482")); // "L'OREAL"
	МассивКонтрактов.Добавить(Справочники.ДистрибьюторскиеКонтракты.НайтиПоКоду("Ц00486")); // "ЛОРЕАЛЬ"
	Запрос.УстановитьПараметр("СписокКонтрактов", МассивКонтрактов);
	Запрос.УстановитьПараметр("Ставка10НДС", Перечисления.СтавкиНДС.НДС10);
	Запрос.УстановитьПараметр("Ставка18НДС", Перечисления.СтавкиНДС.НДС18);
	Запрос.УстановитьПараметр("СтавкаБезНДС", Перечисления.СтавкиНДС.БезНДС);
	//Запрос.УстановитьПараметр("ТипШКEAN13", ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
	Запрос.УстановитьПараметр("АртикулЛореаль", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("000187"));
	Запрос.УстановитьПараметр("КонтрагентЛореаль", КонтрагентЛореаль);
	Запрос.УстановитьПараметр("ПустаяТТ", Справочники.СтруктурныеЕдиницыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяАкция", Справочники.АкцииПродаж.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидАдресСтруктурнойЕдиницы", Справочники.ВидыКонтактнойИнформации.АдресСтруктурнойЕдиницыКонтрагента);
	Запрос.УстановитьПараметр("ВидАдресДоставкиКонтрагента", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Запрос.УстановитьПараметр("ВидАдресТранссибирская", Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("Ц00003"));
	Запрос.УстановитьПараметр("ТипЦенЗакуп", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("О00001"));
	Запрос.УстановитьПараметр("ТипЦенНал", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("О00002"));
	// 2015-05-26 by ЭКГ
	Запрос.УстановитьПараметр("ДКРаспродажа", Справочники.ДистрибьюторскиеКонтракты.НайтиПоКоду("Ц00614")); // Распродажа
	Запрос.УстановитьПараметр("НГЛореаль", Справочники.Номенклатура.НайтиПоКоду("Ц00057816"));	// группа номенклатуры "ЛОРЕАЛЬ"
	
	Запрос.Выполнить();
	//а = 1;
КонецПроцедуры



///////////////////////////////////////////
// РЕАЛИЗАЦИЯ ОСНОВНОГО ФУНКЦИОНАЛА

Процедура ВыгрузитьОтчеты(НаFTP=Ложь,КаталогВыгрузки=Неопределено,СписокИсключаемых=Неопределено) Экспорт
	
	Перем ВыгружатьПоступления, ВыгружатьРеализации, ВыгружатьОстатки;

	Если НЕ ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		КаталогВыгрузки = КаталогВременныхФайлов();
	КонецЕсли;
	
	ВыгружатьПоступления = Истина;
	ВыгружатьРеализации = Истина;
	ВыгружатьОстатки = Истина;
	Если ТипЗнч(СписокИсключаемых)=Тип("СписокЗначений") Тогда
		ВыгружатьПоступления=(СписокИсключаемых.НайтиПоЗначению("INVOICIN")=Неопределено);
		ВыгружатьРеализации=(СписокИсключаемых.НайтиПоЗначению("INVOIC")=Неопределено);
		ВыгружатьОстатки=(СписокИсключаемых.НайтиПоЗначению("INVRPT")=Неопределено);
	КонецЕсли;
	
	// Если ничего не надо выгружать, то не стоит продолжать
	Если НЕ ВыгружатьПоступления И НЕ ВыгружатьРеализации И НЕ ВыгружатьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	Если НаFTP Тогда
		// Попробуем установить соединение с FTP-сервером
		Удача = ИнициализироватьПодключениеFTP();
		Если НЕ Удача Тогда
			ВызватьИсключение "Не удалось установить подключение к серверу FTP!";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИнициализироватьПеременные();
	ИнициализироватьВременныеТаблицы();
	
	НовыйГУИД = ВРег(Строка(Новый УникальныйИдентификатор()));

	// Выгрузка поступлений
	Если ВыгружатьПоступления Тогда
		СтрОтчет = ВыгрузитьОтчетПоПоступлению(НовыйГУИД,КаталогВыгрузки);
		ПолноеИмяФайлаПоступлений = СтрОтчет.ИмяФайла;
		Если НаFTP Тогда
			ФайлОтчетаПоступлений = Новый Файл(ПолноеИмяФайлаПоступлений);
			Если ФайлОтчетаПоступлений.Существует() Тогда
				Попытка
					СоединениеFTP.Записать(
						ПолноеИмяФайлаПоступлений,
						КореннойКаталогFTP + "/INVOICIN/" + ФайлОтчетаПоступлений.Имя
					);
					СоединениеFTP.Записать(
						ПолноеИмяФайлаПоступлений,
						КореннойКаталогFTP + "/INVOICIN/Processed/" + ФайлОтчетаПоступлений.Имя
					);
					СоздатьРегламентноеЗадание(СтрОтчет.ГУИД, "INVOICIN", 0, 1, 50400); // на 14 часов вперед, т.к. Лореаль не успевает обрабатывать
				Исключение
					#Если Клиент Тогда
						Сообщить(Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'") + ": Не удалось загрузить файл эл. накладной " + ФайлОтчетаПоступлений.Имя + " на FTP-сервер!");
					#КонецЕсли
				КонецПопытки;
				УдалитьФайлы(ПолноеИмяФайлаПоступлений);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Выгрузка реализации
	Если ВыгружатьРеализации Тогда
		СтрОтчет = ВыгрузитьОтчетПоРеализации(НовыйГУИД,КаталогВыгрузки);
		ПолноеИмяФайлаРеализации = СтрОтчет.ИмяФайла;
		Если НаFTP Тогда
			ФайлОтчетаРеализации = Новый Файл(ПолноеИмяФайлаРеализации);
			Если ФайлОтчетаРеализации.Существует() Тогда
				Попытка
					СоединениеFTP.Записать(
						ПолноеИмяФайлаРеализации,
						КореннойКаталогFTP + "/INVOIC/" + ФайлОтчетаРеализации.Имя
					);
					СоединениеFTP.Записать(
						ПолноеИмяФайлаРеализации,
						КореннойКаталогFTP + "/INVOIC/Processed/" + ФайлОтчетаРеализации.Имя
					);
					СоздатьРегламентноеЗадание(СтрОтчет.ГУИД, "INVOIC", 0, 1, 50400); // на 14 часов вперед, т.к. Лореаль не успевает обрабатывать
				Исключение
					#Если Клиент Тогда
						Сообщить(Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'") + ": Не удалось загрузить файл эл. накладной " + ФайлОтчетаРеализации.Имя + " на FTP-сервер!");
					#КонецЕсли
				КонецПопытки;
				УдалитьФайлы(ПолноеИмяФайлаРеализации);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Выгрузка остатков
	Если ВыгружатьОстатки Тогда
		СтрОтчет = ВыгрузитьОтчетПоОстаткам(НовыйГУИД,КаталогВыгрузки);
		ПолноеИмяФайлаОстатков = СтрОтчет.ИмяФайла;
		Если НаFTP Тогда
			ФайлОтчетаОстатков = Новый Файл(ПолноеИмяФайлаОстатков);
			Если ФайлОтчетаОстатков.Существует() Тогда
				Попытка
					СоединениеFTP.Записать(
						ПолноеИмяФайлаОстатков,
						КореннойКаталогFTP + "/INVRPT/" + ФайлОтчетаОстатков.Имя
					);
					СоединениеFTP.Записать(
						ПолноеИмяФайлаОстатков,
						КореннойКаталогFTP + "/INVRPT/Processed/" + ФайлОтчетаОстатков.Имя
					);
					СоздатьРегламентноеЗадание(СтрОтчет.ГУИД, "INVRPT", 0, 1, 50400); // на 14 часов вперед, т.к. Лореаль не успевает обрабатывать
				Исключение
					#Если Клиент Тогда
						Сообщить(Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'") + ": Не удалось загрузить файл эл. накладной " + ФайлОтчетаОстатков.Имя + " на FTP-сервер!");
					#КонецЕсли
				КонецПопытки;
				УдалитьФайлы(ПолноеИмяФайлаОстатков);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьОтчетПоПоступлению(ГУИД=Неопределено,КаталогВыгрузки=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		КаталогВыгрузки = КаталогВременныхФайлов();
	КонецЕсли;
	
	// ДЕЙСТВИЯ ПО ВЫГРУЗКЕ ПОСТУПЛЕНИЙ
	ГУИДПоступлений = ?(ГУИД=Неопределено,ВРег(Строка(Новый УникальныйИдентификатор())),ГУИД);
	//ГУИДПоступлений = ?(ЭтоКоррекция,СтарыйГУИД,ВРег(Строка(Новый УникальныйИдентификатор())));
	ИмяФайлаПоступлений = "INVOICIN_"+КодПартнера+"_"+ГУИДПоступлений+".txt";
	ПолноеИмяФайлаПоступлений = КаталогВыгрузки + "\" + ИмяФайлаПоступлений;
	Текст = Новый ЗаписьТекста(ПолноеИмяФайлаПоступлений, КодировкаТекстаФайлов, РазделительСтрок);
	
	// Сегмент общей информации
	СтрокаСегмента =
		"G"											+ РазделительКолонок	// Тип сегмента (Segment type)
		+ Формат(ДатаВыгрузкиОтчета,"ДФ=гггг")		+ РазделительКолонок	// Год (Year)
		+ КодПартнера								+ РазделительКолонок	// Код партнера в системе L’Oreal (Partner Code)
		+ ГУИДПоступлений							+ РазделительКолонок	// GUID (GUID identification)
		+ "INVOICIN"								+ РазделительКолонок	// Название сообщения (Message name)
		+ ?(МесячнаяВыгрузка,"MONTHLY","DAILY")		+ РазделительКолонок	// Временной период пакета (Data package period)
		+ "FTP"										+ РазделительКолонок	// Протокол передачи данных (Protocol)
		+ Формат(ДатаВыгрузкиОтчета,"ДФ=ггггММ")	+ РазделительКолонок	// Месяц статистики (Month)
		+ Формат(ДатаВыгрузкиОтчета,"ДФ=ггггММдд")	+ РазделительКолонок	// День статистики (Day)
		+ ?(ЭтоКоррекция,"COR","REG")				+ РазделительКолонок	// Тип отправляемых данных (Data package type)
		+ СтарыйГУИД								+ РазделительКолонок	// GUID предыдущего сообщения (GUID identification (2))
		+ "SENT"															// Статус обработки сообщения (Process status)
	;
	Текст.ЗаписатьСтроку(СтрокаСегмента);
	
	// Сегмент заглавий
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движ.ДокументСсылка,
	|	ВЫБОР
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.КомплектацияНоменклатуры ТОГДА ""КПН""
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ПриходныйСкладскойОрдер ТОГДА ""ПСО""
	|		ИНАЧЕ """"
	|	КОНЕЦ +
	|		ВЫБОР
	|			КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|				ТОГДА ДокПТУ.НомерВходящегоДокумента
	|			ИНАЧЕ Движ.ДокументСсылка.Номер
	|		КОНЕЦ	КАК НомерДокумента,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ТОГДА ДокПТУ.ДатаВходящегоДокумента
	|		ИНАЧЕ Движ.ДокументСсылка.Дата
	|	КОНЕЦ, День) КАК ДатаДокумента,
	|	НАЧАЛОПЕРИОДА(Движ.Период, День) КАК ДатаДвижения,
	|	Движ.ДобавитьПостфикс КАК ДобавитьПостфикс
	|ИЗ
	|	ВТ_ВсеОтгрузки КАК Движ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ДокПТУ
	|			ПО Движ.ДокументСсылка ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|				И Движ.ДокументСсылка = ДокПТУ.Ссылка
	|ГДЕ
	|	Движ.Поступление
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДвижения ВОЗР, ДобавитьПостфикс УБЫВ, НомерДокумента ВОЗР
	|";
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		СтрокаСегмента =
			"H"											+ РазделительКолонок	// [01] Тип сегмента (Segment type)
			+ СкладПартнера								+ РазделительКолонок	// [02] Код склада партнера (Partner Warehouse Code)
			+ СокрП(Выб.НомерДокумента) + ?(Выб.ДобавитьПостфикс,"_"+Формат(Выб.ДатаДвижения,"ДФ=yyyyMMdd"),"") + РазделительКолонок	// [03] Номер приходованной накладной (Invoice Number assigned by document sender)
			+ ""										+ РазделительКолонок	// [04] Код склада, переместившего товар (Parent Warehouse code)
			+ Формат(Выб.ДатаДвижения,"ДФ=yyyyMMdd")	+ РазделительКолонок	// [05] Дата оприходования продукции (Invoice posting date)					
			+ "IN"										+ РазделительКолонок	// [06] Тип накладной / счета-фактуры (Document type)
			+ "R"																// [07] Статус документа (Document status)
		;
		Текст.ЗаписатьСтроку(СтрокаСегмента);
	КонецЦикла;
	
	// Сегмент позиций (детализация)
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Движ.ДокументСсылка,
	|	ВЫБОР
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.КомплектацияНоменклатуры ТОГДА ""КПН""
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ПриходныйСкладскойОрдер ТОГДА ""ПСО""
	|		ИНАЧЕ """"
	|	КОНЕЦ +
	|		ВЫБОР
	|			КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|				ТОГДА ДокПТУ.НомерВходящегоДокумента
	|			ИНАЧЕ Движ.ДокументСсылка.Номер
	|		КОНЕЦ	КАК НомерДокумента,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ТОГДА ДокПТУ.ДатаВходящегоДокумента
	|		ИНАЧЕ Движ.ДокументСсылка.Дата
	|	КОНЕЦ, День) КАК ДатаДокумента,
	|	НАЧАЛОПЕРИОДА(Движ.Период, День) КАК ДатаДвижения,
	|	Движ.ДобавитьПостфикс КАК ДобавитьПостфикс,
	|	ВЫБОР
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ПоступлениеТоваровУслуг И Движ.Контрагент = &КонтрагентЛореаль
	|			ТОГДА ""LOR""
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ТОГДА ""DST""
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ВозвратТоваровПоставщику И Движ.Контрагент = &КонтрагентЛореаль
	|			ТОГДА ""LRR""
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ""ITR""
	|		ИНАЧЕ ""SCR""
	|	КОНЕЦ КАК ТипПрихода,
	|	Номенкл.КодТД КАК КодТовара,
	|	Номенкл.Артикул КАК КодМатериала,
	|	Номенкл.Штрихкод КАК ШтрихКод,
	|	Движ.Количество КАК Количество,
	|	Движ.ЦенаБезНДС*Движ.Количество КАК СуммаБезНДС,
	|	Движ.ЦенаСНДС*Движ.Количество КАК СуммаСНДС
	|ИЗ
	|	ВТ_ВсеОтгрузки КАК Движ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК Номенкл
	|			ПО Движ.Номенклатура = Номенкл.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ДокПТУ
	|			ПО Движ.ДокументСсылка ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|				И Движ.ДокументСсылка = ДокПТУ.Ссылка
	|ГДЕ
	|	Движ.Поступление
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДвижения ВОЗР, ДобавитьПостфикс УБЫВ, НомерДокумента, ДокументСсылка, Движ.Номенклатура, Движ.Количество, ДатаДвижения ВОЗР
	|";
	Выб = Запрос.Выполнить().Выбрать();
	лПредДок = Неопределено;
	лНомерСтроки = 0;
	Пока Выб.Следующий() Цикл
		Если Выб.ДокументСсылка <> лПредДок Тогда
			лПредДок = Выб.ДокументСсылка;
			лНомерСтроки = 1;
		КонецЕсли;
		СтрокаСегмента =
			"I"											+ РазделительКолонок	// [01] Тип сегмента (Segment type)
			+ СкладПартнера								+ РазделительКолонок	// [02] Код склада партнера (Partner Warehouse Code)
		    + СокрП(Выб.НомерДокумента) + ?(Выб.ДобавитьПостфикс,"_"+Формат(Выб.ДатаДвижения,"ДФ=yyyyMMdd"),"") + РазделительКолонок // [03] Номер приходованной накладной (Invoice Number assigned by document sender)
			+ СокрП(Выб.КодТовара)						+ РазделительКолонок	// [04] Код материала ERP (ERP material code)
			+ Выб.ТипПрихода							+ РазделительКолонок	// [05] Тип прихода (Posting type)
			+ "NR"										+ РазделительКолонок	// [06] Тип продукта (Complex Products)
			+ Формат(лНомерСтроки,"ЧГ=;ЧН=")			+ РазделительКолонок	// [07] Номер позиции (Invoice position number)
			+ Выб.КодМатериала							+ РазделительКолонок	// [08] Код материала L’Oreal (L’Oreal material code)
			+ Выб.Штрихкод								+ РазделительКолонок	// [09] EAN код материала (EAN material code)
			+ Формат(Выб.Количество,"ЧГ=;ЧН=")			+ РазделительКолонок	// [10] Заказанное кол-во по позиции заказа (Invoice Item Quantity)
			+ "UN"										+ РазделительКолонок	// [11] Базисная единица измерения (Unit of measure)
			+ Формат(Выб.СуммаБезНДС,"ЧРД=,;ЧН=;ЧГ=")	+ РазделительКолонок	// [12] Общая стоим. позиции сч/ф с уч. всех скидок клиента (без НДС) (Net Item value (without Tax))
			+ Формат(Выб.СуммаСНДС,"ЧРД=,;ЧН=;ЧГ=")		+ РазделительКолонок	// [13] Общая стоим. позиции сч/ф с уч. всех скидок клиента (с НДС) (Net Item value (with Tax))
			+ Формат(Выб.СуммаСНДС,"ЧРД=,;ЧН=;ЧГ=")		+ РазделительКолонок	// [14] Общая стоим. позиции по закуп. у поставщика тарифам (c НДС) (Supplier’s Item value (with Tax))
			+ "RUR"																// [15] Eдиница измерения для денежных полей (Unit of measure for monetary terms)
		;
		Текст.ЗаписатьСтроку(СтрокаСегмента);
		лНомерСтроки = лНомерСтроки + 1;
	КонецЦикла;
	
	Текст.Закрыть();

	Возврат Новый Структура("ИмяФайла,ГУИД",ПолноеИмяФайлаПоступлений,ГУИДПоступлений);
	
КонецФункции

Функция ВыгрузитьОтчетПоРеализации(ГУИД=Неопределено,КаталогВыгрузки=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		КаталогВыгрузки = КаталогВременныхФайлов();
	КонецЕсли;
	
	// ДЕЙСТВИЯ ПО ВЫГРУЗКЕ РЕАЛИЗАЦИИ
	ГУИДРеализации = ?(ГУИД=Неопределено,ВРег(Строка(Новый УникальныйИдентификатор())),ГУИД);;
	//ГУИДРеализации = ?(ЭтоКоррекция,СтарыйГУИД,ВРег(Строка(Новый УникальныйИдентификатор())));
	ИмяФайлаРеализации = "INVOIC_"+КодПартнера+"_"+ГУИДРеализации+".txt";
	ПолноеИмяФайлаРеализации = КаталогВыгрузки + "\" + ИмяФайлаРеализации;
	Текст = Новый ЗаписьТекста(ПолноеИмяФайлаРеализации, КодировкаТекстаФайлов, РазделительСтрок);
	
	// Сегмент общей информации
	СтрокаСегмента =
		"G"											+ РазделительКолонок	// [01] Тип сегмента (Segment type)
		+ Формат(ДатаВыгрузкиОтчета,"ДФ=гггг")		+ РазделительКолонок	// [02] Год (Year)
		+ КодПартнера								+ РазделительКолонок	// [03] Код партнера в системе L’Oreal (Partner Code)
		+ ГУИДРеализации							+ РазделительКолонок	// [04] GUID (GUID identification)
		+ "INVOIC"									+ РазделительКолонок	// [05] Название сообщения (Message name)
		+ ?(МесячнаяВыгрузка,"MONTHLY","DAILY")		+ РазделительКолонок	// [06] Временной период пакета (Data package period)
		+ "FTP"										+ РазделительКолонок	// [07] Протокол передачи данных (Protocol)
		+ Формат(ДатаВыгрузкиОтчета,"ДФ=ггггММ")	+ РазделительКолонок	// [08] Месяц статистики (Month)
		+ Формат(ДатаВыгрузкиОтчета,"ДФ=ггггММдд")	+ РазделительКолонок	// [09] День статистики (Day)
		+ ?(ЭтоКоррекция,"COR","REG")				+ РазделительКолонок	// [10] Тип отправляемых данных (Data package type)
		+ СтарыйГУИД								+ РазделительКолонок	// [11] GUID предыдущего сообщения (GUID identification (2))
		+ "SENT"															// [12] Статус обработки сообщения (Process status)
	;
	Текст.ЗаписатьСтроку(СтрокаСегмента);
	
	// Сегмент заглавий
	Запрос.Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|//////////////////  ТАБЛИЦА ТОРГОВЫХ ТОЧЕК ИЗ РЕАЛИЗАЦИИ  //////////////////////
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВТ.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(ВТ.СтруктурнаяЕдиницаКонтрагента КАК Справочник.СтруктурныеЕдиницыКонтрагентов) КАК СтруктурнаяЕдиницаКонтрагента,
	|	МАКСИМУМ(ВТ.ТорговыйПредставитель) КАК ТорговыйПредставитель,
	|	ВТ.Контрагент.Код + ВЫБОР КОГДА ВТ.СтруктурнаяЕдиницаКонтрагента.Код ЕСТЬ NULL ТОГДА """" ИНАЧЕ ""-"" + ВТ.СтруктурнаяЕдиницаКонтрагента.Код КОНЕЦ КАК КодТТ,
	|	ПОДСТРОКА(ВТ.Контрагент.Наименование, 1, 200) + ВЫБОР КОГДА ВТ.СтруктурнаяЕдиницаКонтрагента.Код ЕСТЬ NULL ТОГДА """" ИНАЧЕ "" / "" + ПОДСТРОКА(ВТ.СтруктурнаяЕдиницаКонтрагента.Наименование, 1, 200) КОНЕЦ КАК ИмяТТ,
	|	ВТ.Контрагент.ИНН КАК ИНН,
	|	ВТ.СтруктурнаяЕдиницаКонтрагента.КПП КАК КПП,
	|	МАКСИМУМ(Адреса.Регион) КАК Регион,
	|	МАКСИМУМ(
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(Адреса.Город,"""") <> """" ТОГДА Адреса.Город
	|			КОГДА ЕСТЬNULL(Адреса.НаселенныйПункт,"""") <> """" ТОГДА Адреса.НаселенныйПункт
	|			ИНАЧЕ """"
	|		КОНЕЦ
	|	) КАК Город,
	//|	ВТ.СтруктурнаяЕдиницаКонтрагента.Наименование КАК Address,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ЕСТЬNULL(Адреса.Улица,"""") = """"
	|			ТОГДА ВТ.СтруктурнаяЕдиницаКонтрагента.Наименование
	|		ИНАЧЕ ЕСТЬNULL(Адреса.Улица,"""") + "","" + ЕСТЬNULL(Адреса.Дом,"""") + "","" + ЕСТЬNULL(Адреса.Корпус,"""")
	|	КОНЕЦ) КАК Адрес,
	|	МАКСИМУМ(Адреса.Дом) КАК Дом,
	|	МАКСИМУМ(Адреса.Корпус) КАК Корпус,
	|	МАКСИМУМ(ВТ.ТорговыйПредставитель.Код) КАК КодТП,
	|	ВТ.СтруктурнаяЕдиницаКонтрагента.ТипКаналаРаспределения.Код КАК КодКанала,
	|	ВЫБОР
	|		КОГДА ВТ.СтруктурнаяЕдиницаКонтрагента.Владелец.Код В (""000005874"") ТОГДА ""929001563"" // HolliFood
	|		КОГДА ВТ.СтруктурнаяЕдиницаКонтрагента.Владелец.Код В (""000005822"") ТОГДА ""929000178"" // Nash Magazin
	|       ИНАЧЕ """"
	|   КОНЕЦ КАК КодТорговойСетиЛореаль,
	|	ВЫБОР КОГДА ВТ.СтруктурнаяЕдиницаКонтрагента.ПометкаУдаления ИЛИ ВТ.СтруктурнаяЕдиницаКонтрагента.НеДействует ТОГДА ""INACT"" ИНАЧЕ ""ACT"" КОНЕЦ КАК СтатусТТ
	|ПОМЕСТИТЬ ВТ_ТорговыеТочкиПокупателей
	|ИЗ
	|	ВТ_ВсеОтгрузки КАК ВТ
	| 	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Адреса.Объект КАК ОбъектСсылка,
	|			Адреса.Вид КАК ВидАдреса,
	|			МАКСИМУМ(Адреса.Поле1) КАК ПочтовыйИндекс,
	|			МАКСИМУМ(Адреса.Поле2) КАК Регион,
	|			МАКСИМУМ(Адреса.Поле3) КАК Район,
	|			МАКСИМУМ(Адреса.Поле4) КАК Город,
	|			МАКСИМУМ(Адреса.Поле5) КАК НаселенныйПункт,
	|			МАКСИМУМ(Адреса.Поле6) КАК Улица,
	|			МАКСИМУМ(Адреса.Поле7) КАК Дом,
	|			МАКСИМУМ(Адреса.Поле8) КАК Корпус,
	|			МАКСИМУМ(Адреса.Поле9) КАК Квартира,
	|			МАКСИМУМ(ВЫРАЗИТЬ(Адреса.Представление КАК Строка(255))) КАК Представление
	|		ИЗ
	|			РегистрСведений.КонтактнаяИнформация КАК Адреса
	|		ГДЕ
	|			Адреса.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|		СГРУППИРОВАТЬ ПО
	|			Адреса.Объект,
	|			Адреса.Вид
	|	) КАК Адреса
	|		ПО Адреса.ОбъектСсылка = ВЫБОР
	|				КОГДА ЕСТЬNULL(ВТ.СтруктурнаяЕдиницаКонтрагента, &ПустаяТТ) = &ПустаяТТ ТОГДА ВТ.Контрагент
	|				ИНАЧЕ ВТ.СтруктурнаяЕдиницаКонтрагента
	|			КОНЕЦ
	|			И Адреса.ВидАдреса = ВЫБОР
	|				КОГДА ЕСТЬNULL(ВТ.СтруктурнаяЕдиницаКонтрагента, &ПустаяТТ) = &ПустаяТТ ТОГДА &ВидАдресДоставкиКонтрагента
	|				КОГДА ВТ.СтруктурнаяЕдиницаКонтрагента.Код В (""Ц00017068"",""Ц00017069"",""Ц00017070"") ТОГДА &ВидАдресТранссибирская
	|				ИНАЧЕ &ВидАдресСтруктурнойЕдиницы
	|			КОНЕЦ
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Контрагент,
	|	ВТ.СтруктурнаяЕдиницаКонтрагента
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	СтруктурнаяЕдиницаКонтрагента,
	|	ТорговыйПредставитель
	|;
	|
	|ВЫБРАТЬ
	|	Движ.ДокументСсылка КАК ДокументСсылка
	|ПОМЕСТИТЬ ВТ_НужныеПеремещения
	|ИЗ
	|	ВТ_ВсеОтгрузки КАК Движ
	|ГДЕ
	|	Движ.ДокументСсылка ССЫЛКА Документ.ПеремещениеТоваров
	|СГРУППИРОВАТЬ ПО
	|	Движ.ДокументСсылка
	|ИМЕЮЩИЕ
	|	НАЧАЛОПЕРИОДА(МИНИМУМ(Движ.Период), День)<>НАЧАЛОПЕРИОДА(МАКСИМУМ(Движ.Период), День)
	|		ИЛИ КОЛИЧЕСТВО(*)=1
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движ.ДокументСсылка																КАК ДокументСсылка,
	|	ВЫБОР
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.СписаниеТоваров ТОГДА ""СПС""
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ПеремещениеТоваров ТОГДА ""ПРМ""
	|		ИНАЧЕ """"
	|	КОНЕЦ + Движ.ДокументСсылка.Номер												КАК НомерДокумента,
	|	НАЧАЛОПЕРИОДА(Движ.ДокументСсылка.Дата, День)									КАК ДатаДокумента,
	|	НАЧАЛОПЕРИОДА(Движ.Период, День)												КАК ДатаДвижения,
	|	ЕСТЬNULL(ТТ.КодТТ,""000000000-000000000"")										КАК КодТТ,
	|	ВЫБОР КОГДА ТТ.КодТТ ЕСТЬ NULL ТОГДА ""Служебный"" ИНАЧЕ ТТ.ИмяТТ КОНЕЦ			КАК ИмяТТ,
	|	ТТ.КодТорговойСетиЛореаль														КАК КодТорговойСетиЛореаль,
	|	ВЫБОР КОГДА ТТ.КодТТ ЕСТЬ NULL ТОГДА """" ИНАЧЕ ТТ.ИНН КОНЕЦ					КАК ИНН,
	|	ВЫБОР
	|		КОГДА ТТ.КодТТ ЕСТЬ NULL ТОГДА ""Омская обл"" 
	|		КОГДА (ТТ.Регион ЕСТЬ NULL ИЛИ ТТ.Регион = """") И ВЫРАЗИТЬ(ТТ.Город КАК Строка(4))=""Омск"" ТОГДА ""Омская обл""
	|		ИНАЧЕ ТТ.Регион
	|	КОНЕЦ																			КАК Регион,
	|	ВЫБОР КОГДА ТТ.КодТТ ЕСТЬ NULL ТОГДА ""Омск"" ИНАЧЕ ТТ.Город КОНЕЦ				КАК Город,
	|	ВЫБОР КОГДА ТТ.КодТТ ЕСТЬ NULL ТОГДА ""Красный пер., д.2"" ИНАЧЕ ТТ.Адрес КОНЕЦ	КАК Адрес,
	|	ВЫБОР КОГДА ТТ.КодТТ ЕСТЬ NULL ТОГДА ""2"" ИНАЧЕ ТТ.Дом КОНЕЦ					КАК Дом,
	|	ЕСТЬNULL(ТТ.Корпус,"""")														КАК Корпус,
	|	ВЫБОР
	|		КОГДА ТТ.КодКанала = ""О00015""	ТОГДА ""A2""
	|		КОГДА ТТ.КодКанала = ""О00005""	ТОГДА ""M6""
	|		КОГДА ТТ.КодКанала = ""О00011""	ТОГДА ""M6""
	|		КОГДА ТТ.КодКанала = ""О00010""	ТОГДА ""M5""
	|		КОГДА ТТ.КодКанала = ""О00008""	ТОГДА ""S2""
	|		КОГДА ТТ.КодКанала = ""О00002""	ТОГДА ""S3""
	|		КОГДА ТТ.КодКанала = ""О00003""	ТОГДА ""S3""
	|		КОГДА ТТ.КодКанала = ""О00006""	ТОГДА ""S3""
	|		КОГДА ТТ.КодКанала = ""О00004""	ТОГДА ""S3""
	|		ИНАЧЕ ""09""
	|	КОНЕЦ																			КАК Канал,
	|	ВЫБОР КОГДА ТТ.КодТТ ЕСТЬ NULL ТОГДА ""ACT"" ИНАЧЕ ТТ.СтатусТТ КОНЕЦ			КАК СтатусТТ,
	|	ВЫБОР
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ОтгрузкаТоваровУслуг ТОГДА ""ST""
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ВозвратТоваровОтПокупателя ТОГДА ""RET""
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ПеремещениеТоваров ТОГДА ""TR""
	|		ИНАЧЕ ""COR""
	//|		ИНАЧЕ ""TR""
	|	КОНЕЦ																			КАК ТипДокумента,
	|	Движ.ДобавитьПостфикс															КАК ДобавитьПостфикс
	|ИЗ
	|	ВТ_ВсеОтгрузки КАК Движ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТорговыеТочкиПокупателей КАК ТТ
	|			ПО Движ.ДокументСсылка.Контрагент = ТТ.Контрагент
	|				И ВЫРАЗИТЬ(Движ.ДокументСсылка.СтруктурнаяЕдиницаКонтрагента КАК Справочник.СтруктурныеЕдиницыКонтрагентов) = ТТ.СтруктурнаяЕдиницаКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НужныеПеремещения КАК НП
	|			ПО Движ.ДокументСсылка ССЫЛКА Документ.ПеремещениеТоваров
	|				И НП.ДокументСсылка = Движ.ДокументСсылка
	|ГДЕ
	|	Движ.Реализация
	|		И (
	|			НЕ Движ.ДокументСсылка ССЫЛКА Документ.ПеремещениеТоваров
	|			ИЛИ НП.ДокументСсылка ЕСТЬ НЕ NULL
	|		)
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДвижения ВОЗР, ДобавитьПостфикс УБЫВ, НомерДокумента ВОЗР
	|;
	|
	|УНИЧТОЖИТЬ ВТ_ТорговыеТочкиПокупателей;
	|";
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		лГород = 1;
		
		СтрокаСегмента =
			"H"											+ РазделительКолонок	// [01] Тип сегмента (Segment type)
			+ СкладПартнера								+ РазделительКолонок	// [02] Код склада партнера (Partner Warehouse Code)
			+ СокрП(Выб.НомерДокумента) + ?(Выб.ДобавитьПостфикс,"_"+Формат(Выб.ДатаДвижения,"ДФ=yyyyMMdd"),"") + РазделительКолонок	// [03] Номер накладной/счета-фактуры (Invoice Number assigned by document sender)
			+ Выб.КодТТ									+ РазделительКолонок	// [04] Код адреса доставки клиента в ERP партнера (ERP delivery address code)
			+ ""										+ РазделительКолонок	// [05] Код адреса доставки клиента в системе SFA L’Oreal (LOR delivery address code (mSeries))
			+ ?(ЗначениеЗаполнено(Выб.Регион), Выб.Регион, "Омская обл") + РазделительКолонок	// [06] Субъект федерации (Country sub-entity name)
			+ ВыделитьНаселенныйПункт(Выб.Город)		+ РазделительКолонок	// [07] Город (City)
			//+ ?(ЗначениеЗаполнено(Выб.Город),Выб.Город,"Омск г") + РазделительКолонок
			+ ?(ЗначениеЗаполнено(Выб.Адрес), Лев(Выб.Адрес,60), "Красный пер., д.2") + РазделительКолонок	// [08] Адрес (Address)
			//+ Лев(Выб.Адрес,60)						+ РазделительКолонок
			+ ?(ЗначениеЗаполнено(Выб.Адрес), Лев(СокрП(Выб.Дом),4)+?(ЗначениеЗаполнено(Выб.Корпус),"/"+Лев(СокрП(Выб.Корпус),5),""), "2") + РазделительКолонок	// [09] Номер дома (Building number)
			+ Лев(Выб.ИмяТТ,40)							+ РазделительКолонок	// [10] Имя клиента (Client name)
			+ Выб.ИНН									+ РазделительКолонок	// [11] ИНН (Client legal code)
			+ ""										+ РазделительКолонок	// [12] Код населённого пункта КЛАДР (KLADR Code)
			+ ""										+ РазделительКолонок	// [13] Резервное поле (Flexi)
			+ ?(ЗначениеЗаполнено(Выб.Канал),Выб.Канал,"09") + РазделительКолонок	// [14] Тип адреса получателя (Address type)
			+ Выб.КодТорговойСетиЛореаль				+ РазделительКолонок	// [15] Код сети из справочника L’Oreal (Chain Code)
			+ ?(ЗначениеЗаполнено(Выб.СтатусТТ),Выб.СтатусТТ,"ACT") + РазделительКолонок	// [16] Статус адреса отгрузки (Delivery address status)
			+ Формат(Выб.ДатаДвижения,"ДФ=yyyyMMdd")	+ РазделительКолонок	// [17] Дата фактической отгрузки по накладной/ счету-фактуре (Invoice delivery date)
			+ Выб.ТипДокумента							+ РазделительКолонок	// [18] Тип накладной / счета-фактуры (Document type)
			+ "R"																// [19] Статус документа (Document status)
		;
		Текст.ЗаписатьСтроку(СтрокаСегмента);
	КонецЦикла;
	
	// Сегмент позиций (детализация)
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Движ.ДокументСсылка КАК ДокументСсылка,
	|	ВЫБОР
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.СписаниеТоваров ТОГДА ""СПС""
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ПеремещениеТоваров ТОГДА ""ПРМ""
	|		ИНАЧЕ """"
	|	КОНЕЦ + Движ.ДокументСсылка.Номер КАК НомерДокумента,
	|	Движ.ДокументСсылка.Дата КАК ДатаДокумента,
	|	НАЧАЛОПЕРИОДА(Движ.Период, День) КАК ДатаДвижения,
	|	Движ.ДобавитьПостфикс КАК ДобавитьПостфикс,
	|	ВЫБОР
	|		КОГДА Движ.ДокументСсылка ССЫЛКА Документ.ОтгрузкаТоваровУслуг И ЕСТЬNULL(Движ.ЦенаБезНДС,0)=0
	|			ТОГДА ""BONUS""
	|		КОГДА ЕСТЬNULL(Движ.ДокументСсылка.АкцияПродаж,&ПустаяАкция) <> &ПустаяАкция
	|			ТОГДА ""DISCT""
	//|		КОГДА НЕ Движ.ДокументСсылка ССЫЛКА Документ.ОтгрузкаТоваровУслуг
	//|			И НЕ Движ.ДокументСсылка ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|			ТОГДА """"
	|		ИНАЧЕ ""REGR""
	|	КОНЕЦ КАК ТипРасхода,
	|	Номенкл.КодТД КАК КодТовара,
	|	Номенкл.Артикул КАК КодМатериала,
	|	Номенкл.Штрихкод КАК ШтрихКод,
	|	-Движ.Количество КАК Количество,
	|	Движ.ЦенаБезНДС*-Движ.Количество КАК СуммаБезНДС,
	|	Движ.ЦенаСНДС*-Движ.Количество КАК СуммаСНДС
	|ИЗ
	|	ВТ_ВсеОтгрузки КАК Движ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК Номенкл
	|			ПО Движ.Номенклатура = Номенкл.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НужныеПеремещения КАК НП
	|			ПО Движ.ДокументСсылка ССЫЛКА Документ.ПеремещениеТоваров
	|				И НП.ДокументСсылка = Движ.ДокументСсылка
	|ГДЕ
	|	Движ.Реализация
	|		И (
	|			НЕ Движ.ДокументСсылка ССЫЛКА Документ.ПеремещениеТоваров
	|			ИЛИ НП.ДокументСсылка ЕСТЬ НЕ NULL
	|		)
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДвижения ВОЗР, ДобавитьПостфикс УБЫВ, НомерДокумента, ДокументСсылка, Движ.Номенклатура, Движ.Количество ВОЗР
	|";
	Выб = Запрос.Выполнить().Выбрать();
	лПредДок = Неопределено;
	лНомерСтроки = 0;
	Пока Выб.Следующий() Цикл
		Если Выб.ДокументСсылка <> лПредДок Тогда
			лПредДок = Выб.ДокументСсылка;
			лНомерСтроки = 1;
		КонецЕсли;
		СтрокаСегмента =
			"I"											+ РазделительКолонок	// [01] Тип сегмента (Segment type)
			+ СкладПартнера								+ РазделительКолонок	// [02] Код склада партнера (Partner Warehouse Code)
		    + СокрП(Выб.НомерДокумента) + ?(Выб.ДобавитьПостфикс,"_"+Формат(Выб.ДатаДвижения,"ДФ=yyyyMMdd"),"") + РазделительКолонок	// [03] Номер приходованной накладной (Invoice Number assigned by document sender)
			+ СокрП(Выб.КодТовара)						+ РазделительКолонок	// [04] Код материала ERP (ERP material code)
			+ Выб.ТипРасхода							+ РазделительКолонок	// [05] Код промо акции (Promo Action Code)
			+ "NR"										+ РазделительКолонок	// [06] Тип продукта (Complex Products)
			+ Формат(лНомерСтроки,"ЧГ=;ЧН=")			+ РазделительКолонок	// [07] Номер позиции (Invoice position number)
			+ Выб.КодМатериала							+ РазделительКолонок	// [08] Код материала L’Oreal (L’Oreal material code)
			//+ ""										+ РазделительКолонок
			+ Выб.Штрихкод								+ РазделительКолонок	// [09] EAN код материала (EAN material code)
			+ Формат(Выб.Количество,"ЧГ=;ЧН=")			+ РазделительКолонок	// [10] Заказанное кол-во по позиции заказа (Invoice Item Quantity)
			+ "UN"										+ РазделительКолонок	// [11] Базисная единица измерения (Unit of measure)
			+ Формат(Выб.СуммаБезНДС,"ЧРД=,;ЧН=;ЧГ=")	+ РазделительКолонок	// [12] Общая стоим. позиции сч/ф с уч. всех скидок клиента (без НДС) (Net Item value (without Tax))
			+ Формат(Выб.СуммаСНДС,"ЧРД=,;ЧН=;ЧГ=")		+ РазделительКолонок	// [13] Общая стоим. позиции сч/ф с уч. всех скидок клиента (с НДС) (Net Item value (with Tax))
			+ Формат(Выб.СуммаСНДС,"ЧРД=,;ЧН=;ЧГ=")		+ РазделительКолонок	// [14] Общая стоим. позиции по закуп. у поставщика тарифам (c НДС) (Supplier’s Item value (with Tax))
			+ "RUR"																// [15] Eдиница измерения для денежных полей (Unit of measure for monetary terms)
		;
		Текст.ЗаписатьСтроку(СтрокаСегмента);
		лНомерСтроки = лНомерСтроки + 1;
	КонецЦикла;
	
	Текст.Закрыть();

	Возврат Новый Структура("ИмяФайла,ГУИД",ПолноеИмяФайлаРеализации,ГУИДРеализации);
	
КонецФункции

Функция ВыгрузитьОтчетПоОстаткам(ГУИД=Неопределено,КаталогВыгрузки=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		КаталогВыгрузки = КаталогВременныхФайлов();
	КонецЕсли;
	
	// ДЕЙСТВИЯ ПО ВЫГРУЗКЕ ОСТАТКОВ
	ГУИДОстатков = ?(ГУИД=Неопределено,ВРег(Строка(Новый УникальныйИдентификатор())),ГУИД);
	//ГУИДОстатков = ?(ЭтоКоррекция,СтарыйГУИД,ВРег(Строка(Новый УникальныйИдентификатор())));
	ИмяФайлаОстатков = "INVRPT_"+КодПартнера+"_"+ГУИДОстатков+".txt";
	ПолноеИмяФайлаОстатков = КаталогВыгрузки + "\" + ИмяФайлаОстатков;
	Текст = Новый ЗаписьТекста(ПолноеИмяФайлаОстатков, КодировкаТекстаФайлов, РазделительСтрок);
	
	// Сегмент общей информации
	СтрокаСегмента =
		"G"											+ РазделительКолонок	// [01] Тип сегмента (Segment type)
		+ Формат(ДатаВыгрузкиОтчета,"ДФ=гггг")		+ РазделительКолонок	// [02] Год (Year)
		+ КодПартнера								+ РазделительКолонок	// [03] Код партнера в системе L’Oreal (Partner Code)
		+ ГУИДОстатков								+ РазделительКолонок	// [04] GUID (GUID identification)
		+ "INVRPT"									+ РазделительКолонок	// [05] Название сообщения (Message name)
		+ ?(МесячнаяВыгрузка,"MONTHLY","DAILY")		+ РазделительКолонок	// [06] Временной период пакета (Data package period)
		+ "FTP"										+ РазделительКолонок	// [07] Протокол передачи данных (Protocol)
		+ Формат(ДатаВыгрузкиОтчета,"ДФ=ггггММ")	+ РазделительКолонок	// [08] Месяц статистики (Month)
		+ Формат(ДатаВыгрузкиОтчета,"ДФ=ггггММдд")	+ РазделительКолонок	// [09] День статистики (Day)
		+ ?(ЭтоКоррекция,"COR","REG")				+ РазделительКолонок	// [10] Тип отправляемых данных (Data package type)
		+ СтарыйГУИД								+ РазделительКолонок	// [11] GUID предыдущего сообщения (GUID identification (2))
		+ "SENT"															// [12] Статус обработки сообщения (Process status)
	;
	Текст.ЗаписатьСтроку(СтрокаСегмента);
	
	// Сегмент заглавий
	Запрос.Текст = "
	|ВЫБРАТЬ 0 КАК Цифра
	|ПОМЕСТИТЬ ВТ_Цифры
	|ОБЪЕДИНИТЬ ВЫБРАТЬ	1
	|ОБЪЕДИНИТЬ ВЫБРАТЬ	2
	|ОБЪЕДИНИТЬ ВЫБРАТЬ	3
	|ОБЪЕДИНИТЬ ВЫБРАТЬ	4
	|ОБЪЕДИНИТЬ ВЫБРАТЬ	5
	|ОБЪЕДИНИТЬ ВЫБРАТЬ	6
	|ОБЪЕДИНИТЬ ВЫБРАТЬ	7
	|ОБЪЕДИНИТЬ ВЫБРАТЬ	8
	|ОБЪЕДИНИТЬ ВЫБРАТЬ	9
	|;
	|
	|ВЫБРАТЬ
	|   ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, Тысячи.Цифра * 1000 + Сотни.Цифра * 100 + Десятки.Цифра * 10 + Единицы.Цифра) КАК Период
	|ПОМЕСТИТЬ ВТ_Календарь
	|ИЗ
	|   ВТ_Цифры КАК Тысячи,
	|   ВТ_Цифры КАК Сотни,
	|   ВТ_Цифры КАК Десятки,
	|   ВТ_Цифры КАК Единицы
	|ГДЕ
	|   Тысячи.Цифра * 1000 + Сотни.Цифра * 100 + Десятки.Цифра * 10 + Единицы.Цифра <= РАЗНОСТЬДАТ(&НачалоПериода, &КонецПериода, ДЕНЬ)
	|;
	|
	|
	|ВЫБРАТЬ
	|	Запасы.Период,
	|	Запасы.Номенклатура,
	|	СУММА(Запасы.КоличествоНачальныйОстаток) КАК НачальныйОстаток,
	|	СУММА(Запасы.КоличествоКонечныйОстаток) КАК КонечныйОстаток,
	//|	СУММА(Запасы.КоличествоКонечныйОстаток)+СУММА(Запасы.КоличествоРасход) КАК КонечныйОстаток,
	|	СУММА(Запасы.КоличествоПриход) КАК КоличествоПриход,
	|	СУММА(Запасы.КоличествоРасход) КАК КоличествоРасход
	|ПОМЕСТИТЬ ВТ_ОстаткиИОбороты
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.ОстаткиИОбороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		День,
	|		ДвиженияИГраницыПериода,
	|		(
	|			Номенклатура.ДистрибьюторскийКонтракт В (&СписокКонтрактов)
	|			ИЛИ (Номенклатура.ДистрибьюторскийКонтракт = &ДКРаспродажа И Номенклатура.Родитель = &НГЛореаль)
	|		)
	| 	) КАК Запасы
	|СГРУППИРОВАТЬ ПО
	|	Запасы.Период,
	|	Запасы.Номенклатура
	|ИНДЕКСИРОВАТЬ ПО
	|	Период, Номенклатура
	|;
	|
	|УНИЧТОЖИТЬ ВТ_Номенклатура;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|////////////////////////  ИНФОРМАЦИЯ ПО НОМЕНКЛАТУРЕ  //////////////////////////
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номенклатура КАК Номенклатура,
	|	ВТ.Номенклатура.Код КАК КодТД,
	|	ВТ.Номенклатура.Наименование КАК НаименованиеТД,
	|	ВЫРАЗИТЬ(ВТ.Номенклатура.НаименованиеПолное КАК Строка(1024)) КАК НаименованиеПолноеТД,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(Соотв.КодНоменклатурыКонтрагента) ЕСТЬ НЕ NULL ТОГДА МАКСИМУМ(Соотв.КодНоменклатурыКонтрагента)
	|		ИНАЧЕ ВТ.Номенклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	//|	ВЫБОР
	//|		КОГДА МАКСИМУМ(ШК.ШтрихКод) ЕСТЬ NULL ТОГДА ВТ.Номенклатура.Артикул
	//|		ИНАЧЕ """"
	//|	КОНЕЦ КАК Артикул,
	|	//ВТ.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(Соотв.КодНоменклатурыКонтрагента) ЕСТЬ НЕ NULL ТОГДА МАКСИМУМ(Соотв.ШтрихКодНоменклатурыКонтрагента)
	|		КОГДА МАКСИМУМ(ШК.ШтрихКод) ЕСТЬ НЕ NULL ТОГДА МАКСИМУМ(ШК.ШтрихКод)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ШтрихКод,
	//|	ЕСТЬNULL(МАКСИМУМ(ШК.ШтрихКод), """") КАК ШтрихКод,
	|	ВЫБОР
	|		КОГДА ВТ.Номенклатура.СтавкаНДС = &Ставка10НДС Тогда 1.10
	|		КОГДА ВТ.Номенклатура.СтавкаНДС = &Ставка18НДС Тогда 1.18
	|		ИНАЧЕ 1.00
	|	КОНЕЦ КАК КоэффНДС
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	ВТ_ОстаткиИОбороты КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				Рег.Номенклатура КАК Номенклатура,
	|				МАКСИМУМ(Рег.Штрихкод) КАК ШтрихКод
	|			ИЗ
	|				РегистрСведений.ШтрихКоды КАК Рег
	|			ГДЕ
	|				Рег.ЕдиницаИзмерения = Рег.Номенклатура.ЕдиницаХраненияОстатков
	|					И ВЫРАЗИТЬ(Рег.ТипШтрихкода.Наименование КАК Строка(6)) = ""EAN-13""
	//|					И Рег.ТипШтрихкода В (&ТипШКEAN13)
	|			СГРУППИРОВАТЬ ПО
	|				Рег.Номенклатура
	|		) КАК ШК
	|			ПО ШК.Номенклатура = ВТ.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КДО_СоответствияНоменклатуры КАК Соотв
	|			ПО ВТ.Номенклатура = Соотв.Номенклатура
	|				И Соотв.СвойствоСоответствия = &АртикулЛореаль
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Номенклатура
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	Календарь.Период	КАК Период,
	|	МД.Номенклатура		КАК Номенклатура,
	|	МД.ТипЦен			КАК ТипЦен,
	|	Рег.Цена			КАК Цена
	|ПОМЕСТИТЬ ВТ_Цены
	|ИЗ
	|	ВТ_Календарь КАК Календарь
	|		СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				Календарь.Период КАК Период,
	|				Рег.Номенклатура КАК Номенклатура,
	|				Рег.ТипЦен КАК ТипЦен,
	|				МАКСИМУМ(Рег.Период) КАК МаксДата
	|			ИЗ
	|				ВТ_Календарь КАК Календарь
	|					СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК Рег
	|						ПО Рег.ТипЦен В (&ТипЦенЗакуп,&ТипЦенНал)
	|							И Рег.Период < Календарь.Период
	|							И (
	|								Рег.Номенклатура.ДистрибьюторскийКонтракт В (&СписокКонтрактов)
	|								ИЛИ (Номенклатура.ДистрибьюторскийКонтракт = &ДКРаспродажа И Номенклатура.Родитель = &НГЛореаль)
	|							)
	|			СГРУППИРОВАТЬ ПО
	|				Календарь.Период,
	|				Рег.Номенклатура,
	|				Рег.ТипЦен
	|		) КАК МД
	|			ПО Календарь.Период = МД.Период
	|		СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК Рег
	|			ПО Рег.Номенклатура = МД.Номенклатура
	|				И Рег.ТипЦен = МД.ТипЦен
	|				И Рег.Период = МД.МаксДата
	|ИНДЕКСИРОВАТЬ ПО
	|	Период, Номенклатура, ТипЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	Календарь.Период КАК Период,
	|	Номенкл.КодТД КАК КодТовара,
	//|	ВЫБОР КОГДА ДатыСрезов.ПериодКалендаря = ДатыСрезов.ПериодОстатков ТОГДА ВТ.КоличествоПриход ИНАЧЕ 0 КОНЕЦ КАК КоличествоПриход,
	//|	ВЫБОР КОГДА ДатыСрезов.ПериодКалендаря = ДатыСрезов.ПериодОстатков ТОГДА ВТ.КоличествоРасход ИНАЧЕ 0 КОНЕЦ КАК КоличествоРасход,
	//|	ЕСТЬNULL(ВТ.НачальныйОстаток, 0) КАК КоличествоНачальныйОстаток,
	|	
	|	ЕСТЬNULL(ВЫБОР КОГДА ДатыСрезов.ПериодКалендаря = ДатыСрезов.ПериодОстатков ТОГДА ВТ.КонечныйОстаток ИНАЧЕ ВТ.НачальныйОстаток КОНЕЦ, 0) КАК КоличествоКонечныйОстаток,
	|	ЕСТЬNULL((ВЫБОР КОГДА ДатыСрезов.ПериодКалендаря = ДатыСрезов.ПериодОстатков ТОГДА ВТ.КонечныйОстаток ИНАЧЕ ВТ.НачальныйОстаток КОНЕЦ) * ЦеныЗакуп.Цена, 0) КАК СуммаЗакупCНДС,
	|	ВЫРАЗИТЬ(ЕСТЬNULL((ВЫБОР КОГДА ДатыСрезов.ПериодКалендаря = ДатыСрезов.ПериодОстатков ТОГДА ВТ.КонечныйОстаток ИНАЧЕ ВТ.НачальныйОстаток КОНЕЦ) * ЦеныЗакуп.Цена, 0)/Номенкл.КоэффНДС КАК Число(21,2)) КАК СуммаЗакупБезНДС,
	|	ЕСТЬNULL((ВЫБОР КОГДА ДатыСрезов.ПериодКалендаря = ДатыСрезов.ПериодОстатков ТОГДА ВТ.КонечныйОстаток ИНАЧЕ ВТ.НачальныйОстаток КОНЕЦ) * ЦеныНал.Цена, 0) КАК СуммаНалCНДС,
	|	ВЫРАЗИТЬ(ЕСТЬNULL((ВЫБОР КОГДА ДатыСрезов.ПериодКалендаря = ДатыСрезов.ПериодОстатков ТОГДА ВТ.КонечныйОстаток ИНАЧЕ ВТ.НачальныйОстаток КОНЕЦ) * ЦеныНал.Цена, 0)/Номенкл.КоэффНДС КАК Число(21,2)) КАК СуммаНалБезНДС,
	|	
	//|	ЕСТЬNULL(ВЫБОР КОГДА ДатыСрезов.ПериодКалендаря = ДатыСрезов.ПериодОстатков ТОГДА ВТ.КонечныйОстаток ИНАЧЕ ВТ.НачальныйОстаток КОНЕЦ, 0) + ЕСТЬNULL(Поступл.Количество,0) КАК КоличествоКонечныйОстаток,
	//|	ЕСТЬNULL((ВЫБОР КОГДА ДатыСрезов.ПериодКалендаря = ДатыСрезов.ПериодОстатков ТОГДА ВТ.КонечныйОстаток ИНАЧЕ ВТ.НачальныйОстаток КОНЕЦ + ЕСТЬNULL(Поступл.Количество,0)) * ЦеныЗакуп.Цена, 0) КАК СуммаЗакупCНДС,
	//|	ВЫРАЗИТЬ(ЕСТЬNULL((ВЫБОР КОГДА ДатыСрезов.ПериодКалендаря = ДатыСрезов.ПериодОстатков ТОГДА ВТ.КонечныйОстаток ИНАЧЕ ВТ.НачальныйОстаток КОНЕЦ + ЕСТЬNULL(Поступл.Количество,0)) * ЦеныЗакуп.Цена, 0)/Номенкл.КоэффНДС КАК Число(21,2)) КАК СуммаЗакупБезНДС,
	//|	ЕСТЬNULL((ВЫБОР КОГДА ДатыСрезов.ПериодКалендаря = ДатыСрезов.ПериодОстатков ТОГДА ВТ.КонечныйОстаток ИНАЧЕ ВТ.НачальныйОстаток КОНЕЦ + ЕСТЬNULL(Поступл.Количество,0)) * ЦеныНал.Цена, 0) КАК СуммаНалCНДС,
	//|	ВЫРАЗИТЬ(ЕСТЬNULL((ВЫБОР КОГДА ДатыСрезов.ПериодКалендаря = ДатыСрезов.ПериодОстатков ТОГДА ВТ.КонечныйОстаток ИНАЧЕ ВТ.НачальныйОстаток КОНЕЦ + ЕСТЬNULL(Поступл.Количество,0)) * ЦеныНал.Цена, 0)/Номенкл.КоэффНДС КАК Число(21,2)) КАК СуммаНалБезНДС,
	|	
	|	Номенкл.Артикул КАК КодМатериала,
	|	Номенкл.Штрихкод КАК ШтрихКод,
	|	Номенкл.НаименованиеТД КАК НаименованиеТовара
	|ИЗ
	|	ВТ_Календарь КАК Календарь
	|		СОЕДИНЕНИЕ ВТ_Номенклатура КАК Номенкл
	|			ПО Истина
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				ВТ.Номенклатура,
	|				Календарь.Период КАК ПериодКалендаря,
	|				МИНИМУМ(ВТ.Период) КАК ПериодОстатков
	|			ИЗ
	|				ВТ_Календарь КАК Календарь
	|					СОЕДИНЕНИЕ ВТ_ОстаткиИОбороты КАК ВТ
	|						ПО ВТ.Период >= Календарь.Период
	|			СГРУППИРОВАТЬ ПО
	|				ВТ.Номенклатура,
	|				Календарь.Период
	|		) КАК ДатыСрезов
	|			ПО Календарь.Период = ДатыСрезов.ПериодКалендаря
	|				И Номенкл.Номенклатура = ДатыСрезов.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиИОбороты КАК ВТ
	|			ПО Номенкл.Номенклатура = ВТ.Номенклатура
	|				И ДатыСрезов.ПериодОстатков = ВТ.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				Движ.Номенклатура КАК Номенклатура,
	|				НАЧАЛОПЕРИОДА(Движ.Период, День) КАК Период,
	|				0 КАК Количество
	//|				-Движ.Количество КАК Количество,
	//|				Движ.ЦенаБезНДС*-Движ.Количество КАК СуммаБезНДС,
	//|				Движ.ЦенаСНДС*-Движ.Количество КАК СуммаСНДС
	|			ИЗ ВТ_ВсеОтгрузки КАК Движ
	|			ГДЕ Движ.Поступление
	|		) КАК Поступл // WQ упразднено 
	|			ПО Поступл.Номенклатура = ВТ.Номенклатура
	|				И Поступл.Период = Календарь.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Цены КАК ЦеныЗакуп
	|			ПО Номенкл.Номенклатура = ЦеныЗакуп.Номенклатура
	|				И Календарь.Период = ЦеныЗакуп.Период
	|				И ЦеныЗакуп.ТипЦен = &ТипЦенЗакуп
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Цены КАК ЦеныНал
	|			ПО Номенкл.Номенклатура = ЦеныНал.Номенклатура
	|				И Календарь.Период = ЦеныНал.Период
	|				И ЦеныНал.ТипЦен = &ТипЦенНал
	|УПОРЯДОЧИТЬ ПО
	|	Номенкл.НаименованиеТД,
	|	Календарь.Период
	|;
	|
	|УНИЧТОЖИТЬ ВТ_Цифры;
	|УНИЧТОЖИТЬ ВТ_Календарь;
	|УНИЧТОЖИТЬ ВТ_ОстаткиИОбороты; 
	|УНИЧТОЖИТЬ ВТ_Цены;
	|";
	Запрос.УстановитьПараметр("АртикулЛореаль", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("000187"));
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		СтрокаСегмента =
			"I"											+ РазделительКолонок	// [01] Тип сегмента (Segment type)
			+ Формат(Выб.Период,"ДФ=ггггММдд")			+ РазделительКолонок	// [02] Дата данных по остаткам (Release date)
			+ СкладПартнера								+ РазделительКолонок	// [03] Код склада партнера (Partner Warehouse Code)
			+ ""										+ РазделительКолонок	// [04] Код адреса доставки клиента, ERP партнера (ERP delivery address code)
			+ СокрП(Выб.КодТовара)						+ РазделительКолонок	// [05] Код материала ERP (ERP material code)
			+ "NR"										+ РазделительКолонок	// [06] Тип продукта (Complex Products)
			+ Выб.КодМатериала							+ РазделительКолонок	// [07] Код материала L’Oreal (L’Oreal material code)
			+ Выб.Штрихкод								+ РазделительКолонок	// [08] EAN код материала (EAN material code)
			+ СокрП(Выб.НаименованиеТовара)				+ РазделительКолонок	// [09] Название продукта (ERP material name)
			+ "UN"										+ РазделительКолонок	// [10] Базисная единица измерения (Unit of measure)
			+ Формат(Выб.КоличествоКонечныйОстаток,"ЧГ=;ЧН=") + РазделительКолонок	// [11] Заказанное кол-во по позиции заказа (Invoice Item Quantity)
			+ Формат(Выб.КоличествоКонечныйОстаток,"ЧГ=;ЧН=") + РазделительКолонок	// [12] Доступные для заказов кол-ва (Available for order q-ty) WQ
			+ Формат(Выб.СуммаЗакупБезНДС,"ЧРД=,;ЧН=;ЧГ=") + РазделительКолонок	// [13] Общая стоимость позиции остатков в ценах поставщика (без учета НДС) (Stock cost with Supplier’s tariffs (without Tax))
			+ Формат(Выб.СуммаЗакупCНДС,"ЧРД=,;ЧН=;ЧГ=") + РазделительКолонок	// [14] Общая стоимость позиции остатков в ценах поставщика (с учетом НДС) (Stock cost with Supplier’s tariffs (with Tax))
			+ Формат(Выб.СуммаНалБезНДС,"ЧРД=,;ЧН=;ЧГ=") + РазделительКолонок	// [15] Общая стоимость позиции остатков в ценах партнера (без учета НДС) (Partner’s Net Item value (without Tax))
			+ Формат(Выб.СуммаНалCНДС,"ЧРД=,;ЧН=;ЧГ=") + РазделительКолонок		// [16] Общая стоимость позиции остатков в ценах партнера (с учетом НДС) (Partner’s Net Item value (with Tax))
			+ "RUR"																// [17] Eдиница измерения для денежных полей (Unit of measure for monetary terms)
		;
		Текст.ЗаписатьСтроку(СтрокаСегмента);
	КонецЦикла;
	
	Текст.Закрыть();

	Возврат Новый Структура("ИмяФайла,ГУИД",ПолноеИмяФайлаОстатков,ГУИДОстатков);
	
КонецФункции

Функция ОбработатьЛогПоступления(ПолноеИмяФайла) Экспорт
	
	ОтчетУдачен = Ложь;
	Этап = 0;
	
	Текст = Новый ЧтениеТекста(ПолноеИмяФайла, КодировкаТекстаФайлов, РазделительСтрок);
	
	// Чтение заголовка
	МассивОшибок = Новый Массив;
	СтрокаСегмента = Текст.ПрочитатьСтроку();
	Пока СтрокаСегмента <> Неопределено И Найти(СтрокаСегмента,"G"+РазделительКолонок)=1 Цикл
		МассивОшибок.Добавить(
			ОбщиеФункции.РазбитьСтрокуНаСоставляющие(
				СтрокаСегмента,
				РазделительКолонок,
				Новый Структура("ТипСегмента,Год,КодПартнера,ГУИД,НазваниеСообщения,ВременнойПериод,Протокол,Месяц,День,ТипПакета,ПрошлыйГУИД,Статус,КодОшибки,ОписаниеОшибки")
			)
		);
		СтрокаСегмента = Текст.ПрочитатьСтроку();
		Этап = 1;
	КонецЦикла;
	
	// Чтение табчасти
	инд = 1;
	Пока СтрокаСегмента <> Неопределено Цикл
		Если инд > 1 Тогда
			Если ЗначениеЗаполнено(СтрокаСегмента) Тогда
				МассивОшибок.Добавить(
					ОбщиеФункции.РазбитьСтрокуНаСоставляющие(
						СтрокаСегмента,
						РазделительКолонок,
						Новый Структура("ТипСегмента,СкладПартнера,НомерДокумента,КодТовара,ТипПрихода,ТипПродукта,НомерСтроки,КодМатериала,Количество,ЕдиницаИзмерения,СуммаБезНДС,СуммаСНДС,СтоимостьСНДС,Валюта,ДатаПрихода,ТипНакладной,СтатусДокумента,КодТТ,КодОшибки,ТекстОшибки,ОписаниеОшибки")
					)
				);
			КонецЕсли;
		КонецЕсли;
		инд = инд + 1;
		СтрокаСегмента = Текст.ПрочитатьСтроку();
		Этап = 2;
	КонецЦикла;
	
	// Обработка массива ошибок
	ТекстВозврат = "<table width=""80%"" cellpadding=""2"" cellspacing=""0"" border=""1"">"+Символы.ПС;
	Для Каждого ЭлОшибка Из МассивОшибок Цикл
		Если ЭлОшибка.ТипСегмента = "G" Тогда
			Попытка
				ДатаОтчета = Формат(Дата(ЭлОшибка.День),"ДФ=dd.MM.yyyy");
			Исключение
				ДатаОтчета = ЭлОшибка.День;
			КонецПопытки;
			ТекстСтроки =
				"<tr bgcolor=""" + ?(ЭлОшибка.Статус="SUCCESS","#55cc55","#ff878e")
				+ """><td style=""font-size:9pt;color:" + ?(ЭлОшибка.Статус="SUCCESS","#082208","#600000") + """><b>"
				+ ?(ЭлОшибка.ВременнойПериод="MONTHLY","Ежемесячный","Ежедневный")
				+ " отчет по поступлениям за период " + ДатаОтчета
				+ " (ГУИД: " + ЭлОшибка.ГУИД + ") ";
			Если ЭлОшибка.Статус = "SUCCESS" Тогда
				ТекстСтроки = ТекстСтроки + "принят и обработан успешно!";
			ИначеЕсли ЭлОшибка.Статус = "SENT" Тогда
				ТекстСтроки = ТекстСтроки + "отправлен, но пока не обработан!";
			ИначеЕсли ЭлОшибка.Статус = "PROCESS" Тогда
				ТекстСтроки = ТекстСтроки + "отправлен и принят, но пока не обработан!";
			Иначе
				ТекстСтроки = ТекстСтроки + "обработан с ошибками!<br>"
					+ СтрЗаменить(РасшифроватьОшибкиЗагрузкиШапкиBizTalk(ВыделитьКодОшибки(ЭлОшибка.КодОшибки)),РазделительСтрок,"<br>"+РазделительСтрок);
			КонецЕсли;
			ТекстСтроки = ТекстСтроки + "</b>";
			Если ЭлОшибка.Статус = "SUCCESS" Тогда
				ОтчетУдачен = Истина;
				Прервать;
			КонецЕсли;
		ИначеЕсли ЭлОшибка.ТипСегмента = "I" Тогда
			//КодОшибки = ВыделитьКодОшибки(ЭлОшибка.КодОшибки);
			БезОшибок = ВыделитьКодОшибки(ЭлОшибка.КодОшибки)=0;
			ТекстСтроки =
				"<tr bgcolor=""" + ?(БезОшибок,"#aeffae","#ffc7ce")
				+ """><td style=""font-size:9pt;color:" + ?(БезОшибок,"#224422","#9c0006") + """>"
				+ "<b>Строка " + ЭлОшибка.НомерСтроки + " (код товара: " + СокрП(ЭлОшибка.КодТовара) + "):</b><br>" 
				+ СтрЗаменить(РасшифроватьОшибкиЗагрузкиСпецификацииДвиженийBizTalk(ЭлОшибка.КодОшибки),РазделительСтрок,"<br>"+РазделительСтрок);
		КонецЕсли;
		ТекстСтроки = ТекстСтроки + "</td></tr>"+Символы.ПС;
		ТекстВозврат = ТекстВозврат + ТекстСтроки;
	КонецЦикла;
	
	ТекстВозврат = ТекстВозврат + "</table>"+Символы.ПС;
	
	Возврат Новый Структура ("Удача,Текст,Этап", ОтчетУдачен, ТекстВозврат, Этап);
	
КонецФункции

Функция ОбработатьЛогРеализации(ПолноеИмяФайла) Экспорт
	
	ОтчетУдачен = Ложь;
	Этап = 0;
	
	Текст = Новый ЧтениеТекста(ПолноеИмяФайла, КодировкаТекстаФайлов, РазделительСтрок);
	
	// Чтение заголовка
	МассивОшибок = Новый Массив;
	СтрокаСегмента = Текст.ПрочитатьСтроку();
	Пока СтрокаСегмента <> Неопределено И Найти(СтрокаСегмента,"G"+РазделительКолонок)=1 Цикл
		МассивОшибок.Добавить(
			ОбщиеФункции.РазбитьСтрокуНаСоставляющие(
				СтрокаСегмента,
				РазделительКолонок,
				Новый Структура("ТипСегмента,Год,КодПартнера,ГУИД,НазваниеСообщения,ВременнойПериод,Протокол,Месяц,День,ТипПакета,ПрошлыйГУИД,Статус,КодОшибки,ОписаниеОшибки")
			)
		);
		СтрокаСегмента = Текст.ПрочитатьСтроку();
		Этап = 1;
	КонецЦикла;
	
	// Чтение заголовков
	инд = 1;
	Пока СтрокаСегмента <> Неопределено И Найти(СтрокаСегмента,"H"+РазделительКолонок)=1 Цикл
		Если инд > 1 Тогда
			Если ЗначениеЗаполнено(СтрокаСегмента) Тогда
				МассивОшибок.Добавить(
					ОбщиеФункции.РазбитьСтрокуНаСоставляющие(
						СтрокаСегмента,
						РазделительКолонок,
						Новый Структура("ТипСегмента,СкладПартнера,КодТТ,КодТТЛореаль,Регион,Город,Адрес,Дом,ИмяТТ,ИНН,Резерв1,Резерв2,Канал,КодСетиЛореаль,СтатусТТ,КодОшибки,ОписаниеОшибки")
					)
				);
			КонецЕсли;
		КонецЕсли;
		инд = инд + 1;
		СтрокаСегмента = Текст.ПрочитатьСтроку();
		Этап = 2;
	КонецЦикла;
	
	// Чтение табчасти
	инд = 1;
	Пока СтрокаСегмента <> Неопределено И Найти(СтрокаСегмента,"I"+РазделительКолонок)=1 Цикл
		Если инд > 1 Тогда
			Если ЗначениеЗаполнено(СтрокаСегмента) Тогда
				МассивОшибок.Добавить(
					ОбщиеФункции.РазбитьСтрокуНаСоставляющие(
						СтрокаСегмента,
						РазделительКолонок,
						Новый Структура("ТипСегмента,СкладПартнера,НомерДокумента,КодТовара,ТипРасхода,ТипПродукта,НомерСтроки,КодМатериала,Количество,ЕдиницаИзмерения,СуммаБезНДС,СуммаСНДС,СтоимостьСНДС,Валюта,ДатаОтгрузки,КодТТЛореаль,СтатусДокумента,КодТТ,КодОшибки,ОписаниеОшибки")
					)
				);
			КонецЕсли;
		КонецЕсли;
		инд = инд + 1;
		СтрокаСегмента = Текст.ПрочитатьСтроку();
		Этап = 3;
	КонецЦикла;
	
	// Обработка массива ошибок
	ТекстВозврат = "<table width=""80%"" cellpadding=""2"" cellspacing=""0"" border=""1"">"+Символы.ПС;
	Для Каждого ЭлОшибка Из МассивОшибок Цикл
		Если ЭлОшибка.ТипСегмента = "G" Тогда
			Попытка
				ДатаОтчета = Формат(Дата(ЭлОшибка.День),"ДФ=dd.MM.yyyy");
			Исключение
				ДатаОтчета = ЭлОшибка.День;
			КонецПопытки;
			ТекстСтроки =
				"<tr bgcolor=""" + ?(ЭлОшибка.Статус="SUCCESS","#55cc55","#ff878e")
				+ """><td style=""font-size:9pt;color:" + ?(ЭлОшибка.Статус="SUCCESS","#082208","#600000") + """><b>"
				+ ?(ЭлОшибка.ВременнойПериод="MONTHLY","Ежемесячный","Ежедневный")
				+ " отчет по реализации за период " + ДатаОтчета
				+ " (ГУИД: " + ЭлОшибка.ГУИД + ") ";
			Если ЭлОшибка.Статус = "SUCCESS" Тогда
				ТекстСтроки = ТекстСтроки + "принят и обработан успешно!";
			ИначеЕсли ЭлОшибка.Статус = "SENT" Тогда
				ТекстСтроки = ТекстСтроки + "отправлен, но пока не обработан!";
			ИначеЕсли ЭлОшибка.Статус = "PROCESS" Тогда
				ТекстСтроки = ТекстСтроки + "отправлен и принят, но пока не обработан!";
			Иначе
				ТекстСтроки = ТекстСтроки + "обработан с ошибками!<br>"
					+ СтрЗаменить(РасшифроватьОшибкиЗагрузкиШапкиBizTalk(ВыделитьКодОшибки(ЭлОшибка.КодОшибки)),РазделительСтрок,"<br>"+РазделительСтрок);
			КонецЕсли;
			ТекстСтроки = ТекстСтроки + "</b>";
			Если ЭлОшибка.Статус = "SUCCESS" Тогда
				ОтчетУдачен = Истина;
				Прервать;
			КонецЕсли;
		ИначеЕсли ЭлОшибка.ТипСегмента = "H" Тогда
			//КодОшибки = ВыделитьКодОшибки(ЭлОшибка.КодОшибки);
			БезОшибок = ВыделитьКодОшибки(ЭлОшибка.КодОшибки)=0;
			ТекстСтроки =
				"<tr bgcolor=""" + ?(БезОшибок,"#77ee77","#ffa9af")
				+ """><td style=""font-size:9pt;color:" + ?(БезОшибок,"#113311","#8b0000") + """>"
				+ "<b>Документ контрагента " + ЭлОшибка.ИмяТТ + " (код " + ЭлОшибка.КодТТ + ") "
				+ ?(
					БезОшибок,
					"обработан успешно!",
					"имеет следующие ошибки:</b><br>"
						+ СтрЗаменить(РасшифроватьОшибкиЗагрузкиМастерДанныхBizTalk(ЭлОшибка.КодОшибки),РазделительСтрок,"<br>"+РазделительСтрок)
				)
		ИначеЕсли ЭлОшибка.ТипСегмента = "I" Тогда
			//КодОшибки = ВыделитьКодОшибки(ЭлОшибка.КодОшибки);
			БезОшибок = ВыделитьКодОшибки(ЭлОшибка.КодОшибки)=0;
			ТекстСтроки =
				"<tr bgcolor=""" + ?(БезОшибок,"#aeffae","#ffc7ce")
				+ """><td style=""font-size:9pt;color:" + ?(БезОшибок,"#224422","#9c0006") + """>"
				+ "<b>Строка " + ЭлОшибка.НомерСтроки + " (код товара: " + СокрП(ЭлОшибка.КодТовара) + "):</b><br>" 
				+ СтрЗаменить(РасшифроватьОшибкиЗагрузкиСпецификацииДвиженийBizTalk(ЭлОшибка.КодОшибки),РазделительСтрок,"<br>"+РазделительСтрок);
		КонецЕсли;
		ТекстСтроки = ТекстСтроки + "</td></tr>"+Символы.ПС;
		ТекстВозврат = ТекстВозврат + ТекстСтроки;
	КонецЦикла;
	
	ТекстВозврат = ТекстВозврат + "</table>"+Символы.ПС;
	
	Возврат Новый Структура ("Удача,Текст,Этап", ОтчетУдачен, ТекстВозврат, Этап);
	
КонецФункции

Функция ОбработатьЛогОстатков(ПолноеИмяФайла) Экспорт
	
	ОтчетУдачен = Ложь;
	Этап = 0;
	
	Текст = Новый ЧтениеТекста(ПолноеИмяФайла, КодировкаТекстаФайлов, РазделительСтрок);
	
	// Чтение заголовка
	МассивОшибок = Новый Массив;
	СтрокаСегмента = Текст.ПрочитатьСтроку();
	Пока СтрокаСегмента <> Неопределено И Найти(СтрокаСегмента,"G"+РазделительКолонок)=1 Цикл
		МассивОшибок.Добавить(
			ОбщиеФункции.РазбитьСтрокуНаСоставляющие(
				СтрокаСегмента,
				РазделительКолонок,
				Новый Структура("ТипСегмента,Год,КодПартнера,ГУИД,НазваниеСообщения,ВременнойПериод,Протокол,Месяц,День,ТипПакета,ПрошлыйГУИД,Статус,КодОшибки,ОписаниеОшибки")
			)
		);
		СтрокаСегмента = Текст.ПрочитатьСтроку();
		Этап = 1;
	КонецЦикла;
	
	// Чтение табчасти
	инд = 1;
	Пока СтрокаСегмента <> Неопределено И Найти(СтрокаСегмента,"I"+РазделительКолонок)=1 Цикл
		Если инд > 1 Тогда
			Если ЗначениеЗаполнено(СтрокаСегмента) Тогда
				МассивОшибок.Добавить(
					ОбщиеФункции.РазбитьСтрокуНаСоставляющие(
						СтрокаСегмента,
						РазделительКолонок,
						Новый Структура(
							"ТипСегмента,ДатаСреза,СкладПартнера,КодТТ,КодТовара,ТипПродукта,КодМатериала,Штрихкод,НаименованиеТовара,ЕдиницаИзмерения,"
							+ "КоличествоОстаток,КоличествоОстатокДоступный,СуммаБезНДС,СуммаСНДС,СтоимостьБезНДС,СтоимостьСНДС,Валюта,"
							+ "СтокПредДня,СтокТекДня,СуммаПродажТекДень,СуммаПрихТекДень,ОтклонениеСтока,ЛимитОтклонения,Подстановочные,Подразделение,"
							+ "КодОшибки,ОписаниеОшибки"
						)
					)
				);
			КонецЕсли;
		КонецЕсли;
		инд = инд + 1;
		СтрокаСегмента = Текст.ПрочитатьСтроку();
		Этап = 2;
	КонецЦикла;
	
	// Обработка массива ошибок
	ТекстВозврат = "<table width=""80%"" cellpadding=""2"" cellspacing=""0"" border=""1"">"+Символы.ПС;
	Для Каждого ЭлОшибка Из МассивОшибок Цикл
		Если ЭлОшибка.ТипСегмента = "G" Тогда
			Попытка
				ДатаОтчета = Формат(Дата(ЭлОшибка.День),"ДФ=dd.MM.yyyy");
			Исключение
				ДатаОтчета = ЭлОшибка.День;
			КонецПопытки; 
			ТекстСтроки =
				"<tr bgcolor=""" + ?(ЭлОшибка.Статус="SUCCESS","#55cc55","#ff878e")
				+ """><td style=""font-size:9pt;color:" + ?(ЭлОшибка.Статус="SUCCESS","#082208","#600000") + """><b>"
				+ ?(ЭлОшибка.ВременнойПериод="MONTHLY","Ежемесячный","Ежедневный")
				+ " отчет по остаткам за период " + ДатаОтчета
				+ " (ГУИД: " + ЭлОшибка.ГУИД + ") ";
			Если ЭлОшибка.Статус = "SUCCESS" Тогда
				ТекстСтроки = ТекстСтроки + "принят и обработан успешно!";
			ИначеЕсли ЭлОшибка.Статус = "SENT" Тогда
				ТекстСтроки = ТекстСтроки + "отправлен, но пока не обработан!";
			ИначеЕсли ЭлОшибка.Статус = "PROCESS" Тогда
				ТекстСтроки = ТекстСтроки + "отправлен и принят, но пока не обработан!";
			Иначе
				ТекстСтроки = ТекстСтроки + "обработан с ошибками!<br>"
					+ СтрЗаменить(РасшифроватьОшибкиЗагрузкиШапкиBizTalk(ЭлОшибка.КодОшибки),РазделительСтрок,"<br>"+РазделительСтрок);
			КонецЕсли;
			ТекстСтроки = ТекстСтроки + "</b>";
			Если ЭлОшибка.Статус = "SUCCESS" Тогда
				ОтчетУдачен = Истина;
				Прервать;
			КонецЕсли;
		ИначеЕсли ЭлОшибка.ТипСегмента = "I" Тогда
			//КодОшибки = ВыделитьКодОшибки(ЭлОшибка.КодОшибки);
			БезОшибок = ВыделитьКодОшибки(ЭлОшибка.КодОшибки)=0;
			Попытка
				ДатаСреза = Формат(Дата(ЭлОшибка.ДатаСреза),"ДФ=dd.MM.yyyy");
			Исключение
				ДатаСреза = ЭлОшибка.ДатаСреза;
			КонецПопытки;
			ТекстСтроки =
				"<tr bgcolor=""" + ?(БезОшибок,"#aeffae","#ffc7ce")
				+ """><td style=""font-size:9pt;color:" + ?(БезОшибок,"#224422","#9c0006") + """>"
				+ "<b>На дату среза " + ДатаСреза + " строка по товару " + ЭлОшибка.НаименованиеТовара + " (код товара: " + СокрП(ЭлОшибка.КодТовара) + ") "
				+ ?(БезОшибок,"обработана!","содержит следующие ошибки:") + "</b><br>"
				+ СтрЗаменить(РасшифроватьОшибкиЗагрузкиСпецификацииОстатковBizTalk(ЭлОшибка.КодОшибки),РазделительСтрок,"<br>"+РазделительСтрок);
		КонецЕсли;
		ТекстСтроки = ТекстСтроки + "</td></tr>"+Символы.ПС;
		ТекстВозврат = ТекстВозврат + ТекстСтроки;
	КонецЦикла;
	
	ТекстВозврат = ТекстВозврат + "</table>"+Символы.ПС;
	
	Возврат Новый Структура ("Удача,Текст,Этап", ОтчетУдачен, ТекстВозврат, Этап);
	
КонецФункции

Функция ПолучитьОтветОтЛореаль(ГУИД, Знач ТипОтчета="INVOICIN", Этап=1, НомерПопытки=1) Экспорт
	
	Перем ПрефиксТипа, КаталогПоиска, Обработан, ФактическоеИмяФайла, ПереместитьВОбработанные;
	
	//Переинициализация входных параметров - т.к. почему-то нулевые значения из параметров не передаются
	Этап = ?(ЗначениеЗаполнено(Этап),Этап,0);
	НомерПопытки = ?(ЗначениеЗаполнено(НомерПопытки),НомерПопытки,0);
	
	ТипОтчета = ВРег(СокрЛП(ТипОтчета));
	Обработан = Ложь;
	ПереместитьВОбработанные = Ложь;
	ВремКат = КаталогВременныхФайлов();
	КаталогНовыхЛоговFTP = "/LOG/";
	КаталогОбработанныхЛоговFTP = КаталогНовыхЛоговFTP + "Processed/";
	
	// Попробуем установить соединение с FTP-сервером (через 10 минут)
	Удача = ИнициализироватьПодключениеFTP();
	Если НЕ Удача Тогда
		СоздатьРегламентноеЗадание(ГУИД,ТипОтчета,Этап,НомерПопытки+1,600);
		ВызватьИсключение "Не удалось установить подключение к серверу FTP! Задание пересоздано.";
		Возврат Неопределено;
	КонецЕсли;
	
	ИнициализироватьПеременные();
	
	ПредполагаемоеИмяФайла = "LOG_" + ТипОтчета + "_" + КодПартнера + "_" + ВРег(ГУИД) + ".TXT";
	
	// Поищем в папке необработанных логов
	КаталогПоиска = КаталогНовыхЛоговFTP;
	ФайлыНайденные = СоединениеFTP.НайтиФайлы(КаталогПоиска,"LOG_"+ТипОтчета+"_"+КодПартнера+"_*.txt");
	Для Каждого элФайлНайд Из ФайлыНайденные Цикл
		Если ВРег(элФайлНайд.Имя) = ПредполагаемоеИмяФайла Тогда
			ФактическоеИмяФайла = элФайлНайд.Имя;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Если не найдено, то поищем в обработанных
	Если ФактическоеИмяФайла=Неопределено Тогда
		КаталогПоиска = КаталогОбработанныхЛоговFTP;
		ФайлыНайденные = СоединениеFTP.НайтиФайлы(КаталогПоиска,"LOG_"+ТипОтчета+"_"+КодПартнера+"_*.txt");
		Для Каждого элФайлНайд Из ФайлыНайденные Цикл
			// Если этот лог уже в списке обработанных, то заново обрабатывать бессмысленно
			Если ВРег(элФайлНайд.Имя) = ПредполагаемоеИмяФайла Тогда
				ФактическоеИмяФайла = элФайлНайд.Имя;
				Обработан = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Ответ = Новый Структура ("Удача,Текст,Этап", Обработан, "", Этап); // перестраховка :)
	Иначе
		
		// Загрузим файл лога на компьютер
		ИмяЛокальногоФайла = ВремКат + ФактическоеИмяФайла;
		СоединениеFTP.Получить(элФайлНайд.ПолноеИмя, ИмяЛокальногоФайла);
		
		// Заранее подготовим тему электронного письма
		ТемаПисьма = "Выгрузка L'Oreal. Ошибка: Имеются проблемы в выгрузке по ";
		Если ТипОтчета="INVRPT" Тогда
			Ответ = ОбработатьЛогОстатков(ИмяЛокальногоФайла);
			ТемаПисьма = ТемаПисьма + "остаткам";
		ИначеЕсли ТипОтчета="INVOIC" Тогда
			Ответ = ОбработатьЛогРеализации(ИмяЛокальногоФайла);
			ТемаПисьма = ТемаПисьма + "реализации";
		Иначе
			Ответ = ОбработатьЛогПоступления(ИмяЛокальногоФайла);
			ТемаПисьма = ТемаПисьма + "поступлениям";
		КонецЕсли;
		
		Если Ответ.Удача ИЛИ Ответ.Этап>1 Тогда
			ПереместитьВОбработанные = Истина;
			Если НЕ Ответ.Удача Тогда
				ОтправитьПисьмоМенеджеру(
					ТемаПисьма,
					"<font face=""Tahoma,Arial"" size=""-1"">
					|<p>Выгрузка отчета по "
						+ ?(ТипОтчета="INVRPT","остаткам",?(ТипОтчета="INVOIC","реализации","поступлениям"))
						+ " (ГУИД: " + ВРег(ГУИД) + ", имя файла: """ + ТипОтчета + "_" + КодПартнера + "_" + ВРег(ГУИД) + ".txt"")
					|произведена, но не принята системой L'Oreal по нижеприведенным причинам:</p>
					|<p></p>
					|" + Ответ.Текст + "
					|<p><font face=""Tahoma,Arial"" size=""-2"" color=""#777777"">
					|<b>Данное письмо было сформировано автоматически, отвечать на него не следует!</b>
					|</font></p>
					|"
				);
			КонецЕсли;
			Обработан = Истина;
		ИначеЕсли НЕ Ответ.Удача И НомерПопытки>=ПределПопытокСозданияЗаданияПроверки Тогда
			// Если попытки получить полный ответ исчерпаны, то надо все равно убраться за собой
			ПереместитьВОбработанные = Истина;
		КонецЕсли;
		
		Если ПереместитьВОбработанные Тогда
			// Если удалось корректно обработать лог, то переместим файл лога в папку обработанных
			СоединениеFTP.Записать(
				ИмяЛокальногоФайла,
				КаталогОбработанныхЛоговFTP + ФактическоеИмяФайла
			);
			СоединениеFTP.Удалить(
				КаталогНовыхЛоговFTP,
				ФактическоеИмяФайла
			);
		КонецЕсли;
		
	КонецЕсли;
	
	//Удалим предыдущие регламентные по этому ГУИДу и Типу отчета (в т.ч. и то, которое инициировало эту проверку)
	ЗаданиеМета = Метаданные.РегламентныеЗадания.ВыгрузкаЛореаль;
	РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные,Ключ",ЗаданиеМета,ВРег(ГУИД)));
	Для Каждого РегЗадание Из РегЗадания Цикл
		Если РегЗадание.Параметры.Количество()>2 И РегЗадание.Параметры[0]=Истина И ВРег(СокрЛП(РегЗадание.Параметры[2]))=ТипОтчета Тогда
			РегЗадание.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	// Регламентное задание на перепроверку пересоздаем на время + 1 час (потому что Лореаль склонен задерживаться с ответами)
	Если НЕ Обработан Тогда
		СоздатьРегламентноеЗадание(ГУИД, ТипОтчета, Ответ.Этап, НомерПопытки+1, 3600);
	КонецЕсли;
	
КонецФункции



///////////////////////////////////////////
// РАЗЛИЧНЫЕ ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ, АЛГОРИТМЫ ОБЩЕГО ПОЛЬЗОВАНИЯ

Функция ОтправитьПисьмоМенеджеру(ТемаПисьма,ТекстПисьма,Вложения=Неопределено,ЭтоHTML=Истина) Экспорт
	
	АдресЭлектроннойПочтыОтправителя = "borovikao@soveren.ru";
	АдресЭлектроннойПочтыПолучателя = "instancy@mail.ru";
	
	ТемаПисьма = ТемаПисьма;
	
	Попытка
		ПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;
		ПочтовыйПрофиль.АдресСервераPOP3   = "192.168.223.254";
		ПочтовыйПрофиль.АдресСервераSMTP   = "192.168.223.254";
		ПочтовыйПрофиль.ПортSMTP           = 25;
		ПочтовыйПрофиль.ПортPOP3           = 110;
		ПочтовыйПрофиль.Пользователь       = "gasadovek"; 
		ПочтовыйПрофиль.Пароль             = "166584";
		ПочтовыйПрофиль.ВремяОжидания      = 21;
		Почта = Новый ИнтернетПочта();
		Почта.Подключиться(ПочтовыйПрофиль);
		Письмо = Новый ИнтернетПочтовоеСообщение ;
		Письмо.Кодировка = "windows-1251";
		Письмо.Тема = ТемаПисьма;
		Письмо.ИмяОтправителя="ТД Шкуренко";
		Письмо.Отправитель=АдресЭлектроннойПочтыОтправителя;
		Письмо.Получатели.Добавить(АдресЭлектроннойПочтыПолучателя);
		Письмо.Получатели.Добавить("borovikao@soveren.ru");
		Если ТипЗнч(Вложения)=Тип("Массив") Тогда
			Для Каждого ЭлВлож Из Вложения Цикл
				Письмо.Вложения.Добавить(ЭлВлож);
			КонецЦикла;
		КонецЕсли;
		Текст = Письмо.Тексты.Добавить(ТекстПисьма);
		Текст.ТипТекста = ?(ЭтоHTML,ТипТекстаПочтовогоСообщения.HTML,ТипТекстаПочтовогоСообщения.ПростойТекст);
		Почта.Послать(Письмо);
		Почта.Отключиться();
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция РасшифроватьОшибкиЗагрузкиШапкиBizTalk(Знач КодОшибки) Экспорт
	КодОшибки = ВыделитьКодОшибки(КодОшибки);
	Возврат
		  ?(ПроверитьБит(КодОшибки,1),"Ошибка G2: Неправильная структура данных"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,2),"Ошибка G4: Несуществующий тип сегмента"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,3),"Ошибка G8: Повторяющиеся ключевые поля в сегменте общей информации"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,4),"Ошибка G16: Не указан GUID идентификатор либо повторно пришедший GUID идентификатор сообщения"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,5),"Ошибка G32: Код партнера не указан в учетных данных"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,6),"Ошибка G64: Не указан или неверен формат года"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,7),"Ошибка G128: Не указан или неверен период сообщения"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,8),"Ошибка G256: Не указан или неверен протокол передачи данных"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,9),"Ошибка G512: Не указан или неверен формат месяца"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,10),"Ошибка G1024: Не указан или неверен формат даты"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,11),"Ошибка G2048: Не указан или неверен тип сообщения"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,12),"Ошибка G4096: Данные не загружены. По GUID-у не получен полный пакет интерфейсов"+РазделительСтрок,"")
		//+ ?(ПроверитьБит(КодОшибки,12),"Ошибка G4096: Данные не приняты в SAP BW"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,13),"Ошибка G8192: Данные не загружены. Не доставлены все записи по интерфейсу (внутренняя ошибка L’Oreal)"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,14),"Ошибка G16384: Данные не загружены. Обнаружена расходимость факт. и расч. стоков по данным из др. интерфейсов (см. подр. инфо в файле стоков)"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,15),"Ошибка G32768: Данные не загружены. Найдена блокирующая загрузку ошибка в одном из файлов (INVRPT, INVOIC, INVOICIN)"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,16),"Ошибка G65536: Данные загружены, но обнаружены ошибки обработки, требующие корректировок со стороны партнера"+РазделительСтрок,"")
	;
КонецФункции

Функция РасшифроватьОшибкиЗагрузкиМастерДанныхBizTalk(Знач КодОшибки) Экспорт
	КодОшибки = ВыделитьКодОшибки(КодОшибки);
	Возврат
		  ?(ПроверитьБит(КодОшибки,1),"Ошибка H2: Код партнера не найден в справочнике"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,2),"Ошибка H4: Код склада партнера не найден в справочнике"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,3),"Ошибка H8: Город не найден в справочнике"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,4),"Ошибка H16: Сеть не найдена в справочнике"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,5),"Ошибка H32: Неправильно указан статус адреса отгрузки"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,6),"Ошибка H64: Не указан код адреса доставки ERP партнера"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,7),"Ошибка H128: Не указан Город"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,8),"Ошибка H256: Не указан адрес доставки"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,9),"Ошибка H512: Не указано имя клиента"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,10),"Ошибка H1024: Неправильно указан тип адреса доставки"+РазделительСтрок,"")
	;
КонецФункции

Функция РасшифроватьОшибкиЗагрузкиСпецификацииДвиженийBizTalk(Знач КодОшибки) Экспорт
	КодОшибки = ВыделитьКодОшибки(КодОшибки);
	Возврат
		  ?(ПроверитьБит(КодОшибки,1),"Ошибка I2: 'Partner Code' не найден в справочнике"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,2),"Ошибка I4: 'Partner Warehouse Code' не найден в справочнике"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,3),"Ошибка I8: Не указан код адреса доставки ERP партнера"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,4),"Ошибка I16: Код материала L'Oreal неверен"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,5),"Ошибка I32: Пустое либо неправильное значение 'Promo Action Code'"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,6),"Ошибка I64: Пустое либо неправильное значение 'Document type'"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,7),"Ошибка I128: Пустое либо неправильное значение 'Document status'"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,8),"Ошибка I256: Неправильный формат даты в поле 'Invoice delivery date'"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,9),"Ошибка I512: Не указан 'ERP Invoice number' либо 'ERP Invoice number' не соответствует номеру накладной отгруженной из L'Oreal(для приходов со склада L'Oreal)"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,10),"Ошибка I1024: Не указан 'Код продукта ERP'"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,11),"Ошибка I2048: Нецелочисленный формат номера позиции накладной/счет-фактуры"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,12),"Ошибка I4096: Не найден код 'ERP delivery address code'"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,13),"Ошибка I8192: Нецелочисленный формат в поле 'Invoice Item Quantity'"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,14),"Ошибка I16384: Нечисловой формат в поле 'Net Item value (without Tax)'"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,15),"Ошибка I32768: Нечисловой формат в поле 'Net Item value (with Tax)'"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,16),"Ошибка I65536: Нечисловой формат в поле 'Supplier's Item value (with Tax)'"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,17),"Ошибка I131072: Не найдено или имеет неправильный формат значение в поле 'Unit of measure'"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,18),"Ошибка I262144: Не найдено или имеет неправильный формат значение в поле 'Unit of measure of Monetary term'"+РазделительСтрок,"")
		+ ?(ПроверитьБит(КодОшибки,19),"Ошибка I524288: Не указан рынок сбыта (Сбытовая организация/канал сбыта/подразделение)'"+РазделительСтрок,"")
	;
КонецФункции

Функция РасшифроватьОшибкиЗагрузкиСпецификацииОстатковBizTalk(Знач КодОшибки) Экспорт
	Префикс = Лев(КодОшибки,1);
	КодОшибки = ВыделитьКодОшибки(КодОшибки);
	Возврат
		  ?(Префикс="I" И ПроверитьБит(КодОшибки,1),"Ошибка I2: Формат 'Release date' неверен"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,2),"Ошибка I4: Код партнера не найден в справочнике"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,3),"Ошибка I8: Код склада партнера не найден в справочнике"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,4),"Ошибка I16: Не найден в справочнике ни код материала L'Oreal ни EAN"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,5),"Ошибка I32: Неправильно указана единица измерения 'Unit of measure'"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,6),"Ошибка I64: Нецелочисленный формат данных в поле 'Fact stock q-ty'"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,7),"Ошибка I128: Нецелочисленный формат данных в поле 'Available for order q'"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,8),"Ошибка I256: Нечисловой формат поля 'Stock cost with Suppl's trfs w/o Tax'"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,9),"Ошибка I512: Нечисловой формат поля 'Stock cost with Suppl's tariffs (Tax)'"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,10),"Ошибка I1024: Нечисловой формат поля 'Part's Net Item value (without Tax)'"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,11),"Ошибка I2048: Нечисловой формат поля 'Partner's Net Item value (with Tax)'"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,12),"Ошибка I4096: Неправильно указана ед. из. 'Unit of measure for currency'"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,13),"Ошибка I8192: Неправильно указан 'ERP delivery address code'"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,14),"Ошибка I16384: Неправильно указан 'Complex product'"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,15),"Ошибка I32768: Не найден или отсутствует ERP material code"+РазделительСтрок,"")
		+ ?(Префикс="I" И ПроверитьБит(КодОшибки,16),"Ошибка I65536: Не верно указана Sales Organisation, Division, Dist channel"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,0),"Ошибка C1: Несходимость внутри диапазона < контрольного значения (DIV)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,1),"Ошибка C2: Несходимость внутри диапазона > контрольного значения (DIV)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,2),"Ошибка C4: Несходимость на границе [с] < контрольного значения (DIV)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,3),"Ошибка C8: Несходимость на границе [с] > контрольного значения (DIV)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,4),"Ошибка C16: Несходимость на границе [по] < контрольного значения (DIV)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,5),"Ошибка C32: Несходимость на границе [по] > контрольного значения (DIV)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,6),"Ошибка C64: Несходимость внутри диапазона < контрольного значения (MAT)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,7),"Ошибка C128: Несходимость внутри диапазона > контрольного значения (MAT)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,8),"Ошибка C256: Несходимость на границе [с] < контрольного значения (MAT)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,9),"Ошибка C512: Несходимость на границе [с] > контрольного значения (MAT)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,10),"Ошибка C1024: Несходимость на границе [по] < контрольного значения (MAT)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,11),"Ошибка C2048: Несходимость на границе [по] > контрольного значения (MAT)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,12),"Ошибка C4096: Несходимость на границе [с] > контрольного значения (DIV) (блокирующая)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,13),"Ошибка C8192: Несходимость на границе [с] > контрольного значения (MAT) (блокирующая)"+РазделительСтрок,"")
		+ ?(Префикс="C" И ПроверитьБит(КодОшибки,14),"Ошибка C16384: Несходимость внутри диапазона > контрольного значения (MAT) (блокирующая)"+РазделительСтрок,"")
	;
КонецФункции

Функция СоздатьРегламентноеЗадание(ГУИД, Знач ТипОтчета="INVOICIN", Этап=0, НомерПопытки=1, Отсрочка=600, ИнтервалЗавершения=1800) Экспорт
	
	ТипОтчета = ВРег(ТипОтчета);
	
	// Если несколько раз не удается, тогда уместнее оповестить менеджера и забить на это занятие вовсе
	Если НомерПопытки > ПределПопытокСозданияЗаданияПроверки Тогда
		ОтправитьПисьмоМенеджеру(
			"Выгрузка L'Oreal. Ошибка: Не получен ответ на выгрузку",
			"<font face=""Tahoma,Arial"" size=""-1"">
			|<p>После выгрузки отчета по "
				+ ?(ТипОтчета="INVRPT","остаткам",?(ТипОтчета="INVOIC","реализации","поступлениям"))
				+ " (ГУИД: " + ВРег(ГУИД) + ", имя файла: """ + ТипОтчета + "_" + КодПартнера + "_" + ВРег(ГУИД) + ".txt""),
			|с " + Формат(НомерПопытки-1,"ЧГ=;ЧН=") + "-й попытки не удалось получить достаточный ответ от L'Oreal</p>
			|<p>Процесс приостановлен на " + Строка(Этап) + "-м этапе. "
				+ ?(Этап=1,"Возможно, система L'Oreal сочла формат файла некорректным.","") + "
			|Требуется проверка вручную.</p>
			|<p></p>
			|<p><font face=""Tahoma,Arial"" size=""-2"" color=""#777777"">
			|<b>Данное письмо было сформировано автоматически, отвечать на него не следует!</b>
			|</font></p>
			|",
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Параметры создаваемого задания
	ПарамРег1=Новый Массив;
	ПарамРег1.Добавить(Истина);			// [1] Это проверка (всегда)
	ПарамРег1.Добавить(ГУИД);			// [2] ГУИД задания (и отправки)
	ПарамРег1.Добавить(ТипОтчета);		// [3] Тип отчета (INVOICIN = поступления, INVOIC = реализация, INVRPT = остатки)
	ПарамРег1.Добавить(Этап);			// [4] Этап, на котором остановилось предыдущее задание
	ПарамРег1.Добавить(НомерПопытки);	// [5] которая попытка уже
	
	// Создаем новое задание
	Рег1=РегламентныеЗадания.СоздатьРегламентноеЗадание("ВыгрузкаЛореаль");
	Рег1.Наименование=
		"Проверка выгрузки " + ?(ТипОтчета="INVRPT","остатков",?(ТипОтчета="INVOIC","реализации","поступлений"))
			+ " для Лореаль (попытка #" + Формат(НомерПопытки,"ЧГ=;ЧН=") + ")";
	Рег1.Ключ = ГУИД;
	Рег1.Параметры=ПарамРег1;
	Рег1.ИнтервалПовтораПриАварийномЗавершении = 300;
	Рег1.Использование = Истина;
	
	// Настраиваем расписание (так, чтобы запускалось один раз, через заданное параметром "Отсрочка" количество секунд)
	ДатаВремяВыполнения = ТекущаяДата()+Отсрочка; // отсрочка - в секундах
	Рег1.Расписание.ДатаНачала = НачалоДня(ДатаВремяВыполнения);
	Рег1.Расписание.ВремяНачала = ДатаВремяВыполнения;
	Рег1.Расписание.ПериодПовтораДней = 0;
	Рег1.Расписание.ИнтервалЗавершения = ИнтервалЗавершения;
	
	// Сохраняем задание
	Рег1.Записать();
	
	Возврат Истина;
	
КонецФункции



///////////////////////////////////////////
// ОБЩЕГО НАЗНАЧЕНИЯ

// Проверяет, установлен ли бит с указанным номером во входном числе
// 
// Параметры:
//	ЧислоВходное			[Число]		Входное число
//	НомерБита				[Число]		Номер бита, подлежащего проверке (нумерация с конца, с 0-го бита)
// 	-----
// 	{Возвращаемое значение}	[Булево]	Установлен ли бит
// 
// Пример использования:
//	userAccountControl = 66048;
//	AccountDisabled = ПроверитьБит(userAccountControl, 1);
//	//{в результате вернется Ложь}
//
Функция ПроверитьБит(Знач ЧислоВходное, НомерБита) Экспорт
			
	Попытка
		Результат = Число(ЧислоВходное);
	Исключение
		Результат = 0;
	КонецПопытки;
	
	Для Сч = 1 По НомерБита Цикл
		Результат = Цел(Результат/2);
	КонецЦикла;
	Возврат Результат % 2 = 1;
			
КонецФункции

Функция ВыделитьКодОшибки(Знач СтрВх) Экспорт
	СтрВх = СокрЛП(СтрВх);
	лПервыйСимвол = Лев(СтрВх,1);
	лЕстьПрефикс = лПервыйСимвол="G" ИЛИ лПервыйСимвол="H" ИЛИ лПервыйСимвол = "I" ИЛИ лПервыйСимвол = "C";
	Попытка
		Если лЕстьПрефикс Тогда
			СтрВх = Сред(СтрВх,2);
		КонецЕсли;
		Возврат Число(СтрВх);
	Исключение
		Возврат 0;
	КонецПопытки;
КонецФункции

Функция ВыделитьНаселенныйПункт(Знач СтрВх) Экспорт
	
	СписокСокращений = Новый Массив;
	СписокСокращений.Добавить("волость");	// Волость
	СписокСокращений.Добавить("г");			// Город
	СписокСокращений.Добавить("д");			// Деревня
	СписокСокращений.Добавить("дер");		// Деревня
	СписокСокращений.Добавить("днп");		// Дачное неком-е партнерство
	СписокСокращений.Добавить("дп");		// Дачный поселок
	СписокСокращений.Добавить("лпх");		// Леспромхоз
	СписокСокращений.Добавить("кп");		// Курортный поселок
	СписокСокращений.Добавить("массив");	// Массив
	СписокСокращений.Добавить("мкр");		// Микрорайон
	СписокСокращений.Добавить("мкрр-н");	// Микрорайон
	СписокСокращений.Добавить("нп");		// Населенный пункт
	СписокСокращений.Добавить("п");			// Поселок
	СписокСокращений.Добавить("пгт");		// Поселок городского типа
	СписокСокращений.Добавить("пос");		// Поселок
	СписокСокращений.Добавить("п/ст");		// Поселок и(при) станция(и)
	СписокСокращений.Добавить("рп");		// Рабочий поселок
	СписокСокращений.Добавить("с");			// Село
	СписокСокращений.Добавить("сл");		// Слобода
	СписокСокращений.Добавить("снт");		// Садовое неком-е товарищество
	СписокСокращений.Добавить("ст");		// Станция
	СписокСокращений.Добавить("ст-ца");		// Станица
	СписокСокращений.Добавить("с/а");		// Сельская администрация
	СписокСокращений.Добавить("с/мо");		// Сельское муниципальное образо
	СписокСокращений.Добавить("с/о");		// Сельский округ
	СписокСокращений.Добавить("с/п");		// Сельское поселение
	СписокСокращений.Добавить("с/с");		// Сельсовет
	СписокСокращений.Добавить("тер");		// Территория
	СписокСокращений.Добавить("уч-к");		// Участок
	СписокСокращений.Добавить("ф/х");		// Фермерское хозяйство
	СписокСокращений.Добавить("х");			// Хутор
	
	//Парсинг города
	лГород = ?(ЗначениеЗаполнено(СтрВх),СтрВх,"Омск г");
	лГорМасс = ОбщиеФункции.РазбитьСтрокуНаСоставляющие(лГород," ");
	//лГорМасс = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(лГород," ");
	лГорПостфикс = лГорМасс[лГорМасс.Количество()-1];
	лГорПостДлина = СтрДлина(лГорПостфикс);
	лГорПостфикс = НРег(СтрЗаменить(СокрЛП(лГорПостфикс),".",""));
	Если СписокСокращений.Найти(лГорПостфикс)<>Неопределено Тогда
		Возврат СокрЛП(Лев(лГород, СтрДлина(лГород)-лГорПостДлина));
	КонецЕсли;
	
	лГорПрефикс = лГорМасс[0];
	лГорПрефДлина = СтрДлина(лГорПрефикс);
	лГорПрефикс = НРег(СтрЗаменить(СокрЛП(лГорПрефикс),".",""));
	Если СписокСокращений.Найти(лГорПрефикс)<>Неопределено Тогда
		Возврат СокрЛП(Сред(лГород, лГорПрефДлина+1));
	КонецЕсли;
	
	Возврат лГород;
	
КонецФункции










