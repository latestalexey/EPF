Перем ТЗВыделенныеСтроки;

/// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ФормаПриОткрытии()
	ЗаполнитьТаблицуСоответствий();
КонецПроцедуры

Процедура КоманднаяПанель2ДействиеУдалитьКроме(Кнопка)
	ТЗВыделенныеСтроки.Очистить();
	ВыделенныеСтроки = ЭлементыФормы.Соответствия.ВыделенныеСтроки;
	Для Каждого ВыдСтрока Из ВыделенныеСтроки Цикл
		ТабСтрока = ТЗВыделенныеСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(ТабСтрока, ВыдСтрока);
	КонецЦикла;
	Соответствия.Загрузить(ТЗВыделенныеСтроки);
КонецПроцедуры

Процедура КоманднаяПанель2ДействиеОбновить(Кнопка)
	Соответствия.Очистить();
	ЗаполнитьТаблицуСоответствий();
КонецПроцедуры

Процедура СоответствияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.ИзРегистра Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЗолотистый;
	КонецЕсли;
	Если ДанныеСтроки.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
		ОформлениеСтроки.Ячейки.Номенклатура.ЦветФона = WebЦвета.СветлоРозовый;
	КонецЕсли;
КонецПроцедуры

Процедура СоответствияНоменклатураПриИзменении(Элемент)
	Эл = ЭлементыФормы.Соответствия;
	ТекСтрока = Эл.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
		ТекСтрока.КодНоменклатуры = ТекСтрока.Номенклатура.Код;
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыОсновныеДействияФормыЗаписатьРегистр(Кнопка)
	Если Вопрос("Вы действительно желаете сохранить результаты в регистр?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуСоответствийВРегистр();
	КонецЕсли;
КонецПроцедуры



/// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВыделитьЧистоеИмяФайла(Знач ИмяФайла) Экспорт
	
	ПозицияПоследнейТочки = СтрДлина(ИмяФайла);
	Пока ПозицияПоследнейТочки > 0 Цикл
		Если Сред(ИмяФайла, ПозицияПоследнейТочки, 1) = "." Тогда
			Прервать;
		КонецЕсли;
		ПозицияПоследнейТочки = ПозицияПоследнейТочки - 1;	
	КонецЦикла;

	Возврат Сред(ИмяФайла, 1, ПозицияПоследнейТочки - 1);
	
КонецФункции

Функция ЗаполнитьТаблицуСоответствий()
	
	ВремКат = КаталогВременныхФайлов();
	СвойствоСоответствия = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("000187");	// Артикул Лореаль
	
	// Установим FTP-соединение с сервером
	Удача = ИнициализироватьПодключениеFTP(,"lor_reference","btg6LLYS");
	Если НЕ Удача Тогда
		Предупреждение("Не удалось установить подключение к серверу поставщика!");
		Возврат Неопределено;
	КонецЕсли;
	
	// Получим файл архива с сервера FTP
	ИмяФайлаFTP = "materials_022014.zip";
	НеудачнаяЗагрузка = Ложь;
	ИмяЛокальногоФайлаАрхива = ВремКат + ИмяФайлаFTP;
	Попытка
		СоединениеFTP.Получить(ИмяФайлаFTP, ИмяЛокальногоФайлаАрхива);
	Исключение
		НеудачнаяЗагрузка = Истина;
		Предупреждение("Не найден архив каталога на сервере поставщика"+Символы.ПС+ОписаниеОшибки());
	КонецПопытки;
	Пока НеудачнаяЗагрузка Цикл
		ВведеноИмя = ВвестиСтроку(ИмяФайлаFTP,"Архив не найден на сервере. Введите другое имя");
		Если ВведеноИмя Тогда
			ИмяЛокальногоФайлаАрхива = ВремКат + ИмяФайлаFTP;
			Попытка
				СоединениеFTP.Получить(ИмяФайлаFTP, ИмяЛокальногоФайлаАрхива);
				НеудачнаяЗагрузка = Ложь;
			Исключение
				//Предупреждение("Не найден архив каталога на сервере поставщика"+Символы.ПС+ОписаниеОшибки());
			КонецПопытки;
		Иначе
			СоединениеFTP = Неопределено;
			Сообщить("Загрузка прервана");
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Распакуем файл каталога из архива
	ZIP = Новый ЧтениеZipФайла(ИмяЛокальногоФайлаАрхива);
	ИмяФайлаИзАрхива = ВыделитьЧистоеИмяФайла(ИмяФайлаFTP)+".csv";
	ЭлементАрхива = ZIP.Элементы.Найти(ИмяФайлаИзАрхива);
	Пока ЭлементАрхива=Неопределено Цикл
		ВведеноИмя = ВвестиСтроку(ИмяФайлаИзАрхива,"Файл каталога не найден в архиве. Введите другое имя");
		Если ВведеноИмя Тогда
			ЭлементАрхива = ZIP.Элементы.Найти(ИмяФайлаИзАрхива);
		Иначе
			Сообщить("Загрузка прервана");
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ИмяЛокальногоФайлаКаталога = ВремКат + ИмяФайлаИзАрхива;
	ZIP.Извлечь(ЭлементАрхива, ВремКат, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ZIP.Закрыть();
	
	// Приготовимся читать файл каталога (CSV)
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяЛокальногоФайлаКаталога);
	КоличествоСтрокТекстовогоДокумента = ТекстовыйДокумент.КоличествоСтрок();
	
	// Получим существующие записи из регистра соответствий номенклатуры
	НаборЗаписей = РегистрыСведений.КДО_СоответствияНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СвойствоСоответствия.Установить(СвойствоСоответствия);
	НаборЗаписей.Прочитать();
	ТЗ_СуществующиеЗаписи = НаборЗаписей.Выгрузить();
	ТЗ_СуществующиеЗаписи.Колонки.Добавить("ИзРегистра",Новый ОписаниеТипов("Булево"));
	
	// Получение таблицы файла
	СтруктураСтрокиФайла = Новый Структура("КодНоменклатурыКонтрагента,НаименованиеНоменклатурыКонтрагента,Марка,Бренд,Суббренд,ШтрихКодНоменклатурыКонтрагента,Раздел");
	ТЗ_CSV = Новый ТаблицаЗначений;
	ТЗ_CSV.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
	ТЗ_CSV.Колонки.Добавить("КодНоменклатурыКонтрагента", ОбщиеФункции.ПолучитьОписаниеТиповСтроки(40));
	ТЗ_CSV.Колонки.Добавить("ШтрихКодНоменклатурыКонтрагента", ОбщиеФункции.ПолучитьОписаниеТиповСтроки(24));
	ТЗ_CSV.Колонки.Добавить("НаименованиеНоменклатурыКонтрагента", ОбщиеФункции.ПолучитьОписаниеТиповСтроки(1024));
	Для НомерСтроки = 1 По КоличествоСтрокТекстовогоДокумента Цикл
		ДанныеСтроки = ОбщиеФункции.РазбитьСтрокуНаСоставляющие(ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки),";",СтруктураСтрокиФайла);
		СтрокаТЗ = ТЗ_CSV.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, ДанныеСтроки);
		СтрокаТЗ.НомерСтроки = НомерСтроки;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ ВТ.* ПОМЕСТИТЬ ВТ_ТЗ ИЗ &Таб КАК ВТ ИНДЕКСИРОВАТЬ ПО ШтрихКодНоменклатурыКонтрагента;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ВТ.ШтрихКодНоменклатурыКонтрагента КАК Штрихкод ПОМЕСТИТЬ ВТ_ШК ИЗ ВТ_ТЗ КАК ВТ;
	|";
	Запрос.УстановитьПараметр("Таб", ТЗ_CSV);
	Запрос.Выполнить();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВТ.НомерСтроки КАК НомерСтроки,
	|	ВТ.КодНоменклатурыКонтрагента КАК КодНоменклатурыКонтрагента,
	|	ВТ.ШтрихКодНоменклатурыКонтрагента КАК ШтрихКодНоменклатурыКонтрагента,
	//|   &ЕдИзмШт КАК ЕдИзмКонтрагента,
	|	ВТ.НаименованиеНоменклатурыКонтрагента КАК НаименованиеНоменклатурыКонтрагента,
	|	ЕСТЬNULL(ШК.Номенклатура,&ПустаяНоменкл) КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_ТабПоле
	|ИЗ
	|	ВТ_ТЗ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				ШтрихКоды.Штрихкод КАК Штрихкод,
	|				МАКСИМУМ(ШтрихКоды.Номенклатура) КАК Номенклатура
	|			ИЗ
	|				РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|					СОЕДИНЕНИЕ ВТ_ШК КАК ВТШК
	|						ПО Штрихкоды.Штрихкод = ВТШК.Штрихкод
	|					СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменкл
	|						ПО ШтрихКоды.Номенклатура = СпрНоменкл.Ссылка
	|			ГДЕ
	|				СпрНоменкл.ДистрибьюторскийКонтракт В (&СписокКонтрактов)
	|			СГРУППИРОВАТЬ ПО
	|				ШтрихКоды.Штрихкод
	|		) КАК ШК
	|			ПО ВТ.ШтрихКодНоменклатурыКонтрагента = ШК.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО КодНоменклатурыКонтрагента
	|;
	|
	|УНИЧТОЖИТЬ ВТ_ТЗ;
	|УНИЧТОЖИТЬ ВТ_ШК;
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(Таб.Номенклатура) КАК Номенклатура,
	|	МАКСИМУМ(Таб.ВариантНоменклатуры) КАК ВариантНоменклатуры,
	|	МАКСИМУМ(Таб.Производитель) КАК Производитель,
	|	&СвойствоСоответствия КАК СвойствоСоответствия,
	|	Таб.КодНоменклатурыКонтрагента КАК КодНоменклатурыКонтрагента,
	|	Таб.КодНоменклатурыКонтрагента КАК АртикулНоменклатурыКонтрагента,
	//|	МАКСИМУМ(Таб.АртикулНоменклатурыКонтрагента) КАК АртикулНоменклатурыКонтрагента,
	|	МАКСИМУМ(Таб.НаименованиеНоменклатурыКонтрагента) КАК НаименованиеНоменклатурыКонтрагента,
	|	МАКСИМУМ(Таб.ШтрихКодНоменклатурыКонтрагента) КАК ШтрихКодНоменклатурыКонтрагента,
	|	МАКСИМУМ(Таб.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	//|	МАКСИМУМ(Таб.ЕдИзмКонтрагента) КАК ЕдИзмКонтрагента,
	|	МАКСИМУМ(Таб.ИзРегистра) КАК ИзРегистра,
	|	МАКСИМУМ(Таб.Номенклатура.Код) КАК КодНоменклатуры
	|ИЗ
	|	(
	|		ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(Рег.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ТОГДА Рег.Номенклатура
	|				ИНАЧЕ ВТ.Номенклатура
	|			КОНЕЦ КАК Номенклатура,
	|			ЕСТЬNULL(Рег.ВариантНоменклатуры,ЗНАЧЕНИЕ(Справочник.ВариантыНоменклатуры.ПустаяСсылка)) КАК ВариантНоменклатуры,
	|			ЕСТЬNULL(Рег.Производитель,ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) КАК Производитель,
	|			ВТ.КодНоменклатурыКонтрагента КАК КодНоменклатурыКонтрагента,
	//|			ЕСТЬNULL(Рег.АртикулНоменклатурыКонтрагента,"""") КАК АртикулНоменклатурыКонтрагента,
	|			ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ВЫРАЗИТЬ(ЕСТЬNULL(Рег.НаименованиеНоменклатурыКонтрагента,"""") КАК Строка(1)) <> """"
	|					ТОГДА Рег.НаименованиеНоменклатурыКонтрагента
	|				ИНАЧЕ ВТ.НаименованиеНоменклатурыКонтрагента
	|			КОНЕЦ КАК Строка(1024)) КАК НаименованиеНоменклатурыКонтрагента,
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(Рег.ШтрихКодНоменклатурыКонтрагента,"""") <> """"
	|					ТОГДА Рег.ШтрихКодНоменклатурыКонтрагента
	|				ИНАЧЕ ВТ.ШтрихКодНоменклатурыКонтрагента
	|			КОНЕЦ КАК ШтрихКодНоменклатурыКонтрагента,
	|			&ЕдИзмШт КАК ЕдиницаИзмерения,
	//|			ВТ.ЕдИзмКонтрагента КАК ЕдИзмКонтрагента,
	|			ВЫБОР КОГДА Рег.Номенклатура ЕСТЬ NULL ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ КАК ИзРегистра
	|		ИЗ
	|			ВТ_ТабПоле КАК ВТ
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КДО_СоответствияНоменклатуры КАК Рег
	|					ПО ВТ.КодНоменклатурыКонтрагента = Рег.КодНоменклатурыКонтрагента
	|						И Рег.СвойствоСоответствия = &СвойствоСоответствия
	|	) КАК Таб
	|СГРУППИРОВАТЬ ПО
	|	Таб.КодНоменклатурыКонтрагента
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР КОГДА МАКСИМУМ(Таб.Номенклатура)<>&ПустаяНоменкл ТОГДА 0 ИНАЧЕ 1 КОНЕЦ ВОЗР,
	|	НаименованиеНоменклатурыКонтрагента ВОЗР, ИзРегистра УБЫВ 
	|";
	Запрос.УстановитьПараметр("ЕдИзмШт", Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"));
	Запрос.УстановитьПараметр("ПустаяНоменкл", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("СвойствоСоответствия", СвойствоСоответствия);
	МассивКонтрактов = Новый Массив;
	МассивКонтрактов.Добавить(Справочники.ДистрибьюторскиеКонтракты.НайтиПоКоду("Ц00482")); // "L'OREAL"
	МассивКонтрактов.Добавить(Справочники.ДистрибьюторскиеКонтракты.НайтиПоКоду("Ц00486")); // "ЛОРЕАЛЬ"
	Запрос.УстановитьПараметр("СписокКонтрактов", МассивКонтрактов);
	ТЗ_СоответствияКОтображению = Запрос.Выполнить().Выгрузить();
	Запрос = Неопределено;
	
	Соответствия.Загрузить(ТЗ_СоответствияКОтображению);
	
КонецФункции

Процедура ЗаполнитьТаблицуСоответствийВРегистр(ЗаписьПоверх=Истина)

	СвойствоСоответствия = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("000187");	// Артикул Лореаль
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ВТ.* ПОМЕСТИТЬ ВТ_ТабПоле ИЗ &Таб КАК ВТ;
	|
	|ВЫБРАТЬ
	|	ВТ.Номенклатура КАК Номенклатура,
	|	ВТ.Производитель КАК Производитель,
	|	&СвойствоСоответствия КАК СвойствоСоответствия,
	|	МАКСИМУМ(ВТ.КодНоменклатурыКонтрагента) КАК КодНоменклатурыКонтрагента,
	|	МАКСИМУМ(ВТ.АртикулНоменклатурыКонтрагента) КАК АртикулНоменклатурыКонтрагента,
	|	МАКСИМУМ(ВТ.НаименованиеНоменклатурыКонтрагента) КАК НаименованиеНоменклатурыКонтрагента,
	|	МАКСИМУМ(ВТ.ШтрихКодНоменклатурыКонтрагента) КАК ШтрихКодНоменклатурыКонтрагента,
	|	МАКСИМУМ(ВТ.ЕдиницаИзмерения) КАК ЕдиницаНоменклатурыКонтрагента
	|ИЗ
	|	ВТ_ТабПоле КАК ВТ
	|ГДЕ
	|	ЕСТЬNULL(ВТ.Номенклатура, &ПустаяНоменклатура) <> &ПустаяНоменклатура
	|		И ВТ.Номенклатура <> &Неопределено
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Номенклатура,
	|	ВТ.Производитель
	|";
	ТЗ_Соответствия = Соответствия.Выгрузить();
	Запрос.УстановитьПараметр("Таб", ТЗ_Соответствия);
	Запрос.УстановитьПараметр("СвойствоСоответствия", СвойствоСоответствия);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("Неопределено", Неопределено);
	ТЗ_ДляЗаписиВРегистр = Запрос.Выполнить().Выгрузить();
	
	// Запись построчная реализована в связи с тем, что может возникнуть потребность заполнять соответствия
	// несколькими лицами
	СтрокВсего = ТЗ_ДляЗаписиВРегистр.Количество();
	МенеджерЗаписиРегистра = РегистрыСведений.КДО_СоответствияНоменклатуры.СоздатьМенеджерЗаписи();
	
	ТекущаяСтрока = 0;
	Для Каждого СтрокаДляРегистра Из ТЗ_ДляЗаписиВРегистр Цикл
		
		//Для юзера
		ТекущаяСтрока = ТекущаяСтрока + 1;
		ОбработкаПрерыванияПользователя();
		
		//Проверка наличия записи
		МенеджерЗаписиРегистра.Номенклатура = СтрокаДляРегистра.Номенклатура;
		МенеджерЗаписиРегистра.СвойствоСоответствия = СвойствоСоответствия;
		МенеджерЗаписиРегистра.Прочитать();
		Если НЕ ЗаписьПоверх Тогда
			Если МенеджерЗаписиРегистра.Выбран() Тогда Продолжить; КонецЕсли;
		КонецЕсли;
		
		//Заполнение и запись
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиРегистра, СтрокаДляРегистра);
		МенеджерЗаписиРегистра.Записать();
		Состояние("Обработано " + ТекущаяСтрока + " строк из " + СтрокВсего + ".");
		
	КонецЦикла;
	
КонецПроцедуры

ТЗВыделенныеСтроки = Соответствия.Выгрузить().СкопироватьКолонки();















